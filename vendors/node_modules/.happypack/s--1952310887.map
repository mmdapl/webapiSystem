{"version":3,"sources":["exts\\yapi-plugin-import-postman\\client.js"],"names":["GenerateSchema","require","postman","importDataModule","folders","parseUrl","url","URL","parse","checkInterRepeat","interData","obj","arr","item","method","push","handleReq_query","query","res","length","name","key","desc","description","value","required","enabled","handleReq_headers","headers","handleReq_body_form","body_form","type","handlePath","path","pathname","decodeURIComponent","replace","run","JSON","requests","interfaceData","apis","cats","bind","Array","isArray","forEach","tag","_","find","collectionId","id","data","importPostman","e","error","reflect","title","req_query","req_headers","req_params","req_body_type","req_body_form","req_body_other","res_body","res_body_type","allKey","isString","indexOf","req_body_is_json_schema","transformJsonToSchema","params","substr","split","i","found","filter","folder","response","handleResponses","err","console","log","message","language","text","json","jsonData","schemaData","module","exports","bindHook"],"mappings":"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","file":"client.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import { message } from 'antd';\nimport URL from 'url';\nimport _ from 'underscore';\nconst GenerateSchema = require('generate-schema/src/schemas/json.js');\nimport { json_parse } from '../../common/utils.js';\n\nfunction postman(importDataModule) {\n  var folders = [];\n\n  function parseUrl(url) {\n    return URL.parse(url);\n  }\n\n  function checkInterRepeat(interData) {\n    let obj = {};\n    let arr = [];\n    for (let item in interData) {\n      // console.log(interData[item].url + \"-\" + interData[item].method);\n      if (!obj[interData[item].url + '-' + interData[item].method + '-' + interData[item].method]) {\n        arr.push(interData[item]);\n        obj[\n          interData[item].url + '-' + interData[item].method + '-' + interData[item].method\n        ] = true;\n      }\n    }\n    return arr;\n  }\n\n  function handleReq_query(query) {\n    let res = [];\n    if (query && query.length) {\n      for (let item in query) {\n        res.push({\n          name: query[item].key,\n          desc: query[item].description,\n          // example: query[item].value,\n          value: query[item].value,\n          required: query[item].enabled ? '1' : '0'\n        });\n      }\n    }\n    return res;\n  }\n  function handleReq_headers(headers) {\n    let res = [];\n    if (headers && headers.length) {\n      for (let item in headers) {\n        res.push({\n          name: headers[item].key,\n          desc: headers[item].description,\n          value: headers[item].value,\n          required: headers[item].enabled ? '1' : '0'\n        });\n      }\n    }\n    return res;\n  }\n\n  function handleReq_body_form(body_form) {\n    let res = [];\n    if (body_form && body_form.length) {\n      for (let item in body_form) {\n        res.push({\n          name: body_form[item].key,\n          // example: body_form[item].value,\n          value: body_form[item].value,\n          type: body_form[item].type,\n          required: body_form[item].enabled ? '1' : '0',\n          desc: body_form[item].description\n        });\n      }\n    }\n    return res;\n  }\n\n  function handlePath(path) {\n    path = parseUrl(path).pathname;\n    path = decodeURIComponent(path);\n    if (!path) return '';\n\n    path = path.replace(/\\{\\{.*\\}\\}/g, '');\n\n    if (path[0] != '/') {\n      path = '/' + path;\n    }\n    return path;\n  }\n\n  function run(res) {\n    try {\n      res = JSON.parse(res);\n      let interData = res.requests;\n      let interfaceData = { apis: [], cats: [] };\n      interData = checkInterRepeat.bind(this)(interData);\n\n      if (res.folders && Array.isArray(res.folders)) {\n        res.folders.forEach(tag => {\n          interfaceData.cats.push({\n            name: tag.name,\n            desc: tag.description\n          });\n        });\n      }\n\n      if (_.find(res.folders, item => item.collectionId === res.id)) {\n        folders = res.folders;\n      }\n\n      if (interData && interData.length) {\n        for (let item in interData) {\n          let data = importPostman.bind(this)(interData[item]);\n          interfaceData.apis.push(data);\n        }\n      }\n\n      return interfaceData;\n    } catch (e) {\n      message.error('文件格式必须为JSON');\n    }\n  }\n\n  function importPostman(data, key) {\n    let reflect = {\n      //数据字段映射关系\n      title: 'name',\n      path: 'url',\n      method: 'method',\n      desc: 'description',\n      req_query: 'queryParams',\n      req_headers: 'headerData',\n      req_params: '',\n      req_body_type: 'dataMode',\n      req_body_form: 'data',\n      req_body_other: 'rawModeData',\n      res_body: 'text',\n      res_body_type: 'language'\n    };\n    let allKey = [\n      'title',\n      'path',\n      'catname',\n      'method',\n      'desc',\n      'req_query',\n      'req_headers',\n      'req_body_type',\n      'req_body_form',\n      'req_body_other',\n      'res'\n    ];\n    key = key || allKey;\n    let res = {};\n    try {\n      for (let item in key) {\n        item = key[item];\n        if (item === 'req_query') {\n          res[item] = handleReq_query.bind(this)(data[reflect[item]]);\n        } else if (item === 'req_headers') {\n          res[item] = handleReq_headers.bind(this)(data[reflect[item]]);\n        } else if (item === 'req_body_form') {\n          res[item] = handleReq_body_form.bind(this)(data[reflect[item]]);\n        } else if (item === 'req_body_type') {\n          if (data[reflect[item]] === 'urlencoded' || data[reflect[item]] === 'params') {\n            res[item] = 'form';\n          } else {\n            if (_.isString(data.headers) && data.headers.indexOf('application/json') > -1) {\n              res[item] = 'json';\n            } else {\n              res[item] = 'raw';\n            }\n          }\n        } else if (item === 'req_body_other') {\n          if (_.isString(data.headers) && data.headers.indexOf('application/json') > -1) {\n            res.req_body_is_json_schema = true;\n            res[item] = transformJsonToSchema(data[reflect[item]]);\n          } else {\n            res[item] = data[reflect[item]];\n          }\n        } else if (item === 'path') {\n          res[item] = handlePath.bind(this)(data[reflect[item]]);\n          if (res[item] && res[item].indexOf('/:') > -1) {\n            let params = res[item].substr(res[item].indexOf('/:') + 2).split('/:');\n            // res[item] = res[item].substr(0,res[item].indexOf(\"/:\"));\n            let arr = [];\n            for (let i in params) {\n              arr.push({\n                name: params[i],\n                desc: ''\n              });\n            }\n            res['req_params'] = arr;\n          }\n        } else if (item === 'title') {\n          let path = handlePath.bind(this)(data[reflect['path']]);\n          if (data[reflect[item]].indexOf(path) > -1) {\n            res[item] = path;\n            if (res[item] && res[item].indexOf('/:') > -1) {\n              res[item] = res[item].substr(0, res[item].indexOf('/:'));\n            }\n          } else {\n            res[item] = data[reflect[item]];\n          }\n        } else if (item === 'catname') {\n          let found = folders.filter(item => {\n            return item.id === data.folder;\n          });\n          res[item] = found && Array.isArray(found) && found.length > 0 ? found[0].name : null;\n        } else if (item === 'res') {\n          let response = handleResponses(data['responses']);\n          if (response) {\n            (res['res_body'] = response['res_body']),\n              (res['res_body_type'] = response['res_body_type']);\n          }\n        } else {\n          res[item] = data[reflect[item]];\n        }\n      }\n    } catch (err) {\n      console.log(err.message);\n      message.error(`${err.message}, 导入的postman格式有误`);\n    }\n    return res;\n  }\n\n  const handleResponses = data => {\n    if (data && data.length) {\n      let res = data[0];\n      let response = {};\n      response['res_body_type'] = res.language === 'json' ? 'json' : 'raw';\n      // response['res_body'] = res.language === 'json' ? transformJsonToSchema(res.text): res.text;\n      if (res.language === 'json') {\n        response['res_body_is_json_schema'] = true;\n        response['res_body'] = transformJsonToSchema(res.text);\n      } else {\n        response['res_body'] = res.text;\n      }\n      return response;\n    }\n\n    return null;\n  };\n\n  const transformJsonToSchema = json => {\n    json = json || {};\n    let jsonData = json_parse(json);\n\n    jsonData = GenerateSchema(jsonData);\n\n    let schemaData = JSON.stringify(jsonData);\n    return schemaData;\n  };\n\n  if (!importDataModule || typeof importDataModule !== 'object') {\n    console.error('obj参数必需是一个对象');\n    return null;\n  }\n\n  importDataModule.postman = {\n    name: 'Postman',\n    run: run,\n    desc: '注意：只支持json格式数据'\n  };\n}\n\nmodule.exports = function() {\n  this.bindHook('import_data', postman);\n};\n"]}