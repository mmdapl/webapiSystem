{"version":3,"sources":["node_modules\\json-schema-editor-visual\\package\\components\\MockSelect\\index.js"],"names":["Option","MockSelect","props","context","state","mock","Model","__jsonSchemaMock","render","schema","children","map","item","onChange","type","e","stopPropagation","showEdit","React","Component","propTypes","PropTypes","object","func","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;;;AADA,IAAMA,SAAS,uBAAaA,MAA5B;IAGqBC,U;;;AACnB,sBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,+DAC1B,4BAAMD,KAAN,CAD0B;;AAE1B,UAAKE,KAAL,GAAa;AACXC,YAAM;AADK,KAAb;AAGA,UAAKA,IAAL,GAAYF,QAAQG,KAAR,CAAcC,gBAAd,IAAkC,EAA9C;AAL0B;AAM3B;;uBAQDC,M,qBAAS;AAAA;;AACP;AADO,QAECC,MAFD,GAEY,KAAKP,KAFjB,CAECO,MAFD;;AAGP,QAAMC,WAAW,KAAKL,IAAL,CAAUM,GAAV,CAAc,UAACC,IAAD;AAAA,aAAU;AAAC,cAAD;AAAA,UAAQ,KAAKA,KAAKP,IAAlB;AAAyBO,aAAKP;AAA9B,OAAV;AAAA,KAAd,CAAjB;;AAEA,WACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,qBAAU,yBADZ;AAEE,oCAA0B,KAF5B;AAGE,sBAAYK,QAHd;AAIE,uBAAa,qBAAe,MAAf,CAJf;AAKE,2BAAgB,OALlB;AAME,wBAAc,IANhB;AAOE,iBAAOD,OAAOJ,IAAP,GAAcI,OAAOJ,IAAP,CAAYA,IAA1B,GAAiC,EAP1C;AAQE,oBAAU,KAAKH,KAAL,CAAWW,QARvB;AASE,oBAAUJ,OAAOK,IAAP,KAAgB,QAAhB,IAA4BL,OAAOK,IAAP,KAAgB;AATxD;AAWE,yDAAO,YAAY,gDAAM,MAAK,MAAX,EAAkB,SAAS,iBAACC,CAAD,EAAO;AAACA,gBAAEC,eAAF,GAAqB,OAAKd,KAAL,CAAWe,QAAX;AAAsB,aAA9E,GAAnB;AAXF;AADF,KADF;AAiBD,G;;;EArCqCC,gBAAMC,S,UASrCC,S,GAAY;AACjBX,UAAQY,oBAAUC,MADD;AAEjBL,YAAUI,oBAAUE,IAFH;AAGjBV,YAAUQ,oBAAUE;AAHH,C;kBATAtB,U;;;AAwCrBA,WAAWuB,YAAX,GAA0B;AACxBlB,SAAOe,oBAAUC;AADO,CAA1B","file":"index.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React from 'react';\nimport { Input, AutoComplete, Icon } from 'antd';\nimport PropTypes from 'prop-types';\nconst Option = AutoComplete.Option;\nimport LocaleProvider from '../LocalProvider/index.js';\n\nexport default class MockSelect extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      mock: ''\n    };\n    this.mock = context.Model.__jsonSchemaMock || [];\n  }\n\n  static propTypes = {\n    schema: PropTypes.object,\n    showEdit: PropTypes.func,\n    onChange: PropTypes.func\n  };\n\n  render() {\n    // const children = [];\n    const { schema } = this.props;\n    const children = this.mock.map((item) => <Option key={item.mock}>{item.mock}</Option>);\n\n    return (\n      <div>\n        <AutoComplete\n          className=\"certain-category-search\"\n          dropdownMatchSelectWidth={false}\n          dataSource={children}\n          placeholder={LocaleProvider('mock')}\n          optionLabelProp=\"value\"\n          filterOption={true}\n          value={schema.mock ? schema.mock.mock : ''}\n          onChange={this.props.onChange}\n          disabled={schema.type === 'object' || schema.type === 'array'}\n        >\n          <Input addonAfter={<Icon type=\"edit\" onClick={(e) => {e.stopPropagation(); this.props.showEdit()}} />} />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nMockSelect.contextTypes = {\n  Model: PropTypes.object\n};\n"]}