{"version":3,"sources":["client\\components\\AceEditor\\AceEditor.js"],"names":["ModeMap","javascript","json","text","xml","html","defaultStyle","width","height","getMode","mode","AceEditor","props","componentDidMount","editor","container","editorElement","data","onChange","readOnly","fullScreen","getSession","setMode","callback","componentWillReceiveProps","nextProps","getValue","setValue","clearSelection","render","className","undefined","style","React","PureComponent","propTypes","PropTypes","any","func","string","bool","object","insertCode"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,UAAU;AACdC,cAAY,qBADE;AAEdC,QAAM,eAFQ;AAGdC,QAAM,eAHQ;AAIdC,OAAK,cAJS;AAKdC,QAAM;AALQ,CAAhB;;AAQA,IAAMC,eAAe,EAAEC,OAAO,MAAT,EAAiBC,QAAQ,OAAzB,EAArB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOV,QAAQU,IAAR,KAAiBV,QAAQG,IAAhC;AACD;;IAEKQ,S;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;AAAA,0DACjB,gCAAMA,KAAN,CADiB;AAElB;;sBAcDC,iB,gCAAoB;AAClB,SAAKC,MAAL,GAAc,0BAAW;AACvBC,iBAAW,KAAKC,aADO;AAEvBC,YAAM,KAAKL,KAAL,CAAWK,IAFM;AAGvBC,gBAAU,KAAKN,KAAL,CAAWM,QAHE;AAIvBC,gBAAU,KAAKP,KAAL,CAAWO,QAJE;AAKvBC,kBAAY,KAAKR,KAAL,CAAWQ;AALA,KAAX,CAAd;AAOA,QAAIV,OAAO,KAAKE,KAAL,CAAWF,IAAX,IAAmB,YAA9B;AACA,SAAKI,MAAL,CAAYA,MAAZ,CAAmBO,UAAnB,GAAgCC,OAAhC,CAAwCb,QAAQC,IAAR,CAAxC;AACA,QAAI,OAAO,KAAKE,KAAL,CAAWW,QAAlB,KAA+B,UAAnC,EAA+C;AAC7C,WAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKT,MAAL,CAAYA,MAAhC;AACD;AACF,G;;sBAEDU,yB,sCAA0BC,S,EAAW;AACnC,QAAI,CAAC,KAAKX,MAAV,EAAkB;AAChB;AACD;AACD,QAAIW,UAAUR,IAAV,KAAmB,KAAKL,KAAL,CAAWK,IAA9B,IAAsC,KAAKH,MAAL,CAAYY,QAAZ,OAA2BD,UAAUR,IAA/E,EAAqF;AACnF,WAAKH,MAAL,CAAYa,QAAZ,CAAqBF,UAAUR,IAA/B;AACA,UAAIP,OAAOe,UAAUf,IAAV,IAAkB,YAA7B;AACA,WAAKI,MAAL,CAAYA,MAAZ,CAAmBO,UAAnB,GAAgCC,OAAhC,CAAwCb,QAAQC,IAAR,CAAxC;AACA,WAAKI,MAAL,CAAYA,MAAZ,CAAmBc,cAAnB;AACD;AACF,G;;sBAEDC,M,qBAAS;AAAA;;AACP,WACE;AACE,iBAAW,KAAKjB,KAAL,CAAWkB,SADxB;AAEE,aAAO,KAAKlB,KAAL,CAAWkB,SAAX,GAAuBC,SAAvB,GAAmC,KAAKnB,KAAL,CAAWoB,KAAX,IAAoB1B,YAFhE;AAGE,WAAK,qBAAU;AACb,eAAKU,aAAL,GAAqBF,MAArB;AACD;AALH,MADF;AASD,G;;;EAtDqBmB,gBAAMC,a,UAKrBC,S,GAAY;AACjBlB,QAAMmB,oBAAUC,GADC;AAEjBnB,YAAUkB,oBAAUE,IAFH;AAGjBR,aAAWM,oBAAUG,MAHJ;AAIjB7B,QAAM0B,oBAAUG,MAJC,EAIO;AACxBpB,YAAUiB,oBAAUI,IALH;AAMjBjB,YAAUa,oBAAUE,IANH;AAOjBN,SAAOI,oBAAUK,MAPA;AAQjBrB,cAAYgB,oBAAUI,IARL;AASjBE,cAAYN,oBAAUE;AATL,C;kBAoDN3B,S","file":"AceEditor.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React from 'react';\nimport mockEditor from './mockEditor';\nimport PropTypes from 'prop-types';\nimport './AceEditor.scss';\n\nconst ModeMap = {\n  javascript: 'ace/mode/javascript',\n  json: 'ace/mode/json',\n  text: 'ace/mode/text',\n  xml: 'ace/mode/xml',\n  html: 'ace/mode/html'\n};\n\nconst defaultStyle = { width: '100%', height: '200px' };\n\nfunction getMode(mode) {\n  return ModeMap[mode] || ModeMap.text;\n}\n\nclass AceEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  static propTypes = {\n    data: PropTypes.any,\n    onChange: PropTypes.func,\n    className: PropTypes.string,\n    mode: PropTypes.string, //enum[json, text, javascript], default is javascript\n    readOnly: PropTypes.bool,\n    callback: PropTypes.func,\n    style: PropTypes.object,\n    fullScreen: PropTypes.bool,\n    insertCode: PropTypes.func\n  };\n\n  componentDidMount() {\n    this.editor = mockEditor({\n      container: this.editorElement,\n      data: this.props.data,\n      onChange: this.props.onChange,\n      readOnly: this.props.readOnly,\n      fullScreen: this.props.fullScreen\n    });\n    let mode = this.props.mode || 'javascript';\n    this.editor.editor.getSession().setMode(getMode(mode));\n    if (typeof this.props.callback === 'function') {\n      this.props.callback(this.editor.editor);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.editor) {\n      return;\n    }\n    if (nextProps.data !== this.props.data && this.editor.getValue() !== nextProps.data) {\n      this.editor.setValue(nextProps.data);\n      let mode = nextProps.mode || 'javascript';\n      this.editor.editor.getSession().setMode(getMode(mode));\n      this.editor.editor.clearSelection();\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        style={this.props.className ? undefined : this.props.style || defaultStyle}\n        ref={editor => {\n          this.editorElement = editor;\n        }}\n      />\n    );\n  }\n}\n\nexport default AceEditor;\n"]}