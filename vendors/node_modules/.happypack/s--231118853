'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var handleSwaggerData = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(res) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new _promise2.default(function (resolve) {
              var data = swagger({
                spec: res
              });

              data.then(function (res) {
                resolve(res.spec);
              });
            });

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function handleSwaggerData(_x) {
    return _ref.apply(this, arguments);
  };
}();

var run = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(res) {
    var interfaceData;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            interfaceData = { apis: [], cats: [] };

            if (typeof res === 'string' && res) {
              try {
                res = JSON.parse(res);
              } catch (e) {
                console.error('json 解析出错', e.message);
              }
            }

            isOAS3 = res.openapi && compareVersions(res.openapi, '3.0.0') >= 0;
            if (isOAS3) {
              res = openapi2swagger(res);
            }
            _context2.next = 6;
            return handleSwaggerData(res);

          case 6:
            res = _context2.sent;

            SwaggerData = res;

            if (res.tags && Array.isArray(res.tags)) {
              res.tags.forEach(function (tag) {
                interfaceData.cats.push({
                  name: tag.name,
                  desc: tag.description
                });
              });
            }

            _.each(res.paths, function (apis, path) {
              // parameters is common parameters, not a method
              delete apis.parameters;
              _.each(apis, function (api, method) {
                api.path = path;
                api.method = method;
                var data = null;
                try {
                  data = handleSwagger(api);
                  if (data.catname) {
                    if (!_.find(interfaceData.cats, function (item) {
                      return item.name === data.catname;
                    })) {
                      interfaceData.cats.push({
                        name: data.catname,
                        desc: data.catname
                      });
                    }
                  }
                } catch (err) {
                  data = null;
                }
                if (data) {
                  interfaceData.apis.push(data);
                }
              });
            });
            return _context2.abrupt('return', interfaceData);

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function run(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require('underscore');
var swagger = require('swagger-client');
var compareVersions = require('compare-versions');

var SwaggerData, isOAS3;
function handlePath(path) {
  if (path === '/') return path;
  if (path.charAt(0) != '/') {
    path = '/' + path;
  }
  if (path.charAt(path.length - 1) === '/') {
    path = path.substr(0, path.length - 1);
  }
  return path;
}

function openapi2swagger(data) {
  data.swagger = '2.0';
  _.each(data.paths, function (apis) {
    _.each(apis, function (api) {
      _.each(api.responses, function (res) {
        if (res.content && res.content['application/json'] && (0, _typeof3.default)(res.content['application/json']) === 'object') {
          (0, _assign2.default)(res, res.content['application/json']);
          delete res.content;
        }
      });
      if (api.requestBody) {
        if (!api.parameters) api.parameters = [];
        var body = {
          type: 'object',
          name: 'body',
          in: 'body'
        };
        try {
          body.schema = api.requestBody.content['application/json'].schema;
        } catch (e) {
          body.schema = {};
        }

        api.parameters.push(body);
      }
    });
  });

  return data;
}

function handleSwagger(data) {

  var api = {};
  //处理基本信息
  api.method = data.method.toUpperCase();
  api.title = data.summary || data.path;
  api.desc = data.description;
  api.catname = data.tags && Array.isArray(data.tags) ? data.tags[0] : null;

  api.path = handlePath(data.path);
  api.req_params = [];
  api.req_body_form = [];
  api.req_headers = [];
  api.req_query = [];
  api.req_body_type = 'raw';
  api.res_body_type = 'raw';

  if (data.produces && data.produces.indexOf('application/json') > -1) {
    api.res_body_type = 'json';
    api.res_body_is_json_schema = true;
  }

  if (data.consumes && Array.isArray(data.consumes)) {
    if (data.consumes.indexOf('application/x-www-form-urlencoded') > -1 || data.consumes.indexOf('multipart/form-data') > -1) {
      api.req_body_type = 'form';
    } else if (data.consumes.indexOf('application/json') > -1) {
      api.req_body_type = 'json';
      api.req_body_is_json_schema = true;
    }
  }

  //处理response
  api.res_body = handleResponse(data.responses);
  try {
    JSON.parse(api.res_body);
    api.res_body_type = 'json';
    api.res_body_is_json_schema = true;
  } catch (e) {
    api.res_body_type = 'raw';
  }
  //处理参数
  function simpleJsonPathParse(key, json) {
    if (!key || typeof key !== 'string' || key.indexOf('#/') !== 0 || key.length <= 2) {
      return null;
    }
    var keys = key.substr(2).split('/');
    keys = keys.filter(function (item) {
      return item;
    });
    for (var i = 0, l = keys.length; i < l; i++) {
      try {
        json = json[keys[i]];
      } catch (e) {
        json = '';
        break;
      }
    }
    return json;
  }

  if (data.parameters && Array.isArray(data.parameters)) {
    data.parameters.forEach(function (param) {
      if (param && (typeof param === 'undefined' ? 'undefined' : (0, _typeof3.default)(param)) === 'object' && param.$ref) {
        param = simpleJsonPathParse(param.$ref, { parameters: SwaggerData.parameters });
      }
      var defaultParam = {
        name: param.name,
        desc: param.description,
        required: param.required ? '1' : '0'
      };

      if (param.in) {
        switch (param.in) {
          case 'path':
            api.req_params.push(defaultParam);
            break;
          case 'query':
            api.req_query.push(defaultParam);
            break;
          case 'body':
            handleBodyPamras(param.schema, api);
            break;
          case 'formData':
            defaultParam.type = param.type === 'file' ? 'file' : 'text';
            api.req_body_form.push(defaultParam);
            break;
          case 'header':
            api.req_headers.push(defaultParam);
            break;
        }
      } else {
        api.req_query.push(defaultParam);
      }
    });
  }

  return api;
}

function isJson(json) {
  try {
    return JSON.parse(json);
  } catch (e) {
    return false;
  }
}

function handleBodyPamras(data, api) {
  api.req_body_other = (0, _stringify2.default)(data, null, 2);
  if (isJson(api.req_body_other)) {
    api.req_body_type = 'json';
    api.req_body_is_json_schema = true;
  }
}

function handleResponse(api) {
  var res_body = '';
  if (!api || (typeof api === 'undefined' ? 'undefined' : (0, _typeof3.default)(api)) !== 'object') {
    return res_body;
  }
  var codes = (0, _keys2.default)(api);
  var curCode = void 0;
  if (codes.length > 0) {
    if (codes.indexOf('200') > -1) {
      curCode = '200';
    } else curCode = codes[0];

    var res = api[curCode];
    if (res && (typeof res === 'undefined' ? 'undefined' : (0, _typeof3.default)(res)) === 'object') {
      if (res.schema) {
        res_body = (0, _stringify2.default)(res.schema, null, 2);
      } else if (res.description) {
        res_body = res.description;
      }
    } else if (typeof res === 'string') {
      res_body = res;
    } else {
      res_body = '';
    }
  } else {
    res_body = '';
  }
  return res_body;
}

module.exports = run;