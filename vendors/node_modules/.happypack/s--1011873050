'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var handle = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(res, projectId, selectCatid, menuList, basePath, dataSync, messageError, messageSuccess, callback, token, port) {
    var _this = this;

    var handleAddCat, handleAddInterface;
    return _regenerator2.default.wrap(function _callee3$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            handleAddCat = function () {
              var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cats) {
                var catsObj, _loop, i, _ret;

                return _regenerator2.default.wrap(function _callee$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        catsObj = {};

                        if (!(cats && Array.isArray(cats))) {
                          _context2.next = 12;
                          break;
                        }

                        _loop = /*#__PURE__*/_regenerator2.default.mark(function _loop(i) {
                          var cat, findCat, apipath, data, result;
                          return _regenerator2.default.wrap(function _loop$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  cat = cats[i];
                                  findCat = _.find(menuList, function (menu) {
                                    return menu.name === cat.name;
                                  });

                                  catsObj[cat.name] = cat;

                                  if (!findCat) {
                                    _context.next = 7;
                                    break;
                                  }

                                  cat.id = findCat._id;
                                  _context.next = 18;
                                  break;

                                case 7:
                                  apipath = '/api/interface/add_cat';

                                  if (isNode) {
                                    apipath = 'http://127.0.0.1:' + port + apipath;
                                  }

                                  data = {
                                    name: cat.name,
                                    project_id: projectId,
                                    desc: cat.desc,
                                    token: token
                                  };
                                  _context.next = 12;
                                  return axios.post(apipath, data);

                                case 12:
                                  result = _context.sent;

                                  if (!result.data.errcode) {
                                    _context.next = 17;
                                    break;
                                  }

                                  messageError(result.data.errmsg);
                                  callback({ showLoading: false });
                                  return _context.abrupt('return', {
                                    v: false
                                  });

                                case 17:
                                  cat.id = result.data.data._id;

                                case 18:
                                case 'end':
                                  return _context.stop();
                              }
                            }
                          }, _loop, _this);
                        });
                        i = 0;

                      case 4:
                        if (!(i < cats.length)) {
                          _context2.next = 12;
                          break;
                        }

                        return _context2.delegateYield(_loop(i), 't0', 6);

                      case 6:
                        _ret = _context2.t0;

                        if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
                          _context2.next = 9;
                          break;
                        }

                        return _context2.abrupt('return', _ret.v);

                      case 9:
                        i++;
                        _context2.next = 4;
                        break;

                      case 12:
                        return _context2.abrupt('return', catsObj);

                      case 13:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function handleAddCat(_x12) {
                return _ref2.apply(this, arguments);
              };
            }();

            handleAddInterface = function () {
              var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(res) {
                var cats, len, count, successNum, existNum, index, item, data, apipath, result, _apipath, _result;

                return _regenerator2.default.wrap(function _callee2$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return handleAddCat(res.cats);

                      case 2:
                        cats = _context3.sent;

                        if (!(cats === false)) {
                          _context3.next = 5;
                          break;
                        }

                        return _context3.abrupt('return');

                      case 5:
                        res = res.apis;
                        len = res.length;
                        count = 0;
                        successNum = len;
                        existNum = 0;

                        if (!(len === 0)) {
                          _context3.next = 14;
                          break;
                        }

                        messageError('\u89E3\u6790\u6570\u636E\u4E3A\u7A7A');
                        callback({ showLoading: false });
                        return _context3.abrupt('return');

                      case 14:
                        index = 0;

                      case 15:
                        if (!(index < res.length)) {
                          _context3.next = 49;
                          break;
                        }

                        item = res[index];
                        data = (0, _assign2.default)(item, {
                          project_id: projectId,
                          catid: selectCatid
                        });

                        if (basePath) {
                          data.path = data.path.indexOf(basePath) === 0 ? data.path.substr(basePath.length) : data.path;
                        }
                        if (data.catname && cats[data.catname] && (0, _typeof3.default)(cats[data.catname]) === 'object' && cats[data.catname].id) {
                          data.catid = cats[data.catname].id;
                        }
                        data.token = token;

                        if (!(dataSync !== 'normal')) {
                          _context3.next = 32;
                          break;
                        }

                        // 开启同步功能
                        count++;
                        apipath = '/api/interface/save';

                        if (isNode) {
                          apipath = 'http://127.0.0.1:' + port + apipath;
                        }
                        data.dataSync = dataSync;
                        _context3.next = 28;
                        return axios.post(apipath, data);

                      case 28:
                        result = _context3.sent;

                        if (result.data.errcode) {
                          successNum--;
                          callback({ showLoading: false });
                          messageError(result.data.errmsg);
                        } else {
                          existNum = existNum + result.data.data.length;
                        }
                        _context3.next = 45;
                        break;

                      case 32:
                        // 未开启同步功能
                        count++;
                        _apipath = '/api/interface/add';

                        if (isNode) {
                          _apipath = 'http://127.0.0.1:' + port + _apipath;
                        }
                        _context3.next = 37;
                        return axios.post(_apipath, data);

                      case 37:
                        _result = _context3.sent;

                        if (!_result.data.errcode) {
                          _context3.next = 45;
                          break;
                        }

                        successNum--;
                        if (_result.data.errcode == 40022) {
                          existNum++;
                        }

                        if (!(_result.data.errcode == 40033)) {
                          _context3.next = 45;
                          break;
                        }

                        callback({ showLoading: false });
                        messageError('没有权限');
                        return _context3.abrupt('break', 49);

                      case 45:
                        if (count === len) {
                          callback({ showLoading: false });
                          messageSuccess('\u6210\u529F\u5BFC\u5165\u63A5\u53E3 ' + successNum + ' \u4E2A, \u5DF2\u5B58\u5728\u7684\u63A5\u53E3 ' + existNum + ' \u4E2A');
                        }

                      case 46:
                        index++;
                        _context3.next = 15;
                        break;

                      case 49:
                      case 'end':
                        return _context3.stop();
                    }
                  }
                }, _callee2, _this);
              }));

              return function handleAddInterface(_x13) {
                return _ref3.apply(this, arguments);
              };
            }();

            _context4.next = 4;
            return handleAddInterface(res);

          case 4:
            return _context4.abrupt('return', _context4.sent);

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee3, this);
  }));

  return function handle(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require('underscore');
var axios = require('axios');

var isNode = (typeof global === 'undefined' ? 'undefined' : (0, _typeof3.default)(global)) == 'object' && global.global === global;

module.exports = handle;