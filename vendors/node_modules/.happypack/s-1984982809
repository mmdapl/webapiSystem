'use strict';

exports.__esModule = true;
exports.default = undefined;

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _tree = require('antd/lib/tree');

var _tree2 = _interopRequireDefault(_tree);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _interfaceCol = require('../../../../reducer/modules/interfaceCol');

var _project = require('../../../../reducer/modules/project');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _ImportInterface = require('./ImportInterface');

var _ImportInterface2 = _interopRequireDefault(_ImportInterface);

var _common = require('../../../../common.js');

require('./InterfaceColMenu.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TreeNode = _tree2.default.TreeNode;
var FormItem = _form2.default.Item;
var confirm = _modal2.default.confirm;
var headHeight = 240; // menu顶部到网页顶部部分的高度

var ColModalForm = _form2.default.create()(function (props) {
  var visible = props.visible,
      onCancel = props.onCancel,
      onCreate = props.onCreate,
      form = props.form,
      title = props.title;
  var getFieldDecorator = form.getFieldDecorator;

  return _react2.default.createElement(
    _modal2.default,
    { visible: visible, title: title, onCancel: onCancel, onOk: onCreate },
    _react2.default.createElement(
      _form2.default,
      { layout: 'vertical' },
      _react2.default.createElement(
        FormItem,
        { label: '\u96C6\u5408\u540D' },
        getFieldDecorator('colName', {
          rules: [{ required: true, message: '请输入集合命名！' }]
        })(_react2.default.createElement(_input2.default, null))
      ),
      _react2.default.createElement(
        FormItem,
        { label: '\u7B80\u4ECB' },
        getFieldDecorator('colDesc')(_react2.default.createElement(_input2.default, { type: 'textarea' }))
      )
    )
  );
});

var InterfaceColMenu = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    interfaceColList: state.interfaceCol.interfaceColList,
    currCase: state.interfaceCol.currCase,
    isRander: state.interfaceCol.isRander,
    currCaseId: state.interfaceCol.currCaseId,
    // list: state.inter.list,
    // 当前项目的信息
    curProject: state.project.currProject
    // projectList: state.project.projectList
  };
}, {
  fetchInterfaceColList: _interfaceCol.fetchInterfaceColList,
  fetchInterfaceCaseList: _interfaceCol.fetchInterfaceCaseList,
  fetchCaseData: _interfaceCol.fetchCaseData,
  // fetchInterfaceListMenu,
  fetchCaseList: _interfaceCol.fetchCaseList,
  setColData: _interfaceCol.setColData,
  fetchProjectList: _project.fetchProjectList
}), _dec(_class = (0, _reactRouter.withRouter)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(InterfaceColMenu, _Component);

  function InterfaceColMenu(props) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, InterfaceColMenu);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.state = {
      colModalType: '',
      colModalVisible: false,
      editColId: 0,
      filterValue: '',
      importInterVisible: false,
      importInterIds: [],
      importColId: 0,
      expands: null,
      list: [],
      delIcon: null,
      selectedProject: null
    };
    _this.addorEditCol = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _this$form$getFieldsV, name, desc, _this$state, colModalType, col_id, project_id, res;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$form$getFieldsV = _this.form.getFieldsValue(), name = _this$form$getFieldsV.colName, desc = _this$form$getFieldsV.colDesc;
              _this$state = _this.state, colModalType = _this$state.colModalType, col_id = _this$state.editColId;
              project_id = _this.props.match.params.id;
              res = {};

              if (!(colModalType === 'add')) {
                _context.next = 10;
                break;
              }

              _context.next = 7;
              return _axios2.default.post('/api/col/add_col', { name: name, desc: desc, project_id: project_id });

            case 7:
              res = _context.sent;
              _context.next = 14;
              break;

            case 10:
              if (!(colModalType === 'edit')) {
                _context.next = 14;
                break;
              }

              _context.next = 13;
              return _axios2.default.post('/api/col/up_col', { name: name, desc: desc, col_id: col_id });

            case 13:
              res = _context.sent;

            case 14:
              if (!res.data.errcode) {
                _this.setState({
                  colModalVisible: false
                });
                _message3.default.success(colModalType === 'edit' ? '修改集合成功' : '添加集合成功');
                // await this.props.fetchInterfaceColList(project_id);
                _this.getList();
              } else {
                _message3.default.error(res.data.errmsg);
              }

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    }));

    _this.onExpand = function (keys) {
      _this.setState({ expands: keys });
    };

    _this.onSelect = function (keys) {
      if (keys.length) {
        var type = keys[0].split('_')[0];
        var id = keys[0].split('_')[1];
        var project_id = _this.props.match.params.id;
        if (type === 'col') {
          _this.props.setColData({
            isRander: false
          });
          _this.props.history.push('/project/' + project_id + '/interface/col/' + id);
        } else {
          _this.props.setColData({
            isRander: false
          });
          _this.props.history.push('/project/' + project_id + '/interface/case/' + id);
        }
      }
      _this.setState({
        expands: null
      });
    };

    _this.showDelColConfirm = function (colId) {
      var that = _this;
      var params = _this.props.match.params;
      confirm({
        title: '您确认删除此测试集合',
        content: '温馨提示：该操作会删除该集合下所有测试用例，用例删除后无法恢复',
        okText: '确认',
        cancelText: '取消',
        onOk: function onOk() {
          var _this3 = this;

          return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var res, result, nextColId;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return _axios2.default.get('/api/col/del_col?col_id=' + colId);

                  case 2:
                    res = _context2.sent;

                    if (res.data.errcode) {
                      _context2.next = 12;
                      break;
                    }

                    _message3.default.success('删除集合成功');
                    _context2.next = 7;
                    return that.getList();

                  case 7:
                    result = _context2.sent;
                    nextColId = result.payload.data.data[0]._id;


                    that.props.history.push('/project/' + params.id + '/interface/col/' + nextColId);
                    _context2.next = 13;
                    break;

                  case 12:
                    _message3.default.error(res.data.errmsg);

                  case 13:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, _this3);
          }))();
        }
      });
    };

    _this.copyInterface = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(item) {
        var desc, project_id, col_id, name, add_col_res, new_col_id, add_case_list_res;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(_this._copyInterfaceSign === true)) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt('return');

              case 2:
                _this._copyInterfaceSign = true;
                desc = item.desc, project_id = item.project_id, col_id = item._id;
                name = item.name;

                name = name + ' copy';

                // 添加集合
                _context3.next = 8;
                return _axios2.default.post('/api/col/add_col', { name: name, desc: desc, project_id: project_id });

              case 8:
                add_col_res = _context3.sent;

                if (!add_col_res.data.errcode) {
                  _context3.next = 12;
                  break;
                }

                _message3.default.error(add_col_res.data.errmsg);
                return _context3.abrupt('return');

              case 12:
                new_col_id = add_col_res.data.data._id;

                // 克隆集合

                _context3.next = 15;
                return _axios2.default.post('/api/col/clone_case_list', {
                  new_col_id: new_col_id,
                  col_id: col_id,
                  project_id: project_id
                });

              case 15:
                add_case_list_res = _context3.sent;

                _this._copyInterfaceSign = false;

                if (!add_case_list_res.data.errcode) {
                  _context3.next = 20;
                  break;
                }

                _message3.default.error(add_case_list_res.data.errmsg);
                return _context3.abrupt('return');

              case 20:

                // 刷新接口列表
                // await this.props.fetchInterfaceColList(project_id);
                _this.getList();
                _this.props.setColData({ isRander: true });
                _message3.default.success('克隆测试集成功');

              case 23:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, _this2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.showNoDelColConfirm = function () {
      confirm({
        title: '此测试集合为最后一个集合',
        content: '温馨提示：建议不要删除'
      });
    };

    _this.caseCopy = function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(caseId) {
        var that, caseData, data, res, colId, projectId;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                that = _this;
                _context4.next = 3;
                return that.props.fetchCaseData(caseId);

              case 3:
                caseData = _context4.sent;
                data = caseData.payload.data.data;

                data = JSON.parse((0, _stringify2.default)(data));
                data.casename = data.casename + '_copy';
                delete data._id;
                _context4.next = 10;
                return _axios2.default.post('/api/col/add_case', data);

              case 10:
                res = _context4.sent;

                if (res.data.errcode) {
                  _context4.next = 21;
                  break;
                }

                _message3.default.success('克隆用例成功');
                colId = res.data.data.col_id;
                projectId = res.data.data.project_id;
                _context4.next = 17;
                return _this.getList();

              case 17:
                _this.props.history.push('/project/' + projectId + '/interface/col/' + colId);
                _this.setState({
                  visible: false
                });
                _context4.next = 22;
                break;

              case 21:
                _message3.default.error(res.data.errmsg);

              case 22:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, _this2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }();

    _this.showDelCaseConfirm = function (caseId) {
      var that = _this;
      var params = _this.props.match.params;
      confirm({
        title: '您确认删除此测试用例',
        content: '温馨提示：用例删除后无法恢复',
        okText: '确认',
        cancelText: '取消',
        onOk: function onOk() {
          var _this4 = this;

          return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
            var res;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return _axios2.default.get('/api/col/del_case?caseid=' + caseId);

                  case 2:
                    res = _context5.sent;

                    if (!res.data.errcode) {
                      _message3.default.success('删除用例成功');
                      that.getList();
                      // 如果删除当前选中 case，切换路由到集合
                      if (+caseId === +that.props.currCaseId) {
                        that.props.history.push('/project/' + params.id + '/interface/col/');
                      } else {
                        // that.props.fetchInterfaceColList(that.props.match.params.id);
                        that.props.setColData({ isRander: true });
                      }
                    } else {
                      _message3.default.error(res.data.errmsg);
                    }

                  case 4:
                  case 'end':
                    return _context5.stop();
                }
              }
            }, _callee5, _this4);
          }))();
        }
      });
    };

    _this.showColModal = function (type, col) {
      var editCol = type === 'edit' ? { colName: col.name, colDesc: col.desc } : { colName: '', colDesc: '' };
      _this.setState({
        colModalVisible: true,
        colModalType: type || 'add',
        editColId: col && col._id
      });
      _this.form.setFieldsValue(editCol);
    };

    _this.saveFormRef = function (form) {
      _this.form = form;
    };

    _this.selectInterface = function (importInterIds, selectedProject) {
      _this.setState({ importInterIds: importInterIds, selectedProject: selectedProject });
    };

    _this.showImportInterfaceModal = function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(colId) {
        var groupId;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // const projectId = this.props.match.params.id;
                // console.log('project', this.props.curProject)
                groupId = _this.props.curProject.group_id;
                _context6.next = 3;
                return _this.props.fetchProjectList(groupId);

              case 3:
                // await this.props.fetchInterfaceListMenu(projectId)
                _this.setState({ importInterVisible: true, importColId: colId });

              case 4:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, _this2);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }();

    _this.handleImportOk = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
      var project_id, _this$state2, importColId, importInterIds, res;

      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              project_id = _this.state.selectedProject || _this.props.match.params.id;
              _this$state2 = _this.state, importColId = _this$state2.importColId, importInterIds = _this$state2.importInterIds;
              _context7.next = 4;
              return _axios2.default.post('/api/col/add_case_list', {
                interface_list: importInterIds,
                col_id: importColId,
                project_id: project_id
              });

            case 4:
              res = _context7.sent;

              if (!res.data.errcode) {
                _this.setState({ importInterVisible: false });
                _message3.default.success('导入集合成功');
                // await this.props.fetchInterfaceColList(project_id);
                _this.getList();

                _this.props.setColData({ isRander: true });
              } else {
                _message3.default.error(res.data.errmsg);
              }

            case 6:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, _this2);
    }));

    _this.handleImportCancel = function () {
      _this.setState({ importInterVisible: false });
    };

    _this.filterCol = function (e) {
      var value = e.target.value;
      // console.log('list', this.props.interfaceColList);
      // const newList = produce(this.props.interfaceColList, draftList => {})
      // console.log('newList',newList);
      _this.setState({
        filterValue: value,
        list: JSON.parse((0, _stringify2.default)(_this.props.interfaceColList))
        // list: newList
      });
    };

    _this.onDrop = function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(e) {
        var interfaceColList, dropColIndex, dropColId, id, dragColIndex, dragColId, dropPos, dropIndex, dragPos, dragIndex, caseList, changes, _changes;

        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // const projectId = this.props.match.params.id;
                interfaceColList = _this.props.interfaceColList;
                dropColIndex = e.node.props.pos.split('-')[1];
                dropColId = interfaceColList[dropColIndex]._id;
                id = e.dragNode.props.eventKey;
                dragColIndex = e.dragNode.props.pos.split('-')[1];
                dragColId = interfaceColList[dragColIndex]._id;
                dropPos = e.node.props.pos.split('-');
                dropIndex = Number(dropPos[dropPos.length - 1]);
                dragPos = e.dragNode.props.pos.split('-');
                dragIndex = Number(dragPos[dragPos.length - 1]);

                if (!(id.indexOf('col') === -1)) {
                  _context8.next = 18;
                  break;
                }

                if (dropColId === dragColId) {
                  // 同一个测试集合下的接口交换顺序
                  caseList = interfaceColList[dropColIndex].caseList;
                  changes = (0, _common.arrayChangeIndex)(caseList, dragIndex, dropIndex);

                  _axios2.default.post('/api/col/up_case_index', changes).then();
                }
                _context8.next = 14;
                return _axios2.default.post('/api/col/up_case', { id: id.split('_')[1], col_id: dropColId });

              case 14:
                // this.props.fetchInterfaceColList(projectId);
                _this.getList();
                _this.props.setColData({ isRander: true });
                _context8.next = 21;
                break;

              case 18:
                _changes = (0, _common.arrayChangeIndex)(interfaceColList, dragIndex, dropIndex);

                _axios2.default.post('/api/col/up_col_index', _changes).then();
                _this.getList();

              case 21:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, _this2);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }();

    _this.enterItem = function (id) {
      _this.setState({ delIcon: id });
    };

    _this.leaveItem = function () {
      _this.setState({ delIcon: null });
    };

    return _this;
  }

  InterfaceColMenu.prototype.componentWillMount = function componentWillMount() {
    this.getList();
  };

  InterfaceColMenu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.interfaceColList !== nextProps.interfaceColList) {
      this.setState({
        list: nextProps.interfaceColList
      });
    }
  };

  InterfaceColMenu.prototype.getList = function () {
    var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
      var r;
      return _regenerator2.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.props.fetchInterfaceColList(this.props.match.params.id);

            case 2:
              r = _context9.sent;

              this.setState({
                list: r.payload.data.data
              });
              return _context9.abrupt('return', r);

            case 5:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getList() {
      return _ref7.apply(this, arguments);
    }

    return getList;
  }();

  // 复制测试集合


  InterfaceColMenu.prototype.render = function render() {
    var _this5 = this;

    // const { currColId, currCaseId, isShowCol } = this.props;
    var _state = this.state,
        colModalType = _state.colModalType,
        colModalVisible = _state.colModalVisible,
        importInterVisible = _state.importInterVisible;

    var currProjectId = this.props.match.params.id;
    // const menu = (col) => {
    //   return (
    //     <Menu>
    //       <Menu.Item>
    //         <span onClick={() => this.showColModal('edit', col)}>修改集合</span>
    //       </Menu.Item>
    //       <Menu.Item>
    //         <span onClick={() => {
    //           this.showDelColConfirm(col._id)
    //         }}>删除集合</span>
    //       </Menu.Item>
    //       <Menu.Item>
    //         <span onClick={() => this.showImportInterface(col._id)}>导入接口</span>
    //       </Menu.Item>
    //     </Menu>
    //   )
    // };

    var defaultExpandedKeys = function defaultExpandedKeys() {
      var _props = _this5.props,
          router = _props.router,
          currCase = _props.currCase,
          interfaceColList = _props.interfaceColList,
          rNull = { expands: [], selects: [] };

      if (interfaceColList.length === 0) {
        return rNull;
      }
      if (router) {
        if (router.params.action === 'case') {
          if (!currCase || !currCase._id) {
            return rNull;
          }
          return {
            expands: _this5.state.expands ? _this5.state.expands : ['col_' + currCase.col_id],
            selects: ['case_' + currCase._id + '']
          };
        } else {
          var col_id = router.params.actionId;
          return {
            expands: _this5.state.expands ? _this5.state.expands : ['col_' + col_id],
            selects: ['col_' + col_id]
          };
        }
      } else {
        return {
          expands: _this5.state.expands ? _this5.state.expands : ['col_' + interfaceColList[0]._id],
          selects: ['root']
        };
      }
    };

    var itemInterfaceColCreate = function itemInterfaceColCreate(interfaceCase) {
      return _react2.default.createElement(TreeNode, {
        style: { width: '100%' },
        key: 'case_' + interfaceCase._id,
        title: _react2.default.createElement(
          'div',
          {
            className: 'menu-title',
            onMouseEnter: function onMouseEnter() {
              return _this5.enterItem(interfaceCase._id);
            },
            onMouseLeave: _this5.leaveItem,
            title: interfaceCase.casename
          },
          _react2.default.createElement(
            'span',
            { className: 'casename' },
            interfaceCase.casename
          ),
          _react2.default.createElement(
            'div',
            { className: 'btns' },
            _react2.default.createElement(
              _tooltip2.default,
              { title: '\u5220\u9664\u7528\u4F8B' },
              _react2.default.createElement(_icon2.default, {
                type: 'delete',
                className: 'interface-delete-icon',
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _this5.showDelCaseConfirm(interfaceCase._id);
                },
                style: { display: _this5.state.delIcon == interfaceCase._id ? 'block' : 'none' }
              })
            ),
            _react2.default.createElement(
              _tooltip2.default,
              { title: '\u514B\u9686\u7528\u4F8B' },
              _react2.default.createElement(_icon2.default, {
                type: 'copy',
                className: 'interface-delete-icon',
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _this5.caseCopy(interfaceCase._id);
                },
                style: { display: _this5.state.delIcon == interfaceCase._id ? 'block' : 'none' }
              })
            )
          )
        )
      });
    };

    var currentKes = defaultExpandedKeys();
    // console.log('currentKey', currentKes)

    var list = this.state.list;

    if (this.state.filterValue) {
      var arr = [];
      list = list.filter(function (item) {

        item.caseList = item.caseList.filter(function (inter) {
          if (inter.casename.indexOf(_this5.state.filterValue) === -1 && inter.path.indexOf(_this5.state.filterValue) === -1) {
            return false;
          }
          return true;
        });

        arr.push('col_' + item._id);
        return true;
      });
      // console.log('arr', arr);
      if (arr.length > 0) {
        currentKes.expands = arr;
      }
    }

    // console.log('list', list);
    // console.log('currentKey', currentKes)

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        { className: 'interface-filter' },
        _react2.default.createElement(_input2.default, { placeholder: '\u641C\u7D22\u6D4B\u8BD5\u96C6\u5408', onChange: this.filterCol }),
        _react2.default.createElement(
          _tooltip2.default,
          { placement: 'bottom', title: '\u6DFB\u52A0\u96C6\u5408' },
          _react2.default.createElement(
            _button2.default,
            {
              type: 'primary',
              style: { marginLeft: '16px' },
              onClick: function onClick() {
                return _this5.showColModal('add');
              },
              className: 'btn-filter'
            },
            '\u6DFB\u52A0\u96C6\u5408'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'tree-wrapper', style: { maxHeight: parseInt(document.body.clientHeight) - headHeight + 'px' } },
        _react2.default.createElement(
          _tree2.default,
          {
            className: 'col-list-tree',
            defaultExpandedKeys: currentKes.expands,
            defaultSelectedKeys: currentKes.selects,
            expandedKeys: currentKes.expands,
            selectedKeys: currentKes.selects,
            onSelect: this.onSelect,
            autoExpandParent: true,
            draggable: true,
            onExpand: this.onExpand,
            onDrop: this.onDrop
          },
          list.map(function (col) {
            return _react2.default.createElement(
              TreeNode,
              {
                key: 'col_' + col._id,
                title: _react2.default.createElement(
                  'div',
                  { className: 'menu-title' },
                  _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement(_icon2.default, { type: 'folder-open', style: { marginRight: 5 } }),
                    _react2.default.createElement(
                      'span',
                      null,
                      col.name
                    )
                  ),
                  _react2.default.createElement(
                    'div',
                    { className: 'btns' },
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u5220\u9664\u96C6\u5408' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'delete',
                        style: { display: list.length > 1 ? '' : 'none' },
                        className: 'interface-delete-icon',
                        onClick: function onClick() {
                          _this5.showDelColConfirm(col._id);
                        }
                      })
                    ),
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u7F16\u8F91\u96C6\u5408' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'edit',
                        className: 'interface-delete-icon',
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.showColModal('edit', col);
                        }
                      })
                    ),
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u5BFC\u5165\u63A5\u53E3' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'plus',
                        className: 'interface-delete-icon',
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.showImportInterfaceModal(col._id);
                        }
                      })
                    ),
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u514B\u9686\u96C6\u5408' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'copy',
                        className: 'interface-delete-icon',
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.copyInterface(col);
                        }
                      })
                    )
                  )
                )
              },
              col.caseList.map(itemInterfaceColCreate)
            );
          })
        )
      ),
      _react2.default.createElement(ColModalForm, {
        ref: this.saveFormRef,
        type: colModalType,
        visible: colModalVisible,
        onCancel: function onCancel() {
          _this5.setState({ colModalVisible: false });
        },
        onCreate: this.addorEditCol
      }),
      _react2.default.createElement(
        _modal2.default,
        {
          title: '\u5BFC\u5165\u63A5\u53E3\u5230\u96C6\u5408',
          visible: importInterVisible,
          onOk: this.handleImportOk,
          onCancel: this.handleImportCancel,
          className: 'import-case-modal',
          width: 800
        },
        _react2.default.createElement(_ImportInterface2.default, { currProjectId: currProjectId, selectInterface: this.selectInterface })
      )
    );
  };

  return InterfaceColMenu;
}(_react.PureComponent), _class2.propTypes = {
  match: _propTypes2.default.object,
  interfaceColList: _propTypes2.default.array,
  fetchInterfaceColList: _propTypes2.default.func,
  fetchInterfaceCaseList: _propTypes2.default.func,
  // fetchInterfaceListMenu: PropTypes.func,
  fetchCaseList: _propTypes2.default.func,
  fetchCaseData: _propTypes2.default.func,
  setColData: _propTypes2.default.func,
  currCaseId: _propTypes2.default.number,
  history: _propTypes2.default.object,
  isRander: _propTypes2.default.bool,
  // list: PropTypes.array,
  router: _propTypes2.default.object,
  currCase: _propTypes2.default.object,
  curProject: _propTypes2.default.object,
  fetchProjectList: _propTypes2.default.func
  // projectList: PropTypes.array
}, _temp)) || _class) || _class);
exports.default = InterfaceColMenu;