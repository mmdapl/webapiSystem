{"version":3,"sources":["common\\diff-view.js"],"names":["json5","require","module","exports","jsondiffpatch","formattersHtml","curDiffData","json5_parse","json","parse","err","diffText","left","right","delta","diff","result","format","diffJson","valueMaps","text","file","undone","done","handleParams","newItem","item","_id","undefined","forEach","key","diffArray","arr1","arr2","map","diffView","current","old","type","push","title","content","filter","path","method","catid","status","tag","req_params","req_query","req_headers","oldValue","req_body_type","req_body_form","req_body_other","oldResValue","res_body","res_body_type"],"mappings":"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","file":"diff-view.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["// const json5_parse = require('../client/common.js').json5_parse;\n\nconst json5 = require('json5');\n\nmodule.exports = function(jsondiffpatch, formattersHtml, curDiffData) {\n  const json5_parse = json => {\n    if (typeof json === 'object' && json) return json;\n    try {\n      return json5.parse(json);\n    } catch (err) {\n      return json;\n    }\n  };\n\n  const diffText = (left, right) => {\n    left = left || '';\n    right = right || '';\n    if (left == right) {\n      return null;\n    }\n\n    var delta = jsondiffpatch.diff(left, right);\n\n    let result = formattersHtml.format(delta, left);\n\n    return result;\n  };\n\n  const diffJson = (left, right) => {\n    left = json5_parse(left);\n    right = json5_parse(right);\n    let delta = jsondiffpatch.diff(left, right);\n    return formattersHtml.format(delta, left);\n    // return '';\n  };\n\n  const valueMaps = {\n    '1': '必需',\n    '0': '非必需',\n    text: '文本',\n    file: '文件',\n    undone: '未完成',\n    done: '已完成'\n  };\n\n  const handleParams = item => {\n    let newItem = Object.assign({}, item);\n    newItem._id = undefined;\n\n    Object.keys(newItem).forEach(key => {\n      switch (key) {\n        case 'required':\n          newItem[key] = valueMaps[newItem[key]];\n          break;\n        case 'type':\n          newItem[key] = valueMaps[newItem[key]];\n          break;\n      }\n    });\n    return newItem;\n  };\n\n  const diffArray = (arr1, arr2) => {\n    arr1 = arr1 || [];\n    arr2 = arr2 || [];\n    arr1 = arr1.map(handleParams);\n    arr2 = arr2.map(handleParams);\n    return diffJson(arr1, arr2);\n  };\n\n  let diffView = [];\n\n  if (curDiffData && typeof curDiffData === 'object' && curDiffData.current) {\n    const { current, old, type } = curDiffData;\n    // wiki 信息的diff 输出\n    if (type === 'wiki') {\n      if (current != old) {\n        diffView.push({\n          title: 'wiki更新',\n          content: diffText(old, current)\n        });\n      }\n      return (diffView = diffView.filter(item => item.content));\n    }\n    if (current.path != old.path) {\n      diffView.push({\n        title: 'Api 路径',\n        content: diffText(old.path, current.path)\n      });\n    }\n    if (current.title != old.title) {\n      diffView.push({\n        title: 'Api 名称',\n        content: diffText(old.title, current.title)\n      });\n    }\n\n    if (current.method != old.method) {\n      diffView.push({\n        title: 'Method',\n        content: diffText(old.method, current.method)\n      });\n    }\n\n    if (current.catid != old.catid) {\n      diffView.push({\n        title: '分类 id',\n        content: diffText(old.catid, current.catid)\n      });\n    }\n\n    if (current.status != old.status) {\n      diffView.push({\n        title: '接口状态',\n        content: diffText(valueMaps[old.status], valueMaps[current.status])\n      });\n    }\n\n    if (current.tag !== old.tag) {\n      diffView.push({\n        title: '接口tag',\n        content: diffText(old.tag, current.tag)\n      });\n    }\n\n    diffView.push({\n      title: 'Request Path Params',\n      content: diffArray(old.req_params, current.req_params)\n    });\n\n    diffView.push({\n      title: 'Request Query',\n      content: diffArray(old.req_query, current.req_query)\n    });\n\n    diffView.push({\n      title: 'Request Header',\n      content: diffArray(old.req_headers, current.req_headers)\n    });\n\n    let oldValue = current.req_body_type === 'form' ? old.req_body_form : old.req_body_other;\n    if (current.req_body_type !== old.req_body_type) {\n      diffView.push({\n        title: 'Request Type',\n        content: diffText(old.req_body_type, current.req_body_type)\n      });\n      oldValue = null;\n    }\n\n    if (current.req_body_type === 'json') {\n      diffView.push({\n        title: 'Request Body',\n        content: diffJson(oldValue, current.req_body_other)\n      });\n    } else if (current.req_body_type === 'form') {\n      diffView.push({\n        title: 'Request Form Body',\n        content: diffArray(oldValue, current.req_body_form)\n      });\n    } else {\n      diffView.push({\n        title: 'Request Raw Body',\n        content: diffText(oldValue, current.req_body_other)\n      });\n    }\n\n    let oldResValue = old.res_body;\n    if (current.res_body_type !== old.res_body_type) {\n      diffView.push({\n        title: 'Response Type',\n        content: diffText(old.res_body_type, current.res_body_type)\n      });\n      oldResValue = '';\n    }\n\n    if (current.res_body_type === 'json') {\n      diffView.push({\n        title: 'Response Body',\n        content: diffJson(oldResValue, current.res_body)\n      });\n    } else {\n      diffView.push({\n        title: 'Response Body',\n        content: diffText(oldResValue, current.res_body)\n      });\n    }\n  }\n\n  return (diffView = diffView.filter(item => item.content));\n};\n"]}