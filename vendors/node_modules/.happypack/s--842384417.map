{"version":3,"sources":["client\\containers\\Project\\Interface\\InterfaceCol\\ImportInterface.js"],"names":["Option","ImportInterface","projectList","state","project","list","inter","fetchInterfaceListMenu","props","selectedRowKeys","categoryCount","currProjectId","onChange","val","setState","componentDidMount","render","data","map","key","item","_id","title","name","isCategory","children","e","categoryKey","categoryLength","length","self","rowSelection","onSelect","record","selected","oldSelecteds","concat","filter","indexOf","id","push","selectInterface","onSelectAll","forEach","columns","dataIndex","width","methodColor","variable","METHOD_COLOR","toLowerCase","color","backgroundColor","bac","borderRadius","text","filters","value","onFilter","arr","status","projectname","Component","propTypes","PropTypes","array","func","string"],"mappings":"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","file":"ImportInterface.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { PureComponent as Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Tooltip, Icon } from 'antd';\nimport variable from '../../../../constants/variable';\nimport { connect } from 'react-redux';\nconst Option = Select.Option;\nimport { fetchInterfaceListMenu } from '../../../../reducer/modules/interface.js';\n\n@connect(\n  state => {\n    return {\n      projectList: state.project.projectList,\n      list: state.inter.list\n    };\n  },\n  {\n    fetchInterfaceListMenu\n  }\n)\nexport default class ImportInterface extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    selectedRowKeys: [],\n    categoryCount: {},\n    project: this.props.currProjectId\n  };\n\n  static propTypes = {\n    list: PropTypes.array,\n    selectInterface: PropTypes.func,\n    projectList: PropTypes.array,\n    currProjectId: PropTypes.string,\n    fetchInterfaceListMenu: PropTypes.func\n  };\n\n  async componentDidMount() {\n    // console.log(this.props.currProjectId)\n    await this.props.fetchInterfaceListMenu(this.props.currProjectId);\n  }\n\n  // 切换项目\n  onChange = async val => {\n    this.setState({\n      project: val,\n      selectedRowKeys: [],\n      categoryCount: {}\n    });\n    await this.props.fetchInterfaceListMenu(val);\n  };\n\n  render() {\n    const { list, projectList } = this.props;\n\n    // const { selectedRowKeys } = this.state;\n    const data = list.map(item => {\n      return {\n        key: 'category_' + item._id,\n        title: item.name,\n        isCategory: true,\n        children: item.list\n          ? item.list.map(e => {\n              e.key = e._id;\n              e.categoryKey = 'category_' + item._id;\n              e.categoryLength = item.list.length;\n              return e;\n            })\n          : []\n      };\n    });\n    const self = this;\n    const rowSelection = {\n      // onChange: (selectedRowKeys) => {\n      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n      // if (selectedRows.isCategory) {\n      //   const selectedRowKeys = selectedRows.children.map(item => item._id)\n      //   this.setState({ selectedRowKeys })\n      // }\n      // this.props.onChange(selectedRowKeys.filter(id => ('' + id).indexOf('category') === -1));\n      // },\n      onSelect: (record, selected) => {\n        // console.log(record, selected, selectedRows);\n        const oldSelecteds = self.state.selectedRowKeys;\n        const categoryCount = self.state.categoryCount;\n        const categoryKey = record.categoryKey;\n        const categoryLength = record.categoryLength;\n        let selectedRowKeys = [];\n        if (record.isCategory) {\n          selectedRowKeys = record.children.map(item => item._id).concat(record.key);\n          if (selected) {\n            selectedRowKeys = selectedRowKeys\n              .filter(id => oldSelecteds.indexOf(id) === -1)\n              .concat(oldSelecteds);\n            categoryCount[categoryKey] = categoryLength;\n          } else {\n            selectedRowKeys = oldSelecteds.filter(id => selectedRowKeys.indexOf(id) === -1);\n            categoryCount[categoryKey] = 0;\n          }\n        } else {\n          if (selected) {\n            selectedRowKeys = oldSelecteds.concat(record._id);\n            if (categoryCount[categoryKey]) {\n              categoryCount[categoryKey] += 1;\n            } else {\n              categoryCount[categoryKey] = 1;\n            }\n            if (categoryCount[categoryKey] === record.categoryLength) {\n              selectedRowKeys.push(categoryKey);\n            }\n          } else {\n            selectedRowKeys = oldSelecteds.filter(id => id !== record._id);\n            if (categoryCount[categoryKey]) {\n              categoryCount[categoryKey] -= 1;\n            }\n            selectedRowKeys = selectedRowKeys.filter(id => id !== categoryKey);\n          }\n        }\n        self.setState({ selectedRowKeys, categoryCount });\n        self.props.selectInterface(\n          selectedRowKeys.filter(id => ('' + id).indexOf('category') === -1),\n          self.state.project\n        );\n      },\n      onSelectAll: selected => {\n        // console.log(selected, selectedRows, changeRows);\n        let selectedRowKeys = [];\n        let categoryCount = self.state.categoryCount;\n        if (selected) {\n          data.forEach(item => {\n            if (item.children) {\n              categoryCount['category_' + item._id] = item.children.length;\n              selectedRowKeys = selectedRowKeys.concat(item.children.map(item => item._id));\n            }\n          });\n          selectedRowKeys = selectedRowKeys.concat(data.map(item => item.key));\n        } else {\n          categoryCount = {};\n          selectedRowKeys = [];\n        }\n        self.setState({ selectedRowKeys, categoryCount });\n        self.props.selectInterface(\n          selectedRowKeys.filter(id => ('' + id).indexOf('category') === -1),\n          self.state.project\n        );\n      },\n      selectedRowKeys: self.state.selectedRowKeys\n    };\n\n    const columns = [\n      {\n        title: '接口名称',\n        dataIndex: 'title',\n        width: '30%'\n      },\n      {\n        title: '接口路径',\n        dataIndex: 'path',\n        width: '40%'\n      },\n      {\n        title: '请求方法',\n        dataIndex: 'method',\n        render: item => {\n          let methodColor = variable.METHOD_COLOR[item ? item.toLowerCase() : 'get'];\n          return (\n            <span\n              style={{\n                color: methodColor.color,\n                backgroundColor: methodColor.bac,\n                borderRadius: 4\n              }}\n              className=\"colValue\"\n            >\n              {item}\n            </span>\n          );\n        }\n      },\n      {\n        title: (\n          <span>\n            状态{' '}\n            <Tooltip title=\"筛选满足条件的接口集合\">\n              <Icon type=\"question-circle-o\" />\n            </Tooltip>\n          </span>\n        ),\n        dataIndex: 'status',\n        render: text => {\n          return (\n            text &&\n            (text === 'done' ? (\n              <span className=\"tag-status done\">已完成</span>\n            ) : (\n              <span className=\"tag-status undone\">未完成</span>\n            ))\n          );\n        },\n        filters: [\n          {\n            text: '已完成',\n            value: 'done'\n          },\n          {\n            text: '未完成',\n            value: 'undone'\n          }\n        ],\n        onFilter: (value, record) => {\n          let arr = record.children.filter(item => {\n            return item.status.indexOf(value) === 0;\n          });\n          return arr.length > 0;\n          // record.status.indexOf(value) === 0\n        }\n      }\n    ];\n\n    return (\n      <div>\n        <div className=\"select-project\">\n          <span>选择要导入的项目： </span>\n          <Select value={this.state.project} style={{ width: 200 }} onChange={this.onChange}>\n            {projectList.map(item => {\n              return item.projectname ? (\n                ''\n              ) : (\n                <Option value={`${item._id}`} key={item._id}>\n                  {item.name}\n                </Option>\n              );\n            })}\n          </Select>\n        </div>\n        <Table columns={columns} rowSelection={rowSelection} dataSource={data} pagination={false} />\n      </div>\n    );\n  }\n}\n"]}