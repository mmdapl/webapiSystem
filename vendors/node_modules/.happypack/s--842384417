'use strict';

exports.__esModule = true;
exports.default = undefined;

var _table = require('antd/lib/table');

var _table2 = _interopRequireDefault(_table);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _variable = require('../../../../constants/variable');

var _variable2 = _interopRequireDefault(_variable);

var _reactRedux = require('react-redux');

var _interface = require('../../../../reducer/modules/interface.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Option = _select2.default.Option;
var ImportInterface = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    projectList: state.project.projectList,
    list: state.inter.list
  };
}, {
  fetchInterfaceListMenu: _interface.fetchInterfaceListMenu
}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(ImportInterface, _Component);

  function ImportInterface(props) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, ImportInterface);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.state = {
      selectedRowKeys: [],
      categoryCount: {},
      project: _this.props.currProjectId
    };

    _this.onChange = function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(val) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this.setState({
                  project: val,
                  selectedRowKeys: [],
                  categoryCount: {}
                });
                _context.next = 3;
                return _this.props.fetchInterfaceListMenu(val);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    return _this;
  }

  ImportInterface.prototype.componentDidMount = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.props.fetchInterfaceListMenu(this.props.currProjectId);

            case 2:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function componentDidMount() {
      return _ref2.apply(this, arguments);
    }

    return componentDidMount;
  }();

  // 切换项目


  ImportInterface.prototype.render = function render() {
    var _props = this.props,
        list = _props.list,
        projectList = _props.projectList;

    // const { selectedRowKeys } = this.state;

    var data = list.map(function (item) {
      return {
        key: 'category_' + item._id,
        title: item.name,
        isCategory: true,
        children: item.list ? item.list.map(function (e) {
          e.key = e._id;
          e.categoryKey = 'category_' + item._id;
          e.categoryLength = item.list.length;
          return e;
        }) : []
      };
    });
    var self = this;
    var rowSelection = {
      // onChange: (selectedRowKeys) => {
      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);
      // if (selectedRows.isCategory) {
      //   const selectedRowKeys = selectedRows.children.map(item => item._id)
      //   this.setState({ selectedRowKeys })
      // }
      // this.props.onChange(selectedRowKeys.filter(id => ('' + id).indexOf('category') === -1));
      // },
      onSelect: function onSelect(record, selected) {
        // console.log(record, selected, selectedRows);
        var oldSelecteds = self.state.selectedRowKeys;
        var categoryCount = self.state.categoryCount;
        var categoryKey = record.categoryKey;
        var categoryLength = record.categoryLength;
        var selectedRowKeys = [];
        if (record.isCategory) {
          selectedRowKeys = record.children.map(function (item) {
            return item._id;
          }).concat(record.key);
          if (selected) {
            selectedRowKeys = selectedRowKeys.filter(function (id) {
              return oldSelecteds.indexOf(id) === -1;
            }).concat(oldSelecteds);
            categoryCount[categoryKey] = categoryLength;
          } else {
            selectedRowKeys = oldSelecteds.filter(function (id) {
              return selectedRowKeys.indexOf(id) === -1;
            });
            categoryCount[categoryKey] = 0;
          }
        } else {
          if (selected) {
            selectedRowKeys = oldSelecteds.concat(record._id);
            if (categoryCount[categoryKey]) {
              categoryCount[categoryKey] += 1;
            } else {
              categoryCount[categoryKey] = 1;
            }
            if (categoryCount[categoryKey] === record.categoryLength) {
              selectedRowKeys.push(categoryKey);
            }
          } else {
            selectedRowKeys = oldSelecteds.filter(function (id) {
              return id !== record._id;
            });
            if (categoryCount[categoryKey]) {
              categoryCount[categoryKey] -= 1;
            }
            selectedRowKeys = selectedRowKeys.filter(function (id) {
              return id !== categoryKey;
            });
          }
        }
        self.setState({ selectedRowKeys: selectedRowKeys, categoryCount: categoryCount });
        self.props.selectInterface(selectedRowKeys.filter(function (id) {
          return ('' + id).indexOf('category') === -1;
        }), self.state.project);
      },
      onSelectAll: function onSelectAll(selected) {
        // console.log(selected, selectedRows, changeRows);
        var selectedRowKeys = [];
        var categoryCount = self.state.categoryCount;
        if (selected) {
          data.forEach(function (item) {
            if (item.children) {
              categoryCount['category_' + item._id] = item.children.length;
              selectedRowKeys = selectedRowKeys.concat(item.children.map(function (item) {
                return item._id;
              }));
            }
          });
          selectedRowKeys = selectedRowKeys.concat(data.map(function (item) {
            return item.key;
          }));
        } else {
          categoryCount = {};
          selectedRowKeys = [];
        }
        self.setState({ selectedRowKeys: selectedRowKeys, categoryCount: categoryCount });
        self.props.selectInterface(selectedRowKeys.filter(function (id) {
          return ('' + id).indexOf('category') === -1;
        }), self.state.project);
      },
      selectedRowKeys: self.state.selectedRowKeys
    };

    var columns = [{
      title: '接口名称',
      dataIndex: 'title',
      width: '30%'
    }, {
      title: '接口路径',
      dataIndex: 'path',
      width: '40%'
    }, {
      title: '请求方法',
      dataIndex: 'method',
      render: function render(item) {
        var methodColor = _variable2.default.METHOD_COLOR[item ? item.toLowerCase() : 'get'];
        return _react2.default.createElement(
          'span',
          {
            style: {
              color: methodColor.color,
              backgroundColor: methodColor.bac,
              borderRadius: 4
            },
            className: 'colValue'
          },
          item
        );
      }
    }, {
      title: _react2.default.createElement(
        'span',
        null,
        '\u72B6\u6001',
        ' ',
        _react2.default.createElement(
          _tooltip2.default,
          { title: '\u7B5B\u9009\u6EE1\u8DB3\u6761\u4EF6\u7684\u63A5\u53E3\u96C6\u5408' },
          _react2.default.createElement(_icon2.default, { type: 'question-circle-o' })
        )
      ),
      dataIndex: 'status',
      render: function render(text) {
        return text && (text === 'done' ? _react2.default.createElement(
          'span',
          { className: 'tag-status done' },
          '\u5DF2\u5B8C\u6210'
        ) : _react2.default.createElement(
          'span',
          { className: 'tag-status undone' },
          '\u672A\u5B8C\u6210'
        ));
      },
      filters: [{
        text: '已完成',
        value: 'done'
      }, {
        text: '未完成',
        value: 'undone'
      }],
      onFilter: function onFilter(value, record) {
        var arr = record.children.filter(function (item) {
          return item.status.indexOf(value) === 0;
        });
        return arr.length > 0;
        // record.status.indexOf(value) === 0
      }
    }];

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        { className: 'select-project' },
        _react2.default.createElement(
          'span',
          null,
          '\u9009\u62E9\u8981\u5BFC\u5165\u7684\u9879\u76EE\uFF1A '
        ),
        _react2.default.createElement(
          _select2.default,
          { value: this.state.project, style: { width: 200 }, onChange: this.onChange },
          projectList.map(function (item) {
            return item.projectname ? '' : _react2.default.createElement(
              Option,
              { value: '' + item._id, key: item._id },
              item.name
            );
          })
        )
      ),
      _react2.default.createElement(_table2.default, { columns: columns, rowSelection: rowSelection, dataSource: data, pagination: false })
    );
  };

  return ImportInterface;
}(_react.PureComponent), _class2.propTypes = {
  list: _propTypes2.default.array,
  selectInterface: _propTypes2.default.func,
  projectList: _propTypes2.default.array,
  currProjectId: _propTypes2.default.string,
  fetchInterfaceListMenu: _propTypes2.default.func
}, _temp)) || _class);
exports.default = ImportInterface;