'use strict';

exports.__esModule = true;

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _upload = require('antd/lib/upload');

var _upload2 = _interopRequireDefault(_upload);

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _dec, _class, _class2, _temp, _dec2, _class3, _class4, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _common = require('../../common.js');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _user = require('../../reducer/modules/user');

var _reactRedux = require('react-redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditButton = function EditButton(props) {
  var isAdmin = props.isAdmin,
      isOwner = props.isOwner,
      _onClick = props.onClick,
      name = props.name,
      admin = props.admin;

  if (isOwner) {
    // 本人
    if (admin) {
      return null;
    }
    return _react2.default.createElement(
      _button2.default,
      {
        icon: 'edit',
        onClick: function onClick() {
          _onClick(name, true);
        }
      },
      '\u4FEE\u6539'
    );
  } else if (isAdmin) {
    // 管理员
    return _react2.default.createElement(
      _button2.default,
      {
        icon: 'edit',
        onClick: function onClick() {
          _onClick(name, true);
        }
      },
      '\u4FEE\u6539'
    );
  } else {
    return null;
  }
};
EditButton.propTypes = {
  isAdmin: _propTypes2.default.bool,
  isOwner: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  name: _propTypes2.default.string,
  admin: _propTypes2.default.bool
};

var Profile = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    curUid: state.user.uid,
    userType: state.user.type,
    curRole: state.user.role
  };
}, {
  setBreadcrumb: _user.setBreadcrumb
}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(Profile, _Component);

  function Profile(props) {
    (0, _classCallCheck3.default)(this, Profile);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this2.handleEdit = function (key, val) {
      var s = {};
      s[key] = val;
      _this2.setState(s);
    };

    _this2.getUserInfo = function (id) {
      var _this = _this2;
      var curUid = _this2.props.curUid;


      _axios2.default.get('/api/user/find?id=' + id).then(function (res) {
        _this.setState({
          userinfo: res.data.data,
          _userinfo: res.data.data
        });
        if (curUid === +id) {
          _this2.props.setBreadcrumb([{ name: res.data.data.username }]);
        } else {
          _this2.props.setBreadcrumb([{ name: '管理: ' + res.data.data.username }]);
        }
      });
    };

    _this2.updateUserinfo = function (name) {
      var state = _this2.state;
      var value = _this2.state._userinfo[name];
      var params = { uid: state.userinfo.uid };
      params[name] = value;

      _axios2.default.post('/api/user/update', params).then(function (res) {
        var data = res.data;
        if (data.errcode === 0) {
          var userinfo = _this2.state.userinfo;
          userinfo[name] = value;
          _this2.setState({
            userinfo: userinfo
          });

          _this2.handleEdit(name + 'Edit', false);
          _message3.default.success('更新用户信息成功');
        } else {
          _message3.default.error(data.errmsg);
        }
      }, function (err) {
        _message3.default.error(err.message);
      });
    };

    _this2.changeUserinfo = function (e) {
      var _extends2;

      var dom = e.target;
      var name = dom.getAttribute('name');
      var value = dom.value;

      _this2.setState({
        _userinfo: (0, _extends4.default)({}, _this2.state._userinfo, (_extends2 = {}, _extends2[name] = value, _extends2))
      });
    };

    _this2.changeRole = function (val) {
      var userinfo = _this2.state.userinfo;
      userinfo.role = val;
      _this2.setState({
        _userinfo: userinfo
      });
      _this2.updateUserinfo('role');
    };

    _this2.updatePassword = function () {
      var old_password = document.getElementById('old_password').value;
      var password = document.getElementById('password').value;
      var verify_pass = document.getElementById('verify_pass').value;
      if (password != verify_pass) {
        return _message3.default.error('两次输入的密码不一样');
      }
      var params = {
        uid: _this2.state.userinfo.uid,
        password: password,
        old_password: old_password
      };

      _axios2.default.post('/api/user/change_password', params).then(function (res) {
        var data = res.data;
        if (data.errcode === 0) {
          _this2.handleEdit('secureEdit', false);
          _message3.default.success('修改密码成功');
          if (_this2.props.curUid === _this2.state.userinfo.uid) {
            location.reload();
          }
        } else {
          _message3.default.error(data.errmsg);
        }
      }, function (err) {
        _message3.default.error(err.message);
      });
    };

    _this2.state = {
      usernameEdit: false,
      emailEdit: false,
      secureEdit: false,
      roleEdit: false,
      userinfo: {}
    };
    return _this2;
  }

  Profile.prototype.componentDidMount = function componentDidMount() {
    this._uid = this.props.match.params.uid;
    this.handleUserinfo(this.props);
  };

  Profile.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!nextProps.match.params.uid) {
      return;
    }
    if (this._uid !== nextProps.match.params.uid) {
      this.handleUserinfo(nextProps);
    }
  };

  Profile.prototype.handleUserinfo = function handleUserinfo(props) {
    var uid = props.match.params.uid;
    this.getUserInfo(uid);
  };

  Profile.prototype.render = function render() {
    var _this3 = this;

    var ButtonGroup = _button2.default.Group;
    var userNameEditHtml = void 0,
        emailEditHtml = void 0,
        secureEditHtml = void 0,
        roleEditHtml = void 0;
    var Option = _select2.default.Option;
    var userinfo = this.state.userinfo;
    var _userinfo = this.state._userinfo;
    var roles = { admin: '管理员', member: '会员' };
    var userType = '';
    if (this.props.userType === 'third') {
      userType = false;
    } else if (this.props.userType === 'site') {
      userType = true;
    } else {
      userType = false;
    }

    // 用户名信息修改
    if (this.state.usernameEdit === false) {
      userNameEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'span',
          { className: 'text' },
          userinfo.username
        ),
        '\xA0\xA0',
        userType && _react2.default.createElement(EditButton, {
          userType: userType,
          isOwner: userinfo.uid === this.props.curUid,
          isAdmin: this.props.curRole === 'admin',
          onClick: this.handleEdit,
          name: 'usernameEdit'
        })
      );
    } else {
      userNameEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_input2.default, {
          value: _userinfo.username,
          name: 'username',
          onChange: this.changeUserinfo,
          placeholder: '\u7528\u6237\u540D'
        }),
        _react2.default.createElement(
          ButtonGroup,
          { className: 'edit-buttons' },
          _react2.default.createElement(
            _button2.default,
            {
              className: 'edit-button',
              onClick: function onClick() {
                _this3.handleEdit('usernameEdit', false);
              }
            },
            '\u53D6\u6D88'
          ),
          _react2.default.createElement(
            _button2.default,
            {
              className: 'edit-button',
              onClick: function onClick() {
                _this3.updateUserinfo('username');
              },
              type: 'primary'
            },
            '\u786E\u5B9A'
          )
        )
      );
    }
    // 邮箱信息修改
    if (this.state.emailEdit === false) {
      emailEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'span',
          { className: 'text' },
          userinfo.email
        ),
        '\xA0\xA0',
        userType && _react2.default.createElement(EditButton, {
          admin: userinfo.role === 'admin',
          isOwner: userinfo.uid === this.props.curUid,
          isAdmin: this.props.curRole === 'admin',
          onClick: this.handleEdit,
          name: 'emailEdit'
        })
      );
    } else {
      emailEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_input2.default, {
          placeholder: 'Email',
          value: _userinfo.email,
          name: 'email',
          onChange: this.changeUserinfo
        }),
        _react2.default.createElement(
          ButtonGroup,
          { className: 'edit-buttons' },
          _react2.default.createElement(
            _button2.default,
            {
              className: 'edit-button',
              onClick: function onClick() {
                _this3.handleEdit('emailEdit', false);
              }
            },
            '\u53D6\u6D88'
          ),
          _react2.default.createElement(
            _button2.default,
            {
              className: 'edit-button',
              type: 'primary',
              onClick: function onClick() {
                _this3.updateUserinfo('email');
              }
            },
            '\u786E\u5B9A'
          )
        )
      );
    }

    if (this.state.roleEdit === false) {
      roleEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'span',
          { className: 'text' },
          roles[userinfo.role]
        ),
        '\xA0\xA0'
      );
    } else {
      roleEditHtml = _react2.default.createElement(
        _select2.default,
        { defaultValue: _userinfo.role, onChange: this.changeRole, style: { width: 150 } },
        _react2.default.createElement(
          Option,
          { value: 'admin' },
          '\u7BA1\u7406\u5458'
        ),
        _react2.default.createElement(
          Option,
          { value: 'member' },
          '\u4F1A\u5458'
        )
      );
    }

    if (this.state.secureEdit === false) {
      var btn = '';
      if (userType) {
        btn = _react2.default.createElement(
          _button2.default,
          {
            icon: 'edit',
            onClick: function onClick() {
              _this3.handleEdit('secureEdit', true);
            }
          },
          '\u4FEE\u6539'
        );
      }
      secureEditHtml = btn;
    } else {
      secureEditHtml = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_input2.default, {
          style: {
            display: this.props.curRole === 'admin' && userinfo.role != 'admin' ? 'none' : ''
          },
          placeholder: '\u65E7\u7684\u5BC6\u7801',
          type: 'password',
          name: 'old_password',
          id: 'old_password'
        }),
        _react2.default.createElement(_input2.default, { placeholder: '\u65B0\u7684\u5BC6\u7801', type: 'password', name: 'password', id: 'password' }),
        _react2.default.createElement(_input2.default, { placeholder: '\u786E\u8BA4\u5BC6\u7801', type: 'password', name: 'verify_pass', id: 'verify_pass' }),
        _react2.default.createElement(
          ButtonGroup,
          { className: 'edit-buttons' },
          _react2.default.createElement(
            _button2.default,
            {
              className: 'edit-button',
              onClick: function onClick() {
                _this3.handleEdit('secureEdit', false);
              }
            },
            '\u53D6\u6D88'
          ),
          _react2.default.createElement(
            _button2.default,
            { className: 'edit-button', onClick: this.updatePassword, type: 'primary' },
            '\u786E\u5B9A'
          )
        )
      );
    }
    return _react2.default.createElement(
      'div',
      { className: 'user-profile' },
      _react2.default.createElement(
        'div',
        { className: 'user-item-body' },
        userinfo.uid === this.props.curUid ? _react2.default.createElement(
          'h3',
          null,
          '\u4E2A\u4EBA\u8BBE\u7F6E'
        ) : _react2.default.createElement(
          'h3',
          null,
          userinfo.username,
          ' \u8D44\u6599\u8BBE\u7F6E'
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'avatarCon', type: 'flex', justify: 'start' },
          _react2.default.createElement(
            _col2.default,
            { span: 24 },
            userinfo.uid === this.props.curUid ? _react2.default.createElement(
              AvatarUpload,
              { uid: userinfo.uid },
              '\u70B9\u51FB\u4E0A\u4F20\u5934\u50CF'
            ) : _react2.default.createElement(
              'div',
              { className: 'avatarImg' },
              _react2.default.createElement('img', { src: '/api/user/avatar?uid=' + userinfo.uid })
            )
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u7528\u6237id'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            userinfo.uid
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u7528\u6237\u540D'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            userNameEditHtml
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            'Email'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            emailEditHtml
          )
        ),
        _react2.default.createElement(
          _row2.default,
          {
            className: 'user-item',
            style: { display: this.props.curRole === 'admin' ? '' : 'none' },
            type: 'flex',
            justify: 'start'
          },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u89D2\u8272'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            roleEditHtml
          )
        ),
        _react2.default.createElement(
          _row2.default,
          {
            className: 'user-item',
            style: { display: this.props.curRole === 'admin' ? '' : 'none' },
            type: 'flex',
            justify: 'start'
          },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u767B\u9646\u65B9\u5F0F'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            userinfo.type === 'site' ? '站点登陆' : '第三方登陆'
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u521B\u5EFA\u8D26\u53F7\u65F6\u95F4'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            (0, _common.formatTime)(userinfo.add_time)
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u66F4\u65B0\u8D26\u53F7\u65F6\u95F4'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            (0, _common.formatTime)(userinfo.up_time)
          )
        ),
        userType ? _react2.default.createElement(
          _row2.default,
          { className: 'user-item', type: 'flex', justify: 'start' },
          _react2.default.createElement('div', { className: 'maoboli' }),
          _react2.default.createElement(
            _col2.default,
            { span: 4 },
            '\u5BC6\u7801'
          ),
          _react2.default.createElement(
            _col2.default,
            { span: 12 },
            secureEditHtml
          )
        ) : ''
      )
    );
  };

  return Profile;
}(_react.PureComponent), _class2.propTypes = {
  match: _propTypes2.default.object,
  curUid: _propTypes2.default.number,
  userType: _propTypes2.default.string,
  setBreadcrumb: _propTypes2.default.func,
  curRole: _propTypes2.default.string,
  upload: _propTypes2.default.bool
}, _temp)) || _class);
var AvatarUpload = (_dec2 = (0, _reactRedux.connect)(function (state) {
  return {
    url: state.user.imageUrl
  };
}, {
  setImageUrl: _user.setImageUrl
}), _dec2(_class3 = (_temp2 = _class4 = function (_Component2) {
  (0, _inherits3.default)(AvatarUpload, _Component2);

  function AvatarUpload(props) {
    (0, _classCallCheck3.default)(this, AvatarUpload);
    return (0, _possibleConstructorReturn3.default)(this, _Component2.call(this, props));
  }

  AvatarUpload.prototype.uploadAvatar = function uploadAvatar(basecode) {
    var _this5 = this;

    _axios2.default.post('/api/user/upload_avatar', { basecode: basecode }).then(function () {
      // this.setState({ imageUrl: basecode });
      _this5.props.setImageUrl(basecode);
    }).catch(function (e) {
      console.log(e);
    });
  };

  AvatarUpload.prototype.handleChange = function handleChange(info) {
    var _this6 = this;

    if (info.file.status === 'done') {
      // Get this url from response in real world.
      getBase64(info.file.originFileObj, function (basecode) {
        _this6.uploadAvatar(basecode);
      });
    }
  };

  AvatarUpload.prototype.render = function render() {
    var url = this.props.url;

    var imageUrl = url ? url : '/api/user/avatar?uid=' + this.props.uid;
    // let imageUrl = this.state.imageUrl ? this.state.imageUrl : `/api/user/avatar?uid=${this.props.uid}`;
    // console.log(this.props.uid);
    return _react2.default.createElement(
      'div',
      { className: 'avatar-box' },
      _react2.default.createElement(
        _tooltip2.default,
        {
          placement: 'right',
          title: _react2.default.createElement(
            'div',
            null,
            '\u70B9\u51FB\u5934\u50CF\u66F4\u6362 (\u53EA\u652F\u6301jpg\u3001png\u683C\u5F0F\u4E14\u5927\u5C0F\u4E0D\u8D85\u8FC7200kb\u7684\u56FE\u7247)'
          )
        },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _upload2.default,
            {
              className: 'avatar-uploader',
              name: 'basecode',
              showUploadList: false,
              action: '/api/user/upload_avatar',
              beforeUpload: beforeUpload,
              onChange: this.handleChange.bind(this)
            },
            _react2.default.createElement(
              'div',
              { style: { width: 100, height: 100 } },
              _react2.default.createElement('img', { className: 'avatar', src: imageUrl })
            )
          )
        )
      ),
      _react2.default.createElement('span', { className: 'avatarChange' })
    );
  };

  return AvatarUpload;
}(_react.PureComponent), _class4.propTypes = {
  uid: _propTypes2.default.number,
  setImageUrl: _propTypes2.default.func,
  url: _propTypes2.default.any
}, _temp2)) || _class3);


function beforeUpload(file) {
  var isJPG = file.type === 'image/jpeg';
  var isPNG = file.type === 'image/png';
  if (!isJPG && !isPNG) {
    _message3.default.error('图片的格式只能为 jpg、png！');
  }
  var isLt2M = file.size / 1024 / 1024 < 0.2;
  if (!isLt2M) {
    _message3.default.error('图片必须小于 200kb!');
  }

  return (isPNG || isJPG) && isLt2M;
}

function getBase64(img, callback) {
  var reader = new FileReader();
  reader.addEventListener('load', function () {
    return callback(reader.result);
  });
  reader.readAsDataURL(img);
}

exports.default = Profile;