'use strict';

exports.__esModule = true;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _table = require('antd/lib/table');

var _table2 = _interopRequireDefault(_table);

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _popconfirm = require('antd/lib/popconfirm');

var _popconfirm2 = _interopRequireDefault(_popconfirm);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _dec, _class, _desc, _value, _class2, _class3, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _reactRouterDom = require('react-router-dom');

require('./MemberList.scss');

var _coreDecorators = require('core-decorators');

var _group = require('../../../reducer/modules/group.js');

var _ErrMsg = require('../../../components/ErrMsg/ErrMsg.js');

var _ErrMsg2 = _interopRequireDefault(_ErrMsg);

var _UsernameAutoComplete = require('../../../components/UsernameAutoComplete/UsernameAutoComplete.js');

var _UsernameAutoComplete2 = _interopRequireDefault(_UsernameAutoComplete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var Option = _select2.default.Option;

function arrayAddKey(arr) {
  return arr.map(function (item, index) {
    return (0, _extends3.default)({}, item, {
      key: index
    });
  });
}

var MemberList = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    currGroup: state.group.currGroup,
    uid: state.user.uid,
    role: state.group.role
  };
}, {
  fetchGroupMemberList: _group.fetchGroupMemberList,
  fetchGroupMsg: _group.fetchGroupMsg,
  addMember: _group.addMember,
  delMember: _group.delMember,
  changeMemberRole: _group.changeMemberRole
}), _dec(_class = (_class2 = (_temp = _class3 = function (_Component) {
  (0, _inherits3.default)(MemberList, _Component);

  function MemberList(props) {
    (0, _classCallCheck3.default)(this, MemberList);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.showAddMemberModal = function () {
      _this.setState({
        visible: true
      });
    };

    _this.reFetchList = function () {
      _this.props.fetchGroupMemberList(_this.props.currGroup._id).then(function (res) {
        _this.setState({
          userInfo: arrayAddKey(res.payload.data.data),
          visible: false
        });
      });
    };

    _this.handleOk = function () {
      _this.props.addMember({
        id: _this.props.currGroup._id,
        member_uids: _this.state.inputUids,
        role: _this.state.inputRole
      }).then(function (res) {
        if (!res.payload.data.errcode) {
          var _res$payload$data$dat = res.payload.data.data,
              add_members = _res$payload$data$dat.add_members,
              exist_members = _res$payload$data$dat.exist_members;

          var addLength = add_members.length;
          var existLength = exist_members.length;
          _this.setState({
            inputRole: 'dev',
            inputUids: []
          });
          _message3.default.success('\u6DFB\u52A0\u6210\u529F! \u5DF2\u6210\u529F\u6DFB\u52A0 ' + addLength + ' \u4EBA\uFF0C\u5176\u4E2D ' + existLength + ' \u4EBA\u5DF2\u5B58\u5728');
          _this.reFetchList(); // 添加成功后重新获取分组成员列表
        }
      });
    };

    _this.changeNewMemberRole = function (value) {
      _this.setState({
        inputRole: value
      });
    };

    _this.deleteConfirm = function (member_uid) {
      return function () {
        var id = _this.props.currGroup._id;
        _this.props.delMember({ id: id, member_uid: member_uid }).then(function (res) {
          if (!res.payload.data.errcode) {
            _message3.default.success(res.payload.data.errmsg);
            _this.reFetchList(); // 添加成功后重新获取分组成员列表
          }
        });
      };
    };

    _this.changeUserRole = function (e) {
      var id = _this.props.currGroup._id;
      var role = e.split('-')[0];
      var member_uid = e.split('-')[1];
      _this.props.changeMemberRole({ id: id, member_uid: member_uid, role: role }).then(function (res) {
        if (!res.payload.data.errcode) {
          _message3.default.success(res.payload.data.errmsg);
          _this.reFetchList(); // 添加成功后重新获取分组成员列表
        }
      });
    };

    _this.handleCancel = function () {
      _this.setState({
        visible: false
      });
    };

    _this.state = {
      userInfo: [],
      role: '',
      visible: false,
      dataSource: [],
      inputUids: [],
      inputRole: 'dev'
    };
    return _this;
  }

  // 重新获取列表


  // 增 - 添加成员

  // 添加成员时 选择新增成员权限

  // 删 - 删除分组成员

  // 改 - 修改成员权限


  // 关闭模态框

  MemberList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (this._groupId !== this._groupId) {
      return null;
    }
    if (this.props.currGroup._id !== nextProps.currGroup._id) {
      this.props.fetchGroupMemberList(nextProps.currGroup._id).then(function (res) {
        _this2.setState({
          userInfo: arrayAddKey(res.payload.data.data)
        });
      });
      this.props.fetchGroupMsg(nextProps.currGroup._id).then(function (res) {
        _this2.setState({
          role: res.payload.data.data.role
        });
      });
    }
  };

  MemberList.prototype.componentDidMount = function componentDidMount() {
    var _this3 = this;

    var currGroupId = this._groupId = this.props.currGroup._id;
    this.props.fetchGroupMsg(currGroupId).then(function (res) {
      _this3.setState({
        role: res.payload.data.data.role
      });
    });
    this.props.fetchGroupMemberList(currGroupId).then(function (res) {
      _this3.setState({
        userInfo: arrayAddKey(res.payload.data.data)
      });
    });
  };

  MemberList.prototype.onUserSelect = function onUserSelect(uids) {
    this.setState({
      inputUids: uids
    });
  };

  MemberList.prototype.render = function render() {
    var _this4 = this;

    var columns = [{
      title: this.props.currGroup.group_name + ' 分组成员 (' + this.state.userInfo.length + ') 人',
      dataIndex: 'username',
      key: 'username',
      render: function render(text, record) {
        return _react2.default.createElement(
          'div',
          { className: 'm-user' },
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/user/profile/' + record.uid },
            _react2.default.createElement('img', {
              src: location.protocol + '//' + location.host + '/api/user/avatar?uid=' + record.uid,
              className: 'm-user-img'
            })
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/user/profile/' + record.uid },
            _react2.default.createElement(
              'p',
              { className: 'm-user-name' },
              text
            )
          )
        );
      }
    }, {
      title: this.state.role === 'owner' || this.state.role === 'admin' ? _react2.default.createElement(
        'div',
        { className: 'btn-container' },
        _react2.default.createElement(
          _button2.default,
          { className: 'btn', type: 'primary', onClick: this.showAddMemberModal },
          '\u6DFB\u52A0\u6210\u5458'
        )
      ) : '',
      key: 'action',
      className: 'member-opration',
      render: function render(text, record) {
        if (_this4.state.role === 'owner' || _this4.state.role === 'admin') {
          return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              _select2.default,
              {
                value: record.role + '-' + record.uid,
                className: 'select',
                onChange: _this4.changeUserRole
              },
              _react2.default.createElement(
                Option,
                { value: 'owner-' + record.uid },
                '\u7EC4\u957F'
              ),
              _react2.default.createElement(
                Option,
                { value: 'dev-' + record.uid },
                '\u5F00\u53D1\u8005'
              ),
              _react2.default.createElement(
                Option,
                { value: 'guest-' + record.uid },
                '\u8BBF\u5BA2'
              )
            ),
            _react2.default.createElement(
              _popconfirm2.default,
              {
                placement: 'topRight',
                title: '\u4F60\u786E\u5B9A\u8981\u5220\u9664\u5417? ',
                onConfirm: _this4.deleteConfirm(record.uid),
                okText: '\u786E\u5B9A',
                cancelText: ''
              },
              _react2.default.createElement(_button2.default, { type: 'danger', icon: 'delete', className: 'btn-danger' })
            )
          );
        } else {
          // 非管理员可以看到权限 但无法修改
          if (record.role === 'owner') {
            return '组长';
          } else if (record.role === 'dev') {
            return '开发者';
          } else if (record.role === 'guest') {
            return '访客';
          } else {
            return '';
          }
        }
      }
    }];
    var userinfo = this.state.userInfo;
    var ownerinfo = [];
    var devinfo = [];
    var guestinfo = [];
    for (var i = 0; i < userinfo.length; i++) {
      if (userinfo[i].role === 'owner') {
        ownerinfo.push(userinfo[i]);
      }
      if (userinfo[i].role === 'dev') {
        devinfo.push(userinfo[i]);
      }
      if (userinfo[i].role === 'guest') {
        guestinfo.push(userinfo[i]);
      }
    }
    userinfo = [].concat(ownerinfo, devinfo, guestinfo);
    return _react2.default.createElement(
      'div',
      { className: 'm-panel' },
      this.state.visible ? _react2.default.createElement(
        _modal2.default,
        {
          title: '\u6DFB\u52A0\u6210\u5458',
          visible: this.state.visible,
          onOk: this.handleOk,
          onCancel: this.handleCancel
        },
        _react2.default.createElement(
          _row2.default,
          { gutter: 6, className: 'modal-input' },
          _react2.default.createElement(
            _col2.default,
            { span: '5' },
            _react2.default.createElement(
              'div',
              { className: 'label usernamelabel' },
              '\u7528\u6237\u540D: '
            )
          ),
          _react2.default.createElement(
            _col2.default,
            { span: '15' },
            _react2.default.createElement(_UsernameAutoComplete2.default, { callbackState: this.onUserSelect })
          )
        ),
        _react2.default.createElement(
          _row2.default,
          { gutter: 6, className: 'modal-input' },
          _react2.default.createElement(
            _col2.default,
            { span: '5' },
            _react2.default.createElement(
              'div',
              { className: 'label usernameauth' },
              '\u6743\u9650: '
            )
          ),
          _react2.default.createElement(
            _col2.default,
            { span: '15' },
            _react2.default.createElement(
              _select2.default,
              { defaultValue: 'dev', className: 'select', onChange: this.changeNewMemberRole },
              _react2.default.createElement(
                Option,
                { value: 'owner' },
                '\u7EC4\u957F'
              ),
              _react2.default.createElement(
                Option,
                { value: 'dev' },
                '\u5F00\u53D1\u8005'
              ),
              _react2.default.createElement(
                Option,
                { value: 'guest' },
                '\u8BBF\u5BA2'
              )
            )
          )
        )
      ) : '',
      _react2.default.createElement(_table2.default, {
        columns: columns,
        dataSource: userinfo,
        pagination: false,
        locale: { emptyText: _react2.default.createElement(_ErrMsg2.default, { type: 'noMemberInGroup' }) }
      })
    );
  };

  return MemberList;
}(_react.PureComponent), _class3.propTypes = {
  currGroup: _propTypes2.default.object,
  uid: _propTypes2.default.number,
  fetchGroupMemberList: _propTypes2.default.func,
  fetchGroupMsg: _propTypes2.default.func,
  addMember: _propTypes2.default.func,
  delMember: _propTypes2.default.func,
  changeMemberRole: _propTypes2.default.func,
  role: _propTypes2.default.string
}, _temp), (_applyDecoratedDescriptor(_class2.prototype, 'onUserSelect', [_coreDecorators.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'onUserSelect'), _class2.prototype)), _class2)) || _class);
exports.default = MemberList;