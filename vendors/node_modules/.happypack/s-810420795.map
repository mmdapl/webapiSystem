{"version":3,"sources":["client\\components\\ModalPostman\\VariablesSelect.js"],"names":["TreeNode","CanSelectPathPrefix","deleteLastObject","str","split","slice","join","deleteLastArr","replace","VariablesSelect","currColId","state","interfaceCol","fetchVariableParamsList","records","expandedKeys","selectedKeys","handleSelect","setState","key","indexOf","substr","length","props","click","onExpand","keys","handleRecordsData","id","newRecords","i","_id","push","componentDidMount","clickValue","result","payload","data","sort","a","b","index","isArrayParams","lastIndexOf","componentWillReceiveProps","nextProps","render","pathSelctByTree","elementKeyPrefix","deepLevel","TreeComponents","map","item","casename","params","body","Array","isArray","isDisable","Component","propTypes","PropTypes","func","number","string"],"mappings":"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","file":"VariablesSelect.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tree } from 'antd';\nimport { connect } from 'react-redux';\nimport { fetchVariableParamsList } from '../../reducer/modules/interfaceCol.js';\n\nconst TreeNode = Tree.TreeNode;\nconst CanSelectPathPrefix = 'CanSelectPath-';\n\nfunction deleteLastObject(str) {\n  return str\n    .split('.')\n    .slice(0, -1)\n    .join('.');\n}\n\nfunction deleteLastArr(str) {\n  return str.replace(/\\[.*?\\]/g, '');\n}\n\n@connect(\n  state => {\n    return {\n      currColId: state.interfaceCol.currColId\n    };\n  },\n  {\n    fetchVariableParamsList\n  }\n)\nclass VariablesSelect extends Component {\n  static propTypes = {\n    click: PropTypes.func,\n    currColId: PropTypes.number,\n    fetchVariableParamsList: PropTypes.func,\n    clickValue: PropTypes.string,\n    id: PropTypes.number\n  };\n  state = {\n    records: [],\n    expandedKeys: [],\n    selectedKeys: []\n  };\n\n  handleRecordsData(id) {\n    let newRecords = [];\n    this.id = id;\n    for (let i = 0; i < this.records.length; i++) {\n      if (this.records[i]._id === id) {\n        break;\n      }\n      newRecords.push(this.records[i]);\n    }\n    this.setState({\n      records: newRecords\n    });\n  }\n\n  async componentDidMount() {\n    const { currColId, fetchVariableParamsList, clickValue } = this.props;\n    let result = await fetchVariableParamsList(currColId);\n    let records = result.payload.data.data;\n    this.records = records.sort((a, b) => {\n      return a.index - b.index;\n    });\n    this.handleRecordsData(this.props.id);\n\n    if (clickValue) {\n      let isArrayParams = clickValue.lastIndexOf(']') === clickValue.length - 1;\n      let key = isArrayParams ? deleteLastArr(clickValue) : deleteLastObject(clickValue);\n      this.setState({\n        expandedKeys: [key],\n        selectedKeys: [CanSelectPathPrefix + clickValue]\n      });\n      // this.props.click(clickValue);\n    }\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (this.records && nextProps.id && this.id !== nextProps.id) {\n      this.handleRecordsData(nextProps.id);\n    }\n  }\n\n  handleSelect = key => {\n    this.setState({\n      selectedKeys: [key]\n    });\n    if (key && key.indexOf(CanSelectPathPrefix) === 0) {\n      key = key.substr(CanSelectPathPrefix.length);\n      this.props.click(key);\n    } else {\n      this.setState({\n        expandedKeys: [key]\n      });\n    }\n  };\n\n  onExpand = keys => {\n    this.setState({ expandedKeys: keys });\n  };\n\n  render() {\n    const pathSelctByTree = (data, elementKeyPrefix = '$', deepLevel = 0) => {\n      let keys = Object.keys(data);\n      let TreeComponents = keys.map((key, index) => {\n        let item = data[key],\n          casename;\n        if (deepLevel === 0) {\n          elementKeyPrefix = '$';\n          elementKeyPrefix = elementKeyPrefix + '.' + item._id;\n          casename = item.casename;\n          item = {\n            params: item.params,\n            body: item.body\n          };\n        } else if (Array.isArray(data)) {\n          elementKeyPrefix =\n            index === 0\n              ? elementKeyPrefix + '[' + key + ']'\n              : deleteLastArr(elementKeyPrefix) + '[' + key + ']';\n        } else {\n          elementKeyPrefix =\n            index === 0\n              ? elementKeyPrefix + '.' + key\n              : deleteLastObject(elementKeyPrefix) + '.' + key;\n        }\n        if (item && typeof item === 'object') {\n          const isDisable = Array.isArray(item) && item.length === 0;\n          return (\n            <TreeNode key={elementKeyPrefix} disabled={isDisable} title={casename || key}>\n              {pathSelctByTree(item, elementKeyPrefix, deepLevel + 1)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={CanSelectPathPrefix + elementKeyPrefix} title={key} />;\n      });\n\n      return TreeComponents;\n    };\n\n    return (\n      <div className=\"modal-postman-form-variable\">\n        <Tree\n          expandedKeys={this.state.expandedKeys}\n          selectedKeys={this.state.selectedKeys}\n          onSelect={([key]) => this.handleSelect(key)}\n          onExpand={this.onExpand}\n        >\n          {pathSelctByTree(this.state.records)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nexport default VariablesSelect;\n"]}