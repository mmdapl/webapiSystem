{"version":3,"sources":["client\\components\\EasyDragSort\\EasyDragSort.js"],"names":["curDragIndex","isDom","obj","nodeType","nodeName","getAttribute","EasyDragSort","render","that","props","onlyChild","container","children","onChange","from","to","curValue","data","newValue","arrMove","map","item","index","React","isValidElement","cloneElement","draggable","ref","onDragStart","onMouseDown","e","el","target","tagName","parentNode","refs","dom","ReactDOM","findDOMNode","onDragEnter","onDragEnd","Component","propTypes","PropTypes","array","func","string","arr","fromIndex","toIndex","concat","splice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA;;;;;;;AAOA,IAAIA,eAAe,IAAnB;;AAEA,SAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,SACEA,OACA,QAAOA,GAAP,uDAAOA,GAAP,OAAe,QADf,IAEAA,IAAIC,QAAJ,KAAiB,CAFjB,IAGA,OAAOD,IAAIE,QAAX,KAAwB,QAHxB,IAIA,OAAOF,IAAIG,YAAX,KAA4B,UAL9B;AAOD;;IAEoBC,Y;;;;;;;;yBASnBC,M,qBAAS;AACP,QAAMC,OAAO,IAAb;AACA,QAAMC,QAAQ,KAAKA,KAAnB;AAFO,QAGCC,SAHD,GAGeD,KAHf,CAGCC,SAHD;;AAIP,QAAIC,YAAYF,MAAMG,QAAtB;AACA,QAAMC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC7B,UAAID,SAASC,EAAb,EAAiB;AACf;AACD;AACD,UAAIC,iBAAJ;;AAEAA,iBAAWP,MAAMQ,IAAN,EAAX;;AAEA,UAAIC,WAAWC,QAAQH,QAAR,EAAkBF,IAAlB,EAAwBC,EAAxB,CAAf;AACA,UAAI,OAAON,MAAMI,QAAb,KAA0B,UAA9B,EAA0C;AACxC,eAAOJ,MAAMI,QAAN,CAAeK,QAAf,EAAyBJ,IAAzB,EAA+BC,EAA/B,CAAP;AACD;AACF,KAZD;AAaA,WACE;AAAA;AAAA;AACGJ,gBAAUS,GAAV,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC9B,YAAIC,gBAAMC,cAAN,CAAqBH,IAArB,CAAJ,EAAgC;AAC9B,iBAAOE,gBAAME,YAAN,CAAmBJ,IAAnB,EAAyB;AAC9BK,uBAAWhB,YAAY,KAAZ,GAAoB,IADD;AAE9BiB,iBAAK,MAAML,KAFmB;AAG9B,wBAAY,MAAMA,KAHY;AAI9BM,yBAAa,uBAAW;AACtB5B,6BAAesB,KAAf;AACD,aAN6B;AAO9B;;;;AAIAO,uBAX8B,uBAWlBC,CAXkB,EAWf;AACb,kBAAI,CAACpB,SAAL,EAAgB;AACd;AACD;AACD,kBAAIqB,KAAKD,EAAEE,MAAX;AAAA,kBACEA,SAASF,EAAEE,MADb;AAEA,kBAAI,CAAC/B,MAAM8B,EAAN,CAAL,EAAgB;AACd;AACD;AACD,iBAAG;AACD,oBAAIA,MAAM9B,MAAM8B,EAAN,CAAN,IAAmBA,GAAG1B,YAAH,CAAgBK,SAAhB,CAAvB,EAAmD;AACjDsB,2BAASD,EAAT;AACD;AACD,oBAAIA,MAAMA,GAAGE,OAAH,IAAc,KAApB,IAA6BF,GAAG1B,YAAH,CAAgB,UAAhB,CAAjC,EAA8D;AAC5D;AACD;AACF,eAPD,QAOU0B,KAAKA,GAAGG,UAPlB;AAQA,kBAAI,CAACH,EAAL,EAAS;AACP;AACD;AACD,kBAAIJ,MAAMnB,KAAK2B,IAAL,CAAUJ,GAAG1B,YAAH,CAAgB,UAAhB,CAAV,CAAV;AACA,kBAAI+B,MAAMC,mBAASC,WAAT,CAAqBX,GAArB,CAAV;AACA,kBAAIS,GAAJ,EAAS;AACPA,oBAAIV,SAAJ,GAAgBM,OAAO3B,YAAP,CAAoBK,SAApB,IAAiC,IAAjC,GAAwC,KAAxD;AACD;AACF,aApC6B;;AAqC9B6B,yBAAa,uBAAW;AACtB1B,uBAASb,YAAT,EAAuBsB,KAAvB;AACAtB,6BAAesB,KAAf;AACD,aAxC6B;AAyC9BkB,uBAAW,qBAAW;AACpBxC,6BAAe,IAAf;AACA,kBAAI,OAAOS,MAAM+B,SAAb,KAA2B,UAA/B,EAA2C;AACzC/B,sBAAM+B,SAAN;AACD;AACF;AA9C6B,WAAzB,CAAP;AAgDD;AACD,eAAOnB,IAAP;AACD,OApDA;AADH,KADF;AAyDD,G;;;EApFuCE,gBAAMkB,S,UACvCC,S,GAAY;AACjB9B,YAAU+B,oBAAUC,KADH;AAEjB/B,YAAU8B,oBAAUE,IAFH;AAGjBL,aAAWG,oBAAUE,IAHJ;AAIjB5B,QAAM0B,oBAAUE,IAJC;AAKjBnC,aAAWiC,oBAAUG;AALJ,C;kBADAxC,Y;;;AAuFrB,SAASa,OAAT,CAAiB4B,GAAjB,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0C;AACxCF,QAAM,GAAGG,MAAH,CAAUH,GAAV,CAAN;AACA,MAAI1B,OAAO0B,IAAII,MAAJ,CAAWH,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAX;AACAD,MAAII,MAAJ,CAAWF,OAAX,EAAoB,CAApB,EAAuB5B,IAAvB;AACA,SAAO0B,GAAP;AACD","file":"EasyDragSort.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\n/**\n * @author suxiaoxin\n * @demo\n * <EasyDragSort data={()=>this.state.list} onChange={this.handleChange} >\n * {list}\n * </EasyDragSot>\n */\nlet curDragIndex = null;\n\nfunction isDom(obj) {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    obj.nodeType === 1 &&\n    typeof obj.nodeName === 'string' &&\n    typeof obj.getAttribute === 'function'\n  );\n}\n\nexport default class EasyDragSort extends React.Component {\n  static propTypes = {\n    children: PropTypes.array,\n    onChange: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    data: PropTypes.func,\n    onlyChild: PropTypes.string\n  };\n\n  render() {\n    const that = this;\n    const props = this.props;\n    const { onlyChild } = props;\n    let container = props.children;\n    const onChange = (from, to) => {\n      if (from === to) {\n        return;\n      }\n      let curValue;\n\n      curValue = props.data();\n\n      let newValue = arrMove(curValue, from, to);\n      if (typeof props.onChange === 'function') {\n        return props.onChange(newValue, from, to);\n      }\n    };\n    return (\n      <div>\n        {container.map((item, index) => {\n          if (React.isValidElement(item)) {\n            return React.cloneElement(item, {\n              draggable: onlyChild ? false : true,\n              ref: 'x' + index,\n              'data-ref': 'x' + index,\n              onDragStart: function() {\n                curDragIndex = index;\n              },\n              /**\n               * 控制 dom 是否可拖动\n               * @param {*} e\n               */\n              onMouseDown(e) {\n                if (!onlyChild) {\n                  return;\n                }\n                let el = e.target,\n                  target = e.target;\n                if (!isDom(el)) {\n                  return;\n                }\n                do {\n                  if (el && isDom(el) && el.getAttribute(onlyChild)) {\n                    target = el;\n                  }\n                  if (el && el.tagName == 'DIV' && el.getAttribute('data-ref')) {\n                    break;\n                  }\n                } while ((el = el.parentNode));\n                if (!el) {\n                  return;\n                }\n                let ref = that.refs[el.getAttribute('data-ref')];\n                let dom = ReactDOM.findDOMNode(ref);\n                if (dom) {\n                  dom.draggable = target.getAttribute(onlyChild) ? true : false;\n                }\n              },\n              onDragEnter: function() {\n                onChange(curDragIndex, index);\n                curDragIndex = index;\n              },\n              onDragEnd: function() {\n                curDragIndex = null;\n                if (typeof props.onDragEnd === 'function') {\n                  props.onDragEnd();\n                }\n              }\n            });\n          }\n          return item;\n        })}\n      </div>\n    );\n  }\n}\n\nfunction arrMove(arr, fromIndex, toIndex) {\n  arr = [].concat(arr);\n  let item = arr.splice(fromIndex, 1)[0];\n  arr.splice(toIndex, 0, item);\n  return arr;\n}\n"]}