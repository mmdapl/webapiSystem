'use strict';

exports.__esModule = true;

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _radio = require('antd/lib/radio');

var _radio2 = _interopRequireDefault(_radio);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _user = require('../../reducer/modules/user');

var _reactRouter = require('react-router');

require('./Login.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FormItem = _form2.default.Item;
var RadioGroup = _radio2.default.Group;

var formItemStyle = {
  marginBottom: '.16rem'
};

var changeHeight = {
  height: '.42rem'
};

var Login = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    loginData: state.user,
    isLDAP: state.user.isLDAP
  };
}, {
  loginActions: _user.loginActions,
  loginLdapActions: _user.loginLdapActions
}), _dec(_class = (0, _reactRouter.withRouter)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(Login, _Component);

  function Login(props) {
    (0, _classCallCheck3.default)(this, Login);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.handleSubmit = function (e) {
      e.preventDefault();
      var form = _this.props.form;
      form.validateFields(function (err, values) {
        if (!err) {
          if (_this.props.isLDAP && _this.state.loginType === 'ldap') {
            _this.props.loginLdapActions(values).then(function (res) {
              if (res.payload.data.errcode == 0) {
                _this.props.history.replace('/group');
                _message3.default.success('登录成功! ');
              }
            });
          } else {
            _this.props.loginActions(values).then(function (res) {
              if (res.payload.data.errcode == 0) {
                _this.props.history.replace('/group');
                _message3.default.success('登录成功! ');
              }
            });
          }
        }
      });
    };

    _this.handleFormLayoutChange = function (e) {
      _this.setState({ loginType: e.target.value });
    };

    _this.state = {
      loginType: 'ldap'
    };
    return _this;
  }

  Login.prototype.componentDidMount = function componentDidMount() {
    //Qsso.attach('qsso-login','/api/user/login_by_token')
    console.log('isLDAP', this.props.isLDAP);
  };

  Login.prototype.render = function render() {
    var getFieldDecorator = this.props.form.getFieldDecorator;
    var isLDAP = this.props.isLDAP;


    var emailRule = this.state.loginType === 'ldap' ? {} : {
      required: true,
      message: '请输入正确的email!',
      pattern: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{1,})+$/
    };
    return _react2.default.createElement(
      _form2.default,
      { onSubmit: this.handleSubmit },
      isLDAP && _react2.default.createElement(
        FormItem,
        null,
        _react2.default.createElement(
          RadioGroup,
          { defaultValue: 'ldap', onChange: this.handleFormLayoutChange },
          _react2.default.createElement(
            _radio2.default,
            { value: 'ldap' },
            'LDAP'
          ),
          _react2.default.createElement(
            _radio2.default,
            { value: 'normal' },
            '\u666E\u901A\u767B\u5F55'
          )
        )
      ),
      _react2.default.createElement(
        FormItem,
        { style: formItemStyle },
        getFieldDecorator('email', { rules: [emailRule] })(_react2.default.createElement(_input2.default, {
          style: changeHeight,
          prefix: _react2.default.createElement(_icon2.default, { type: 'user', style: { fontSize: 13 } }),
          placeholder: 'Email'
        }))
      ),
      _react2.default.createElement(
        FormItem,
        { style: formItemStyle },
        getFieldDecorator('password', {
          rules: [{ required: true, message: '请输入密码!' }]
        })(_react2.default.createElement(_input2.default, {
          style: changeHeight,
          prefix: _react2.default.createElement(_icon2.default, { type: 'lock', style: { fontSize: 13 } }),
          type: 'password',
          placeholder: 'Password'
        }))
      ),
      _react2.default.createElement(
        FormItem,
        { style: formItemStyle },
        _react2.default.createElement(
          _button2.default,
          {
            style: changeHeight,
            type: 'primary',
            htmlType: 'submit',
            className: 'login-form-button'
          },
          '\u767B\u5F55'
        )
      )
    );
  };

  return Login;
}(_react.PureComponent), _class2.propTypes = {
  form: _propTypes2.default.object,
  history: _propTypes2.default.object,
  loginActions: _propTypes2.default.func,
  loginLdapActions: _propTypes2.default.func,
  isLDAP: _propTypes2.default.bool
}, _temp)) || _class) || _class);

var LoginForm = _form2.default.create()(Login);
exports.default = LoginForm;