{"version":3,"sources":["client\\components\\Label\\Label.js"],"names":["Label","props","toggle","setState","inputShow","state","handleChange","inputValue","event","target","value","componentWillReceiveProps","nextProps","desc","render","onChange","Component","propTypes","PropTypes","func","string","cat_name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;IAEqBA,K;;;AACnB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,+DACjB,sBAAMA,KAAN,CADiB;;AAAA,UAYnBC,MAZmB,GAYV,YAAM;AACb,YAAKC,QAAL,CAAc,EAAEC,WAAW,CAAC,MAAKC,KAAL,CAAWD,SAAzB,EAAd;AACD,KAdkB;;AAAA,UAenBE,YAfmB,GAeJ,iBAAS;AACtB,YAAKH,QAAL,CAAc,EAAEI,YAAYC,MAAMC,MAAN,CAAaC,KAA3B,EAAd;AACD,KAjBkB;;AAEjB,UAAKL,KAAL,GAAa;AACXD,iBAAW,KADA;AAEXG,kBAAY;AAFD,KAAb;AAFiB;AAMlB;;kBAYDI,yB,sCAA0BC,S,EAAW;AACnC,QAAI,KAAKX,KAAL,CAAWY,IAAX,KAAoBD,UAAUC,IAAlC,EAAwC;AACtC,WAAKV,QAAL,CAAc;AACZC,mBAAW;AADC,OAAd;AAGD;AACF,G;;kBACDU,M,qBAAS;AAAA;;AACP,WACE;AAAA;AAAA;AACG,WAAKb,KAAL,CAAWY,IAAX,IACC;AAAA;AAAA,UAAK,WAAU,iBAAf;AACG,SAAC,KAAKR,KAAL,CAAWD,SAAZ,GACC;AAAA;AAAA;AACE;AAAA;AAAA;AACG,iBAAKH,KAAL,CAAWY,IADd;AAAA;AAEE;AAAA;AAAA,gBAAS,OAAM,0BAAf;AACE,8DAAM,SAAS,KAAKX,MAApB,EAA4B,WAAU,uBAAtC,EAA8D,MAAK,MAAnE;AADF;AAFF;AADF,SADD,GAUC;AAAA;AAAA,YAAK,WAAU,qBAAf;AACE,2DAAO,UAAU,KAAKI,YAAtB,EAAoC,cAAc,KAAKL,KAAL,CAAWY,IAA7D,EAAmE,MAAK,OAAxE,GADF;AAEE;AACE,uBAAU,uBADZ;AAEE,qBAAS,mBAAM;AACb,qBAAKZ,KAAL,CAAWc,QAAX,CAAoB,OAAKV,KAAL,CAAWE,UAA/B;AACA,qBAAKL,MAAL;AACD,aALH;AAME,kBAAK;AANP,YAFF;AAUE,0DAAM,WAAU,uBAAhB,EAAwC,SAAS,KAAKA,MAAtD,EAA8D,MAAK,OAAnE;AAVF;AAXJ;AAFJ,KADF;AA+BD,G;;;EA1DgCc,gB,UAQ1BC,S,GAAY;AACjBF,YAAUG,oBAAUC,IADH;AAEjBN,QAAMK,oBAAUE,MAFC;AAGjBC,YAAUH,oBAAUE;AAHH,C;kBARApB,K","file":"Label.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { Component } from 'react';\nimport { Icon, Input, Tooltip } from 'antd';\nimport PropTypes from 'prop-types';\nimport './Label.scss';\n\nexport default class Label extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputShow: false,\n      inputValue: ''\n    };\n  }\n  static propTypes = {\n    onChange: PropTypes.func,\n    desc: PropTypes.string,\n    cat_name: PropTypes.string\n  };\n  toggle = () => {\n    this.setState({ inputShow: !this.state.inputShow });\n  };\n  handleChange = event => {\n    this.setState({ inputValue: event.target.value });\n  };\n  componentWillReceiveProps(nextProps) {\n    if (this.props.desc === nextProps.desc) {\n      this.setState({\n        inputShow: false\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        {this.props.desc && (\n          <div className=\"component-label\">\n            {!this.state.inputShow ? (\n              <div>\n                <p>\n                  {this.props.desc} &nbsp;&nbsp;\n                  <Tooltip title=\"编辑简介\">\n                    <Icon onClick={this.toggle} className=\"interface-delete-icon\" type=\"edit\" />\n                  </Tooltip>\n                </p>\n              </div>\n            ) : (\n              <div className=\"label-input-wrapper\">\n                <Input onChange={this.handleChange} defaultValue={this.props.desc} size=\"small\" />\n                <Icon\n                  className=\"interface-delete-icon\"\n                  onClick={() => {\n                    this.props.onChange(this.state.inputValue);\n                    this.toggle();\n                  }}\n                  type=\"check\"\n                />\n                <Icon className=\"interface-delete-icon\" onClick={this.toggle} type=\"close\" />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}