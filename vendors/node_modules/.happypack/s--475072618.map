{"version":3,"sources":["exts\\yapi-plugin-advanced-mock\\AdvMock.js"],"names":["FormItem","Item","AdvMock","props","handleSubmit","e","preventDefault","projectId","match","params","id","interfaceId","actionId","project_id","interface_id","mock_script","state","enable","axios","post","then","res","data","errcode","success","error","errmsg","onChange","setState","v","handleTapChange","tab","target","value","componentWillMount","getAdvMockData","get","result","mockData","that","container","d","text","render","formItemLayout","labelCol","sm","span","wrapperCol","tailFormItemLayout","offset","isShowCase","padding","textAlign","marginBottom","display","constants","docHref","adv_mock_script","minHeight","Component","propTypes","form","PropTypes","object","module","exports","create"],"mappings":"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","file":"AdvMock.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { Component } from 'react';\n// import { connect } from 'react-redux'\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Form, Switch, Button, message, Icon, Tooltip, Radio } from 'antd';\nimport MockCol from './MockCol/MockCol.js';\nimport mockEditor from 'client/components/AceEditor/mockEditor';\nimport constants from '../../client/constants/variable.js';\nconst FormItem = Form.Item;\n\nclass AdvMock extends Component {\n  static propTypes = {\n    form: PropTypes.object,\n    match: PropTypes.object\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      enable: false,\n      mock_script: '',\n      tab: 'case'\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let projectId = this.props.match.params.id;\n    let interfaceId = this.props.match.params.actionId;\n    let params = {\n      project_id: projectId,\n      interface_id: interfaceId,\n      mock_script: this.state.mock_script,\n      enable: this.state.enable\n    };\n    axios.post('/api/plugin/advmock/save', params).then(res => {\n      if (res.data.errcode === 0) {\n        message.success('保存成功');\n      } else {\n        message.error(res.data.errmsg);\n      }\n    });\n  };\n\n  componentWillMount() {\n    this.getAdvMockData();\n  }\n\n  async getAdvMockData() {\n    let interfaceId = this.props.match.params.actionId;\n    let result = await axios.get('/api/plugin/advmock/get?interface_id=' + interfaceId);\n    if (result.data.errcode === 0) {\n      let mockData = result.data.data;\n      this.setState({\n        enable: mockData.enable,\n        mock_script: mockData.mock_script\n      });\n    }\n\n    let that = this;\n    mockEditor({\n      container: 'mock-script',\n      data: that.state.mock_script,\n      onChange: function(d) {\n        that.setState({\n          mock_script: d.text\n        });\n      }\n    });\n  }\n\n  onChange = v => {\n    this.setState({\n      enable: v\n    });\n  };\n\n  handleTapChange = e => {\n    this.setState({\n      tab: e.target.value\n    });\n  };\n\n  render() {\n    const formItemLayout = {\n      labelCol: {\n        sm: { span: 4 }\n      },\n      wrapperCol: {\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        sm: {\n          span: 16,\n          offset: 11\n        }\n      }\n    };\n    const { tab } = this.state;\n    const isShowCase = tab === 'case';\n    return (\n      <div style={{ padding: '20px 10px' }}>\n        <div style={{ textAlign: 'center', marginBottom: 20 }}>\n          <Radio.Group value={tab} size=\"large\" onChange={this.handleTapChange}>\n            <Radio.Button value=\"case\">期望</Radio.Button>\n            <Radio.Button value=\"script\">脚本</Radio.Button>\n          </Radio.Group>\n        </div>\n        <div style={{ display: isShowCase ? 'none' : '' }}>\n          <Form onSubmit={this.handleSubmit}>\n            <FormItem\n              label={\n                <span>\n                  是否开启&nbsp;<a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={constants.docHref.adv_mock_script}\n                  >\n                    <Tooltip title=\"点击查看文档\">\n                      <Icon type=\"question-circle-o\" />\n                    </Tooltip>\n                  </a>\n                </span>\n              }\n              {...formItemLayout}\n            >\n              <Switch\n                checked={this.state.enable}\n                onChange={this.onChange}\n                checkedChildren=\"开\"\n                unCheckedChildren=\"关\"\n              />\n            </FormItem>\n\n            <FormItem label=\"Mock脚本\" {...formItemLayout}>\n              <div id=\"mock-script\" style={{ minHeight: '500px' }} />\n            </FormItem>\n            <FormItem {...tailFormItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                保存\n              </Button>\n            </FormItem>\n          </Form>\n        </div>\n        <div style={{ display: isShowCase ? '' : 'none' }}>\n          <MockCol />\n        </div>\n      </div>\n    );\n  }\n}\n\nmodule.exports = Form.create()(withRouter(AdvMock));\n"]}