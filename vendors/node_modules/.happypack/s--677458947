'use strict';

exports.__esModule = true;

var _card = require('antd/lib/card');

var _card2 = _interopRequireDefault(_card);

var _badge = require('antd/lib/badge');

var _badge2 = _interopRequireDefault(_badge);

var _table = require('antd/lib/table');

var _table2 = _interopRequireDefault(_table);

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _popconfirm = require('antd/lib/popconfirm');

var _popconfirm2 = _interopRequireDefault(_popconfirm);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _switch = require('antd/lib/switch');

var _switch2 = _interopRequireDefault(_switch);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _group = require('../../../../reducer/modules/group');

var _reactRedux = require('react-redux');

var _ErrMsg = require('../../../../components/ErrMsg/ErrMsg.js');

var _ErrMsg2 = _interopRequireDefault(_ErrMsg);

var _group2 = require('../../../../reducer/modules/group.js');

var _project = require('../../../../reducer/modules/project.js');

var _UsernameAutoComplete = require('../../../../components/UsernameAutoComplete/UsernameAutoComplete.js');

var _UsernameAutoComplete2 = _interopRequireDefault(_UsernameAutoComplete);

require('../Setting.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Option = _select2.default.Option;

var arrayAddKey = function arrayAddKey(arr) {
  return arr.map(function (item, index) {
    return (0, _extends3.default)({}, item, {
      key: index
    });
  });
};

var ProjectMember = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    projectMsg: state.project.currProject,
    uid: state.user.uid,
    projectList: state.project.projectList
  };
}, {
  fetchGroupMemberList: _group2.fetchGroupMemberList,
  getProjectMemberList: _project.getProjectMemberList,
  addMember: _project.addMember,
  delMember: _project.delMember,
  fetchGroupMsg: _group.fetchGroupMsg,
  changeMemberRole: _project.changeMemberRole,
  getProject: _project.getProject,
  fetchProjectList: _project.fetchProjectList,
  changeMemberEmailNotice: _project.changeMemberEmailNotice
}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(ProjectMember, _Component);

  function ProjectMember(props) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, ProjectMember);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.showAddMemberModal = function () {
      _this.setState({
        visible: true
      });
    };

    _this.showImportMemberModal = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.props.fetchProjectList(_this.props.projectMsg.group_id);

            case 2:
              _this.setState({
                modalVisible: true
              });

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    }));

    _this.reFetchList = function () {
      _this.props.getProjectMemberList(_this.props.match.params.id).then(function (res) {
        _this.setState({
          projectMemberList: arrayAddKey(res.payload.data.data),
          visible: false,
          modalVisible: false
        });
      });
    };

    _this.handleOk = function () {
      _this.addMembers(_this.state.inputUids);
    };

    _this.addMembers = function (memberUids) {
      _this.props.addMember({
        id: _this.props.match.params.id,
        member_uids: memberUids,
        role: _this.state.inputRole
      }).then(function (res) {
        if (!res.payload.data.errcode) {
          var _res$payload$data$dat = res.payload.data.data,
              add_members = _res$payload$data$dat.add_members,
              exist_members = _res$payload$data$dat.exist_members;

          var addLength = add_members.length;
          var existLength = exist_members.length;
          _this.setState({
            inputRole: 'dev',
            inputUids: []
          });
          _message3.default.success('\u6DFB\u52A0\u6210\u529F! \u5DF2\u6210\u529F\u6DFB\u52A0 ' + addLength + ' \u4EBA\uFF0C\u5176\u4E2D ' + existLength + ' \u4EBA\u5DF2\u5B58\u5728');
          _this.reFetchList(); // 添加成功后重新获取分组成员列表
        }
      });
    };

    _this.changeNewMemberRole = function (value) {
      _this.setState({
        inputRole: value
      });
    };

    _this.deleteConfirm = function (member_uid) {
      return function () {
        var id = _this.props.match.params.id;
        _this.props.delMember({ id: id, member_uid: member_uid }).then(function (res) {
          if (!res.payload.data.errcode) {
            _message3.default.success(res.payload.data.errmsg);
            _this.reFetchList(); // 添加成功后重新获取分组成员列表
          }
        });
      };
    };

    _this.changeUserRole = function (e) {
      var id = _this.props.match.params.id;
      var role = e.split('-')[0];
      var member_uid = e.split('-')[1];
      _this.props.changeMemberRole({ id: id, member_uid: member_uid, role: role }).then(function (res) {
        if (!res.payload.data.errcode) {
          _message3.default.success(res.payload.data.errmsg);
          _this.reFetchList(); // 添加成功后重新获取分组成员列表
        }
      });
    };

    _this.changeEmailNotice = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(notice, member_uid) {
        var id;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                id = _this.props.match.params.id;
                _context2.next = 3;
                return _this.props.changeMemberEmailNotice({ id: id, member_uid: member_uid, notice: notice });

              case 3:
                _this.reFetchList(); // 添加成功后重新获取项目成员列表

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this2);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.handleCancel = function () {
      _this.setState({
        visible: false
      });
    };

    _this.handleModalCancel = function () {
      _this.setState({
        modalVisible: false
      });
    };

    _this.handleChange = function (key) {
      _this.setState({
        selectProjectId: key
      });
    };

    _this.handleModalOk = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
      var menberList, memberUidList;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.props.getProjectMemberList(_this.state.selectProjectId);

            case 2:
              menberList = _context3.sent;
              memberUidList = menberList.payload.data.data.map(function (item) {
                return item.uid;
              });

              _this.addMembers(memberUidList);

            case 5:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this2);
    }));

    _this.onUserSelect = function (uids) {
      _this.setState({
        inputUids: uids
      });
    };

    _this.state = {
      groupMemberList: [],
      projectMemberList: [],
      groupName: '',
      role: '',
      visible: false,
      dataSource: [],
      inputUids: [],
      inputRole: 'dev',
      modalVisible: false,
      selectProjectId: 0
    };
    return _this;
  }

  // 重新获取列表

  // 增 - 添加成员

  // 添加成员时 选择新增成员权限


  // 删 - 删除分组成员


  // 改 - 修改成员权限


  // 修改用户是否接收消息通知


  // 关闭模态框

  // 关闭批量导入模态框


  // 处理选择项目


  // 确定批量导入模态框


  ProjectMember.prototype.componentWillMount = function () {
    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
      var groupMemberList, groupMsg, projectMemberList;
      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.props.fetchGroupMemberList(this.props.projectMsg.group_id);

            case 2:
              groupMemberList = _context4.sent;
              _context4.next = 5;
              return this.props.fetchGroupMsg(this.props.projectMsg.group_id);

            case 5:
              groupMsg = _context4.sent;
              _context4.next = 8;
              return this.props.getProjectMemberList(this.props.match.params.id);

            case 8:
              projectMemberList = _context4.sent;

              this.setState({
                groupMemberList: groupMemberList.payload.data.data,
                groupName: groupMsg.payload.data.data.group_name,
                projectMemberList: arrayAddKey(projectMemberList.payload.data.data),
                role: this.props.projectMsg.role
              });

            case 10:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function componentWillMount() {
      return _ref4.apply(this, arguments);
    }

    return componentWillMount;
  }();

  ProjectMember.prototype.render = function render() {
    var _this3 = this;

    var isEmailChangeEable = this.state.role === 'owner' || this.state.role === 'admin';
    var columns = [{
      title: this.props.projectMsg.name + ' 项目成员 (' + this.state.projectMemberList.length + ') 人',
      dataIndex: 'username',
      key: 'username',
      render: function render(text, record) {
        return _react2.default.createElement(
          'div',
          { className: 'm-user' },
          _react2.default.createElement('img', { src: '/api/user/avatar?uid=' + record.uid, className: 'm-user-img' }),
          _react2.default.createElement(
            'p',
            { className: 'm-user-name' },
            text
          ),
          _react2.default.createElement(
            _tooltip2.default,
            { placement: 'top', title: '\u6D88\u606F\u901A\u77E5' },
            _react2.default.createElement(
              'span',
              null,
              _react2.default.createElement(_switch2.default, {
                size: 'small',
                checkedChildren: '\u5F00',
                unCheckedChildren: '\u5173',
                checked: record.email_notice,
                disabled: !(isEmailChangeEable || record.uid === _this3.props.uid),
                onChange: function onChange(e) {
                  return _this3.changeEmailNotice(e, record.uid);
                }
              })
            )
          )
        );
      }
    }, {
      title: this.state.role === 'owner' || this.state.role === 'admin' ? _react2.default.createElement(
        'div',
        { className: 'btn-container' },
        _react2.default.createElement(
          _button2.default,
          { className: 'btn', type: 'primary', icon: 'plus', onClick: this.showAddMemberModal },
          '\u6DFB\u52A0\u6210\u5458'
        ),
        _react2.default.createElement(
          _button2.default,
          { className: 'btn', icon: 'plus', onClick: this.showImportMemberModal },
          '\u6279\u91CF\u5BFC\u5165\u6210\u5458'
        )
      ) : '',
      key: 'action',
      className: 'member-opration',
      render: function render(text, record) {
        if (_this3.state.role === 'owner' || _this3.state.role === 'admin') {
          return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              _select2.default,
              {
                value: record.role + '-' + record.uid,
                className: 'select',
                onChange: _this3.changeUserRole
              },
              _react2.default.createElement(
                Option,
                { value: 'owner-' + record.uid },
                '\u7EC4\u957F'
              ),
              _react2.default.createElement(
                Option,
                { value: 'dev-' + record.uid },
                '\u5F00\u53D1\u8005'
              ),
              _react2.default.createElement(
                Option,
                { value: 'guest-' + record.uid },
                '\u8BBF\u5BA2'
              )
            ),
            _react2.default.createElement(
              _popconfirm2.default,
              {
                placement: 'topRight',
                title: '\u4F60\u786E\u5B9A\u8981\u5220\u9664\u5417? ',
                onConfirm: _this3.deleteConfirm(record.uid),
                okText: '\u786E\u5B9A',
                cancelText: ''
              },
              _react2.default.createElement(_button2.default, { type: 'danger', icon: 'delete', className: 'btn-danger' })
            )
          );
        } else {
          // 非管理员可以看到权限 但无法修改
          if (record.role === 'owner') {
            return '组长';
          } else if (record.role === 'dev') {
            return '开发者';
          } else if (record.role === 'guest') {
            return '访客';
          } else {
            return '';
          }
        }
      }
    }];
    // 获取当前分组下的所有项目名称
    var children = this.props.projectList.map(function (item, index) {
      return _react2.default.createElement(
        Option,
        { key: index, value: '' + item._id },
        item.name
      );
    });

    return _react2.default.createElement(
      'div',
      { className: 'g-row' },
      _react2.default.createElement(
        'div',
        { className: 'm-panel' },
        this.state.visible ? _react2.default.createElement(
          _modal2.default,
          {
            title: '\u6DFB\u52A0\u6210\u5458',
            visible: this.state.visible,
            onOk: this.handleOk,
            onCancel: this.handleCancel
          },
          _react2.default.createElement(
            _row2.default,
            { gutter: 6, className: 'modal-input' },
            _react2.default.createElement(
              _col2.default,
              { span: '5' },
              _react2.default.createElement(
                'div',
                { className: 'label usernamelabel' },
                '\u7528\u6237\u540D: '
              )
            ),
            _react2.default.createElement(
              _col2.default,
              { span: '15' },
              _react2.default.createElement(_UsernameAutoComplete2.default, { callbackState: this.onUserSelect })
            )
          ),
          _react2.default.createElement(
            _row2.default,
            { gutter: 6, className: 'modal-input' },
            _react2.default.createElement(
              _col2.default,
              { span: '5' },
              _react2.default.createElement(
                'div',
                { className: 'label usernamelabel' },
                '\u6743\u9650: '
              )
            ),
            _react2.default.createElement(
              _col2.default,
              { span: '15' },
              _react2.default.createElement(
                _select2.default,
                { defaultValue: 'dev', className: 'select', onChange: this.changeNewMemberRole },
                _react2.default.createElement(
                  Option,
                  { value: 'owner' },
                  '\u7EC4\u957F'
                ),
                _react2.default.createElement(
                  Option,
                  { value: 'dev' },
                  '\u5F00\u53D1\u8005'
                ),
                _react2.default.createElement(
                  Option,
                  { value: 'guest' },
                  '\u8BBF\u5BA2'
                )
              )
            )
          )
        ) : '',
        _react2.default.createElement(
          _modal2.default,
          {
            title: '\u6279\u91CF\u5BFC\u5165\u6210\u5458',
            visible: this.state.modalVisible,
            onOk: this.handleModalOk,
            onCancel: this.handleModalCancel
          },
          _react2.default.createElement(
            _row2.default,
            { gutter: 6, className: 'modal-input' },
            _react2.default.createElement(
              _col2.default,
              { span: '5' },
              _react2.default.createElement(
                'div',
                { className: 'label usernamelabel' },
                '\u9879\u76EE\u540D: '
              )
            ),
            _react2.default.createElement(
              _col2.default,
              { span: '15' },
              _react2.default.createElement(
                _select2.default,
                {
                  showSearch: true,
                  style: { width: 200 },
                  placeholder: '\u8BF7\u9009\u62E9\u9879\u76EE\u540D\u79F0',
                  optionFilterProp: 'children',
                  onChange: this.handleChange
                },
                children
              )
            )
          )
        ),
        _react2.default.createElement(_table2.default, {
          columns: columns,
          dataSource: this.state.projectMemberList,
          pagination: false,
          locale: { emptyText: _react2.default.createElement(_ErrMsg2.default, { type: 'noMemberInProject' }) },
          className: 'setting-project-member'
        }),
        _react2.default.createElement(
          _card2.default,
          {
            bordered: false,
            title: this.state.groupName + ' 分组成员 ' + '(' + this.state.groupMemberList.length + ') 人',
            hoverable: true,
            className: 'setting-group'
          },
          this.state.groupMemberList.length ? this.state.groupMemberList.map(function (item, index) {
            return _react2.default.createElement(
              'div',
              { key: index, className: 'card-item' },
              _react2.default.createElement('img', {
                src: location.protocol + '//' + location.host + '/api/user/avatar?uid=' + item.uid,
                className: 'item-img'
              }),
              _react2.default.createElement(
                'p',
                { className: 'item-name' },
                item.username,
                item.uid === _this3.props.uid ? _react2.default.createElement(_badge2.default, {
                  count: '我',
                  style: {
                    backgroundColor: '#689bd0',
                    fontSize: '13px',
                    marginLeft: '8px',
                    borderRadius: '4px'
                  }
                }) : null
              ),
              item.role === 'owner' ? _react2.default.createElement(
                'p',
                { className: 'item-role' },
                '\u7EC4\u957F'
              ) : null,
              item.role === 'dev' ? _react2.default.createElement(
                'p',
                { className: 'item-role' },
                '\u5F00\u53D1\u8005'
              ) : null,
              item.role === 'guest' ? _react2.default.createElement(
                'p',
                { className: 'item-role' },
                '\u8BBF\u5BA2'
              ) : null
            );
          }) : _react2.default.createElement(_ErrMsg2.default, { type: 'noMemberInGroup' })
        )
      )
    );
  };

  return ProjectMember;
}(_react.PureComponent), _class2.propTypes = {
  match: _propTypes2.default.object,
  projectId: _propTypes2.default.number,
  projectMsg: _propTypes2.default.object,
  uid: _propTypes2.default.number,
  addMember: _propTypes2.default.func,
  delMember: _propTypes2.default.func,
  changeMemberRole: _propTypes2.default.func,
  getProject: _propTypes2.default.func,
  fetchGroupMemberList: _propTypes2.default.func,
  fetchGroupMsg: _propTypes2.default.func,
  getProjectMemberList: _propTypes2.default.func,
  fetchProjectList: _propTypes2.default.func,
  projectList: _propTypes2.default.array,
  changeMemberEmailNotice: _propTypes2.default.func
}, _temp)) || _class);
exports.default = ProjectMember;