'use strict';

exports.__esModule = true;
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author suxiaoxin
 * @demo
 * <EasyDragSort data={()=>this.state.list} onChange={this.handleChange} >
 * {list}
 * </EasyDragSot>
 */
var curDragIndex = null;

function isDom(obj) {
  return obj && (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string' && typeof obj.getAttribute === 'function';
}

var EasyDragSort = (_temp = _class = function (_React$Component) {
  (0, _inherits3.default)(EasyDragSort, _React$Component);

  function EasyDragSort() {
    (0, _classCallCheck3.default)(this, EasyDragSort);
    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
  }

  EasyDragSort.prototype.render = function render() {
    var that = this;
    var props = this.props;
    var onlyChild = props.onlyChild;

    var container = props.children;
    var onChange = function onChange(from, to) {
      if (from === to) {
        return;
      }
      var curValue = void 0;

      curValue = props.data();

      var newValue = arrMove(curValue, from, to);
      if (typeof props.onChange === 'function') {
        return props.onChange(newValue, from, to);
      }
    };
    return _react2.default.createElement(
      'div',
      null,
      container.map(function (item, index) {
        if (_react2.default.isValidElement(item)) {
          return _react2.default.cloneElement(item, {
            draggable: onlyChild ? false : true,
            ref: 'x' + index,
            'data-ref': 'x' + index,
            onDragStart: function onDragStart() {
              curDragIndex = index;
            },
            /**
             * 控制 dom 是否可拖动
             * @param {*} e
             */
            onMouseDown: function onMouseDown(e) {
              if (!onlyChild) {
                return;
              }
              var el = e.target,
                  target = e.target;
              if (!isDom(el)) {
                return;
              }
              do {
                if (el && isDom(el) && el.getAttribute(onlyChild)) {
                  target = el;
                }
                if (el && el.tagName == 'DIV' && el.getAttribute('data-ref')) {
                  break;
                }
              } while (el = el.parentNode);
              if (!el) {
                return;
              }
              var ref = that.refs[el.getAttribute('data-ref')];
              var dom = _reactDom2.default.findDOMNode(ref);
              if (dom) {
                dom.draggable = target.getAttribute(onlyChild) ? true : false;
              }
            },

            onDragEnter: function onDragEnter() {
              onChange(curDragIndex, index);
              curDragIndex = index;
            },
            onDragEnd: function onDragEnd() {
              curDragIndex = null;
              if (typeof props.onDragEnd === 'function') {
                props.onDragEnd();
              }
            }
          });
        }
        return item;
      })
    );
  };

  return EasyDragSort;
}(_react2.default.Component), _class.propTypes = {
  children: _propTypes2.default.array,
  onChange: _propTypes2.default.func,
  onDragEnd: _propTypes2.default.func,
  data: _propTypes2.default.func,
  onlyChild: _propTypes2.default.string
}, _temp);
exports.default = EasyDragSort;


function arrMove(arr, fromIndex, toIndex) {
  arr = [].concat(arr);
  var item = arr.splice(fromIndex, 1)[0];
  arr.splice(toIndex, 0, item);
  return arr;
}