{"version":3,"sources":["node_modules\\json-schema-editor-visual\\package\\components\\SchemaComponents\\FieldInput.js"],"names":["FieldInput","props","handleChange","e","value","target","setState","onKeyup","keyCode","onChange","handleBlur","state","componentWillReceiveProps","nextProps","render","PureComponent","propTypes","PropTypes","func","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAGqBA,U;;;AAMnB,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA,+DAChB,0BAAMA,KAAN,CADgB;;AAAA,UAOlBC,YAPkB,GAOJ,UAACC,CAAD,EAAK;AACjB,UAAIC,QAAQD,EAAEE,MAAF,CAASD,KAArB;AACA,YAAKE,QAAL,CAAc;AACZF;AADY,OAAd;AAGD,KAZiB;;AAAA,UAsBlBG,OAtBkB,GAsBT,aAAI;AACX,UAAGJ,EAAEK,OAAF,KAAc,EAAjB,EAAqB;AACnB,YAAGL,EAAEE,MAAF,CAASD,KAAT,KAAmB,MAAKH,KAAL,CAAWG,KAAjC,EAAuC,OAAO,MAAKH,KAAL,CAAWQ,QAAX,CAAoBN,CAApB,CAAP;AACxC;AACF,KA1BiB;;AAAA,UA4BlBO,UA5BkB,GA4BL,UAACP,CAAD,EAAK;AAChB,UAAGA,EAAEE,MAAF,CAASD,KAAT,KAAmB,MAAKH,KAAL,CAAWG,KAAjC,EAAuC,OAAO,MAAKH,KAAL,CAAWQ,QAAX,CAAoBN,CAApB,CAAP;AACxC,KA9BiB;;AAEhB,UAAKQ,KAAL,GAAa;AACXP,aAAOH,MAAMG;AADF,KAAb;AAFgB;AAKjB;;uBASDQ,yB,sCAA0BC,S,EAAU;AAClC,QAAGA,UAAUT,KAAV,KAAoB,KAAKH,KAAL,CAAWG,KAAlC,EAAwC;AACtC,WAAKE,QAAL,CAAc;AACZF,eAAOS,UAAUT;AADL,OAAd;AAGD;AACF,G;;uBAYDU,M,qBAAS;AAAA,QACAV,KADA,GACS,KAAKO,KADd,CACAP,KADA;;;AAGP,WACE,0EAAY,KAAKH,KAAjB,IAAwB,OAAOG,KAA/B,EAAsC,SAAS,KAAKG,OAApD,EAA6D,QAAQ,KAAKG,UAA1E,EAAsF,UAAU,KAAKR,YAArG,IADF;AAGD,G;;;EA5CqCa,oB,UAC/BC,S,GAAY;AACjBP,YAAUQ,oBAAUC,IADH;AAEjBd,SAAOa,oBAAUE;AAFA,C;kBADAnB,U","file":"FieldInput.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport {Input} from 'antd'\n\nexport default class FieldInput extends PureComponent {\n  static propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n  }\n\n  constructor(props){\n    super(props)\n    this.state = {\n      value: props.value\n    }\n  }\n\n  handleChange =(e)=>{\n    let value = e.target.value;\n    this.setState({\n      value\n    })\n  }\n\n  componentWillReceiveProps(nextProps){\n    if(nextProps.value !== this.props.value){\n      this.setState({\n        value: nextProps.value\n      })\n    }\n  }\n\n  onKeyup= e=> {\n    if(e.keyCode === 13) {\n      if(e.target.value !== this.props.value)return this.props.onChange(e)\n    }\n  }\n\n  handleBlur = (e)=>{\n    if(e.target.value !== this.props.value)return this.props.onChange(e)\n  }\n\n  render() {\n    const {value} = this.state;\n\n    return (\n      <Input  {...this.props} value={value} onKeyUp={this.onKeyup} onBlur={this.handleBlur} onChange={this.handleChange} />\n    )\n  }\n}\n"]}