{"version":3,"sources":["client\\components\\Header\\Search\\Search.js"],"names":["Option","Srch","groupList","state","group","projectList","project","setCurrGroup","changeMenuItem","fetchGroupMsg","fetchInterfaceListMenu","withRouter","props","onSelect","value","option","type","history","push","group_name","_id","handleSearch","axios","get","then","res","data","errcode","dataSource","title","map","item","groupName","groupId","name","projectId","setState","console","log","catch","err","render","width","Component","propTypes","PropTypes","array","router","object","location","func"],"mappings":"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","file":"Search.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { PureComponent as Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Icon, Input, AutoComplete } from 'antd';\nimport './Search.scss';\nimport { withRouter } from 'react-router';\nimport axios from 'axios';\nimport { setCurrGroup, fetchGroupMsg } from '../../../reducer/modules/group';\nimport { changeMenuItem } from '../../../reducer/modules/menu';\n\nimport { fetchInterfaceListMenu } from '../../../reducer/modules/interface';\nconst Option = AutoComplete.Option;\n\n@connect(\n  state => ({\n    groupList: state.group.groupList,\n    projectList: state.project.projectList\n  }),\n  {\n    setCurrGroup,\n    changeMenuItem,\n    fetchGroupMsg,\n    fetchInterfaceListMenu\n  }\n)\n@withRouter\nexport default class Srch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: []\n    };\n  }\n\n  static propTypes = {\n    groupList: PropTypes.array,\n    projectList: PropTypes.array,\n    router: PropTypes.object,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    setCurrGroup: PropTypes.func,\n    changeMenuItem: PropTypes.func,\n    fetchInterfaceListMenu: PropTypes.func,\n    fetchGroupMsg: PropTypes.func\n  };\n\n  onSelect = async (value, option) => {\n    if (option.props.type === '分组') {\n      this.props.changeMenuItem('/group');\n      this.props.history.push('/group/' + option.props['id']);\n      this.props.setCurrGroup({ group_name: value, _id: option.props['id'] - 0 });\n    } else if (option.props.type === '项目') {\n      await this.props.fetchGroupMsg(option.props['groupId']);\n      this.props.history.push('/project/' + option.props['id']);\n    } else if (option.props.type === '接口') {\n      await this.props.fetchInterfaceListMenu(option.props['projectId']);\n      this.props.history.push(\n        '/project/' + option.props['projectId'] + '/interface/api/' + option.props['id']\n      );\n    }\n  };\n\n  handleSearch = value => {\n    axios\n      .get('/api/project/search?q=' + value)\n      .then(res => {\n        if (res.data && res.data.errcode === 0) {\n          const dataSource = [];\n          for (let title in res.data.data) {\n            res.data.data[title].map(item => {\n              switch (title) {\n                case 'group':\n                  dataSource.push(\n                    <Option\n                      key={`分组${item._id}`}\n                      type=\"分组\"\n                      value={`${item.groupName}`}\n                      id={`${item._id}`}\n                    >\n                      {`分组: ${item.groupName}`}\n                    </Option>\n                  );\n                  break;\n                case 'project':\n                  dataSource.push(\n                    <Option\n                      key={`项目${item._id}`}\n                      type=\"项目\"\n                      id={`${item._id}`}\n                      groupId={`${item.groupId}`}\n                    >\n                      {`项目: ${item.name}`}\n                    </Option>\n                  );\n                  break;\n                case 'interface':\n                  dataSource.push(\n                    <Option\n                      key={`接口${item._id}`}\n                      type=\"接口\"\n                      id={`${item._id}`}\n                      projectId={`${item.projectId}`}\n                    >\n                      {`接口: ${item.title}`}\n                    </Option>\n                  );\n                  break;\n                default:\n                  break;\n              }\n            });\n          }\n          this.setState({\n            dataSource: dataSource\n          });\n        } else {\n          console.log('查询项目或分组失败');\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // getDataSource(groupList){\n  //   const groupArr =[];\n  //   groupList.forEach(item =>{\n  //     groupArr.push(\"group: \"+ item[\"group_name\"]);\n  //   })\n  //   return groupArr;\n  // }\n\n  render() {\n    const { dataSource } = this.state;\n\n    return (\n      <div className=\"search-wrapper\">\n        <AutoComplete\n          className=\"search-dropdown\"\n          dataSource={dataSource}\n          style={{ width: '100%' }}\n          defaultActiveFirstOption={false}\n          onSelect={this.onSelect}\n          onSearch={this.handleSearch}\n          // filterOption={(inputValue, option) =>\n          //   option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n          // }\n        >\n          <Input\n            prefix={<Icon type=\"search\" className=\"srch-icon\" />}\n            placeholder=\"搜索分组/项目/接口\"\n            className=\"search-input\"\n          />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n"]}