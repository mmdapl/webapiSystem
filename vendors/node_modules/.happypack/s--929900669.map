{"version":3,"sources":["client\\components\\ModalPostman\\index.js"],"names":["require","handleParamsValue","Panel","deepEqual","state","JSON","parse","closeRightTabsAndAddNewTab","arr","index","name","params","newParamsList","concat","splice","length","push","curParams","curname","ModalPostman","props","methodsShow","methodsShowMore","methodsList","constantInput","activeKey","methodsParamsList","type","componentWillMount","inputValue","setState","handleInitList","val","replace","valArr","split","indexOf","paramsList","i","nameArr","paramArr","map","item","mockClick","handleValue","handleError","setInit","initParamsList","render","visible","envType","outputParams","str","forEach","isShow","isParams","handleOk","handleCancel","handleCollapse","handleConstantsInput","e","target","value","id","Component","propTypes","PropTypes","bool","func","any","string","number","handleParamsInput","clickIndex","paramsIndex","MethodsListSource","installValue","key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;eAE8BA,mC;IAAtBC,iB,YAAAA,iB;;AACR,IAAMC,QAAQ,mBAASA,KAAvB;;AAEA;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAOC,KAAKC,KAAL,CAAW,yBAAeF,KAAf,CAAX,CAAP;AACD;;AAED,SAASG,0BAAT,CAAoCC,GAApC,EAAyCC,KAAzC,EAAgDC,IAAhD,EAAsDC,MAAtD,EAA8D;AAC5D,MAAIC,gBAAgB,GAAGC,MAAH,CAAUL,GAAV,CAApB;AACAI,gBAAcE,MAAd,CAAqBL,QAAQ,CAA7B,EAAgCG,cAAcG,MAAd,GAAuBN,KAAvD;AACAG,gBAAcI,IAAd,CAAmB;AACjBN,UAAM,EADW;AAEjBC,YAAQ;AAFS,GAAnB;;AAKA,MAAIM,YAAYN,UAAU,EAA1B;AACA,MAAIO,UAAUR,QAAQ,EAAtB;AACAE,gBAAcH,KAAd,+BACKG,cAAcH,KAAd,CADL;AAEEC,UAAMQ,OAFR;AAGEP,YAAQM;AAHV;AAKA,SAAOL,aAAP;AACD;;IAEKO,Y;;;AAUJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,+DACjB,sBAAMA,KAAN,CADiB;;AAAA;;AAEjB,UAAKhB,KAAL,GAAa;AACXiB,mBAAa,KADF;AAEXC,uBAAiB,KAFN;AAGXC,mBAAa,EAHF;AAIXC,qBAAe,EAJJ;AAKXC,iBAAW,GALA;AAMXC,yBAAmB,CACjB;AACEhB,cAAM,EADR;AAEEC,gBAAQ,EAFV;AAGEgB,cAAM;AAHR,OADiB;AANR,KAAb;AAFiB;AAgBlB;;yBAEDC,kB,iCAAqB;AAAA,QACbC,UADa,GACE,KAAKT,KADP,CACbS,UADa;;AAEnB,SAAKC,QAAL,CAAc;AACZN,qBAAeK;AADH,KAAd;AAGA;AACAA,kBAAc,KAAKE,cAAL,CAAoBF,UAApB,CAAd;AACD,G;;yBAEDE,c,2BAAeC,G,EAAK;AAAA;;AAClBA,UAAMA,IAAIC,OAAJ,CAAY,iBAAZ,EAA+B,IAA/B,CAAN;AACA,QAAIC,SAASF,IAAIG,KAAJ,CAAU,GAAV,CAAb;;AAEA,QAAID,OAAO,CAAP,EAAUE,OAAV,CAAkB,GAAlB,KAA0B,CAA9B,EAAiC;AAC/B,WAAKN,QAAL,CAAc;AACZL,mBAAW;AADC,OAAd;AAGD,KAJD,MAIO,IAAIS,OAAO,CAAP,EAAUE,OAAV,CAAkB,GAAlB,KAA0B,CAA9B,EAAiC;AACtC,WAAKN,QAAL,CAAc;AACZL,mBAAW;AADC,OAAd;AAGD;;AAED,QAAIY,aAAa,CACf;AACE3B,YAAM,kBAAKwB,OAAO,CAAP,CAAL,CADR;AAEEvB,cAAQ,EAFV;AAGEgB,YAAM;AAHR,KADe,CAAjB;;AAQA,SAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIJ,OAAOnB,MAA3B,EAAmCuB,GAAnC,EAAwC;AACtC,UAAIC,UAAUL,OAAOI,CAAP,EAAUH,KAAV,CAAgB,GAAhB,CAAd;;AAEA,UAAIK,WAAWD,QAAQ,CAAR,KAAcA,QAAQ,CAAR,EAAWJ,KAAX,CAAiB,GAAjB,CAA7B;AACAK,iBACEA,YACAA,SAASC,GAAT,CAAa,gBAAQ;AACnB,eAAO,kBAAKC,IAAL,CAAP;AACD,OAFD,CAFF;AAKA,UAAIA,OAAO;AACThC,cAAM,kBAAK6B,QAAQ,CAAR,CAAL,CADG;AAET5B,gBAAQ6B,YAAY;AAFX,OAAX;AAIAH,iBAAWrB,IAAX,CAAgB0B,IAAhB;AACD;;AAED,SAAKZ,QAAL,CACE;AACEJ,yBAAmBW;AADrB,KADF,EAIE,YAAM;AACJ,aAAKM,SAAL,CAAeT,OAAOnB,MAAtB;AACD,KANH;AAQD,G;;yBAED4B,S,sBAAUlC,K,EAAO;AAAA;;AACf,WAAO,UAACS,OAAD,EAAUP,MAAV,EAAqB;AAC1B,UAAIC,gBAAgBL,2BAClB,OAAKH,KAAL,CAAWsB,iBADO,EAElBjB,KAFkB,EAGlBS,OAHkB,EAIlBP,MAJkB,CAApB;AAMA,aAAKmB,QAAL,CAAc;AACZJ,2BAAmBd;AADP,OAAd;AAGD,KAVD;AAWD,G;AACD;;;AAiBA;;;AAaA;yBACAgC,W,wBAAYZ,G,EAAK;AACf,WAAO/B,kBAAkB+B,GAAlB,EAAuB,EAAvB,CAAP;AACD,G;;AAED;;;yBACAa,W,0BAAc;AACZ,WACE;AACE,eAAQ,qQADV;AAEE,YAAK;AAFP,MADF;AAMD,G;;AAED;;;yBACAC,O,sBAAU;AACR,QAAIC,iBAAiB,CACnB;AACErC,YAAM,EADR;AAEEC,cAAQ,EAFV;AAGEgB,YAAM;AAHR,KADmB,CAArB;AAOA,SAAKG,QAAL,CAAc;AACZJ,yBAAmBqB;AADP,KAAd;AAGD,G;AACD;;;AAMA;;AAKA;;;yBAOAC,M,qBAAS;AAAA;;AAAA,iBACsB,KAAK5B,KAD3B;AAAA,QACC6B,OADD,UACCA,OADD;AAAA,QACUC,OADV,UACUA,OADV;AAAA,iBAEsC,KAAK9C,KAF3C;AAAA,QAECsB,iBAFD,UAECA,iBAFD;AAAA,QAEoBF,aAFpB,UAEoBA,aAFpB;;;AAIP,QAAM2B,eAAe,SAAfA,YAAe,GAAM;AACzB,UAAIC,MAAM,EAAV;AACA,UAAIrC,SAASW,kBAAkBX,MAA/B;AACAW,wBAAkB2B,OAAlB,CAA0B,UAACX,IAAD,EAAOjC,KAAP,EAAiB;AACzC,YAAI6C,SAASZ,KAAKhC,IAAL,IAAaK,SAAS,CAAT,KAAeN,KAAzC;AACA2C,eAAOV,KAAKhC,IAAZ;AACAgC,aAAK/B,MAAL,CAAY0C,OAAZ,CAAoB,UAACX,IAAD,EAAOjC,KAAP,EAAiB;AACnC,cAAI8C,WAAW9C,QAAQ,CAAvB;AACA2C,iBAAOG,WAAW,KAAX,GAAmB,KAA1B;AACAH,iBAAOV,IAAP;AACD,SAJD;AAKAU,eAAOE,SAAS,KAAT,GAAiB,EAAxB;AACD,OATD;AAUA,aAAO,QAAQF,GAAR,GAAc,KAArB;AACD,KAdD;;AAgBA,WACE;AAAA;AAAA;AACE,eACE;AAAA;AAAA;AACE,0DAAM,MAAK,MAAX,GADF;AAAA;AAAA,SAFJ;AAME,iBAASH,OANX;AAOE,cAAM;AAAA,iBAAM,OAAKO,QAAL,CAAcL,cAAd,CAAN;AAAA,SAPR;AAQE,kBAAU,KAAKM,YARjB;AASE,uBAAc,eAThB;AAUE,eAAO,IAVT;AAWE,sBAAc,KAXhB;AAYE,gBAAO;AAZT;AAcE;AAAA;AAAA,UAAK,WAAU,oBAAf,EAAoC,MAAK,MAAzC;AACG/B,0BAAkBe,GAAlB,CAAsB,UAACC,IAAD,EAAOjC,KAAP,EAAiB;AACtC,iBAAOiC,KAAKf,IAAL,KAAc,YAAd,GACL;AAAA;AAAA,cAAK,MAAM,CAAX,EAAc,WAAU,mBAAxB,EAA4C,KAAKlB,KAAjD;AACE;AAAA;AAAA;AACE,2BAAU,wBADZ;AAEE,2BAAW,OAAKL,KAAL,CAAWqB,SAFxB;AAGE,0BAAU,OAAKiC,cAHjB;AAIE,0BAAU,KAJZ;AAKE;AALF;AAOE;AAAC,qBAAD;AAAA,kBAAO,QAAQ;AAAA;AAAA,sBAAI,WAAU,YAAd;AAAA;AAAA,mBAAf,EAAmD,KAAI,GAAvD;AACE;AACE,+BAAY,gCADd;AAEE,yBAAOlC,aAFT;AAGE,4BAAU;AAAA,2BAAK,OAAKmC,oBAAL,CAA0BC,EAAEC,MAAF,CAASC,KAAnC,EAA0CrD,KAA1C,CAAL;AAAA;AAHZ;AADF,eAPF;AAcE;AAAC,qBAAD;AAAA,kBAAO,QAAQ;AAAA;AAAA,sBAAI,WAAU,YAAd;AAAA;AAAA,mBAAf,EAAuD,KAAI,GAA3D;AACE,8CAAC,kBAAD,IAAU,OAAO,OAAKkC,SAAL,CAAelC,KAAf,CAAjB,EAAwC,YAAYiC,KAAKhC,IAAzD;AADF,eAdF;AAiBGwC,0BAAY,MAAZ,IACC;AAAC,qBAAD;AAAA;AACE,0BACE;AAAA;AAAA,sBAAI,WAAU,YAAd;AAAA;AACU;AAAA;AAAA;AACN,mCAAU,KADJ;AAEN,+BAAM;AAFA;AAIN,sEAAM,MAAK,mBAAX;AAJM;AADV,mBAFJ;AAWE,uBAAI;AAXN;AAaE,8CAAC,yBAAD;AACE,sBAAI,OAAK9B,KAAL,CAAW2C,EADjB;AAEE,yBAAO,OAAKpB,SAAL,CAAelC,KAAf,CAFT;AAGE,8BAAYiC,KAAKhC;AAHnB;AAbF;AAlBJ;AADF,WADK,GA2CL;AAAA;AAAA,cAAK,MAAM,CAAX,EAAc,WAAU,mBAAxB,EAA4C,KAAKD,KAAjD;AACE,iDAAM,iBAAN,IAAwB,OAAOA,KAA/B,EAAsC,OAAOiC,KAAKhC,IAAlD,EAAwD,QAAQgC,KAAK/B,MAArE;AADF,WA3CF;AA+CD,SAhDA;AADH,OAdF;AAiEE;AAAA;AAAA,UAAK,WAAU,0BAAf;AACE;AAAA;AAAA,YAAK,MAAM,CAAX;AACE;AAAA;AAAA,cAAI,WAAU,OAAd;AAAA;AAAA;AADF,SADF;AAIE;AAAA;AAAA,YAAK,MAAM,EAAX;AACE;AAAA;AAAA,cAAM,WAAU,iBAAhB;AAAmCwC;AAAnC;AADF;AAJF,OAjEF;AAyEE;AAAA;AAAA,UAAK,WAAU,uBAAf;AACE;AAAA;AAAA,YAAK,MAAM,CAAX;AACE;AAAA;AAAA,cAAI,WAAU,OAAd;AAAA;AAAA;AADF,SADF;AAIE;AAAA;AAAA,YAAK,MAAM,EAAX;AACE;AAAA;AAAA;AAAK,iBAAKP,WAAL,CAAiBO,cAAjB,KAAqCA,kBAAkB,KAAKN,WAAL;AAA5D;AADF;AAJF;AAzEF,KADF;AAoFD,G;;;EAtRwBmB,gB,UAClBC,S,GAAY;AACjBhB,WAASiB,oBAAUC,IADF;AAEjBV,gBAAcS,oBAAUE,IAFP;AAGjBZ,YAAUU,oBAAUE,IAHH;AAIjBvC,cAAYqC,oBAAUG,GAJL;AAKjBnB,WAASgB,oBAAUI,MALF;AAMjBP,MAAIG,oBAAUK;AANG,C;;;OAkGnBZ,oB,GAAuB,eAAO;AAC5B3B,UAAMA,IAAIC,OAAJ,CAAY,iBAAZ,EAA+B,IAA/B,CAAN;AACA,WAAKH,QAAL,CAAc;AACZN,qBAAeQ;AADH,KAAd;AAGA,WAAKW,SAAL,CAAe,CAAf,EAAkBX,GAAlB;AACD,G;;OAEDwC,iB,GAAoB,UAACZ,CAAD,EAAIa,UAAJ,EAAgBC,WAAhB,EAAgC;AAClD,QAAI9D,gBAAgBT,UAAU,OAAKC,KAAL,CAAWsB,iBAArB,CAApB;AACAd,kBAAc6D,UAAd,EAA0B9D,MAA1B,CAAiC+D,WAAjC,IAAgDd,CAAhD;AACA,WAAK9B,QAAL,CAAc;AACZJ,yBAAmBd;AADP,KAAd;AAGD,G;;OAGD+D,iB,GAAoB,iBAAS;AAC3B,WACE,8BAAC,qBAAD;AACE,aAAO,OAAKhC,SAAL,CAAevB,MAAMX,KAArB,CADT;AAEE,kBAAYW,MAAM0C,KAFpB;AAGE,cAAQ1C,MAAMT,MAHhB;AAIE,mBAAa,OAAK6D,iBAJpB;AAKE,kBAAYpD,MAAMX;AALpB,MADF;AASD,G;;OA+BDgD,Y,GAAe,YAAM;AACnB,WAAKX,OAAL;AACA,WAAK1B,KAAL,CAAWqC,YAAX;AACD,G;;OAGDD,Q,GAAW,wBAAgB;AACzB,WAAKpC,KAAL,CAAWoC,QAAX,CAAoBoB,YAApB;AACA,WAAK9B,OAAL;AACD,G;;OAEDY,c,GAAiB,eAAO;AACtB,WAAK5B,QAAL,CAAc;AACZL,iBAAWoD;AADC,KAAd;AAGD,G;;kBA6GY1D,Y","file":"index.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\nimport { Alert, Modal, Row, Col, Icon, Collapse, Input, Tooltip } from 'antd';\nimport MockList from './MockList.js';\nimport MethodsList from './MethodsList.js';\nimport VariablesSelect from './VariablesSelect.js';\nimport { trim } from '../../common.js';\n\nconst { handleParamsValue } = require('common/utils.js');\nconst Panel = Collapse.Panel;\n\n// 深拷贝\nfunction deepEqual(state) {\n  return JSON.parse(JSON.stringify(state));\n}\n\nfunction closeRightTabsAndAddNewTab(arr, index, name, params) {\n  let newParamsList = [].concat(arr);\n  newParamsList.splice(index + 1, newParamsList.length - index);\n  newParamsList.push({\n    name: '',\n    params: []\n  });\n\n  let curParams = params || [];\n  let curname = name || '';\n  newParamsList[index] = {\n    ...newParamsList[index],\n    name: curname,\n    params: curParams\n  };\n  return newParamsList;\n}\n\nclass ModalPostman extends Component {\n  static propTypes = {\n    visible: PropTypes.bool,\n    handleCancel: PropTypes.func,\n    handleOk: PropTypes.func,\n    inputValue: PropTypes.any,\n    envType: PropTypes.string,\n    id: PropTypes.number\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      methodsShow: false,\n      methodsShowMore: false,\n      methodsList: [],\n      constantInput: '',\n      activeKey: '1',\n      methodsParamsList: [\n        {\n          name: '',\n          params: [],\n          type: 'dataSource'\n        }\n      ]\n    };\n  }\n\n  componentWillMount() {\n    let { inputValue } = this.props;\n    this.setState({\n      constantInput: inputValue\n    });\n    // this.props.inputValue && this.handleConstantsInput(this.props.inputValue, 0);\n    inputValue && this.handleInitList(inputValue);\n  }\n\n  handleInitList(val) {\n    val = val.replace(/^\\{\\{(.+)\\}\\}$/g, '$1');\n    let valArr = val.split('|');\n\n    if (valArr[0].indexOf('@') >= 0) {\n      this.setState({\n        activeKey: '2'\n      });\n    } else if (valArr[0].indexOf('$') >= 0) {\n      this.setState({\n        activeKey: '3'\n      });\n    }\n\n    let paramsList = [\n      {\n        name: trim(valArr[0]),\n        params: [],\n        type: 'dataSource'\n      }\n    ];\n\n    for (let i = 1; i < valArr.length; i++) {\n      let nameArr = valArr[i].split(':');\n\n      let paramArr = nameArr[1] && nameArr[1].split(',');\n      paramArr =\n        paramArr &&\n        paramArr.map(item => {\n          return trim(item);\n        });\n      let item = {\n        name: trim(nameArr[0]),\n        params: paramArr || []\n      };\n      paramsList.push(item);\n    }\n\n    this.setState(\n      {\n        methodsParamsList: paramsList\n      },\n      () => {\n        this.mockClick(valArr.length)();\n      }\n    );\n  }\n\n  mockClick(index) {\n    return (curname, params) => {\n      let newParamsList = closeRightTabsAndAddNewTab(\n        this.state.methodsParamsList,\n        index,\n        curname,\n        params\n      );\n      this.setState({\n        methodsParamsList: newParamsList\n      });\n    };\n  }\n  //  处理常量输入\n  handleConstantsInput = val => {\n    val = val.replace(/^\\{\\{(.+)\\}\\}$/g, '$1');\n    this.setState({\n      constantInput: val\n    });\n    this.mockClick(0)(val);\n  };\n\n  handleParamsInput = (e, clickIndex, paramsIndex) => {\n    let newParamsList = deepEqual(this.state.methodsParamsList);\n    newParamsList[clickIndex].params[paramsIndex] = e;\n    this.setState({\n      methodsParamsList: newParamsList\n    });\n  };\n\n  // 方法\n  MethodsListSource = props => {\n    return (\n      <MethodsList\n        click={this.mockClick(props.index)}\n        clickValue={props.value}\n        params={props.params}\n        paramsInput={this.handleParamsInput}\n        clickIndex={props.index}\n      />\n    );\n  };\n\n  //  处理表达式\n  handleValue(val) {\n    return handleParamsValue(val, {});\n  }\n\n  // 处理错误\n  handleError() {\n    return (\n      <Alert\n        message=\"请求“变量集”尚未运行,所以我们无法从其响应中提取的值。您可以在测试集合中测试这些变量。\"\n        type=\"warning\"\n      />\n    );\n  }\n\n  // 初始化\n  setInit() {\n    let initParamsList = [\n      {\n        name: '',\n        params: [],\n        type: 'dataSource'\n      }\n    ];\n    this.setState({\n      methodsParamsList: initParamsList\n    });\n  }\n  // 处理取消插入\n  handleCancel = () => {\n    this.setInit();\n    this.props.handleCancel();\n  };\n\n  // 处理插入\n  handleOk = installValue => {\n    this.props.handleOk(installValue);\n    this.setInit();\n  };\n  // 处理面板切换\n  handleCollapse = key => {\n    this.setState({\n      activeKey: key\n    });\n  };\n\n  render() {\n    const { visible, envType } = this.props;\n    const { methodsParamsList, constantInput } = this.state;\n\n    const outputParams = () => {\n      let str = '';\n      let length = methodsParamsList.length;\n      methodsParamsList.forEach((item, index) => {\n        let isShow = item.name && length - 2 !== index;\n        str += item.name;\n        item.params.forEach((item, index) => {\n          let isParams = index > 0;\n          str += isParams ? ' , ' : ' : ';\n          str += item;\n        });\n        str += isShow ? ' | ' : '';\n      });\n      return '{{ ' + str + ' }}';\n    };\n\n    return (\n      <Modal\n        title={\n          <p>\n            <Icon type=\"edit\" /> 高级参数设置\n          </p>\n        }\n        visible={visible}\n        onOk={() => this.handleOk(outputParams())}\n        onCancel={this.handleCancel}\n        wrapClassName=\"modal-postman\"\n        width={1024}\n        maskClosable={false}\n        okText=\"插入\"\n      >\n        <Row className=\"modal-postman-form\" type=\"flex\">\n          {methodsParamsList.map((item, index) => {\n            return item.type === 'dataSource' ? (\n              <Col span={8} className=\"modal-postman-col\" key={index}>\n                <Collapse\n                  className=\"modal-postman-collapse\"\n                  activeKey={this.state.activeKey}\n                  onChange={this.handleCollapse}\n                  bordered={false}\n                  accordion\n                >\n                  <Panel header={<h3 className=\"mock-title\">常量</h3>} key=\"1\">\n                    <Input\n                      placeholder=\"基础参数值\"\n                      value={constantInput}\n                      onChange={e => this.handleConstantsInput(e.target.value, index)}\n                    />\n                  </Panel>\n                  <Panel header={<h3 className=\"mock-title\">mock数据</h3>} key=\"2\">\n                    <MockList click={this.mockClick(index)} clickValue={item.name} />\n                  </Panel>\n                  {envType === 'case' && (\n                    <Panel\n                      header={\n                        <h3 className=\"mock-title\">\n                          变量&nbsp;<Tooltip\n                            placement=\"top\"\n                            title=\"YApi 提供了强大的变量参数功能，你可以在测试的时候使用前面接口的 参数 或 返回值 作为 后面接口的参数，即使接口之间存在依赖，也可以轻松 一键测试~\"\n                          >\n                            <Icon type=\"question-circle-o\" />\n                          </Tooltip>\n                        </h3>\n                      }\n                      key=\"3\"\n                    >\n                      <VariablesSelect\n                        id={this.props.id}\n                        click={this.mockClick(index)}\n                        clickValue={item.name}\n                      />\n                    </Panel>\n                  )}\n                </Collapse>\n              </Col>\n            ) : (\n              <Col span={8} className=\"modal-postman-col\" key={index}>\n                <this.MethodsListSource index={index} value={item.name} params={item.params} />\n              </Col>\n            );\n          })}\n        </Row>\n        <Row className=\"modal-postman-expression\">\n          <Col span={6}>\n            <h3 className=\"title\">表达式</h3>\n          </Col>\n          <Col span={18}>\n            <span className=\"expression-item\">{outputParams()}</span>\n          </Col>\n        </Row>\n        <Row className=\"modal-postman-preview\">\n          <Col span={6}>\n            <h3 className=\"title\">预览</h3>\n          </Col>\n          <Col span={18}>\n            <h3>{this.handleValue(outputParams()) || (outputParams() && this.handleError())}</h3>\n          </Col>\n        </Row>\n      </Modal>\n    );\n  }\n}\n\nexport default ModalPostman;\n"]}