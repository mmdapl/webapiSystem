'use strict';

exports.__esModule = true;

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _tree = require('antd/lib/tree');

var _tree2 = _interopRequireDefault(_tree);

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _interface = require('../../../../reducer/modules/interface.js');

var _project = require('../../../../reducer/modules/project.js');

var _AddInterfaceForm = require('./AddInterfaceForm');

var _AddInterfaceForm2 = _interopRequireDefault(_AddInterfaceForm);

var _AddInterfaceCatForm = require('./AddInterfaceCatForm');

var _AddInterfaceCatForm2 = _interopRequireDefault(_AddInterfaceCatForm);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _reactRouterDom = require('react-router-dom');

var _immer = require('immer');

var _immer2 = _interopRequireDefault(_immer);

var _common = require('../../../../common.js');

require('./interfaceMenu.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var confirm = _modal2.default.confirm;
var TreeNode = _tree2.default.TreeNode;
var headHeight = 240; // menu顶部到网页顶部部分的高度

var InterfaceMenu = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    list: state.inter.list,
    inter: state.inter.curdata,
    curProject: state.project.currProject,
    expands: []
  };
}, {
  fetchInterfaceListMenu: _interface.fetchInterfaceListMenu,
  fetchInterfaceData: _interface.fetchInterfaceData,
  deleteInterfaceCatData: _interface.deleteInterfaceCatData,
  deleteInterfaceData: _interface.deleteInterfaceData,
  initInterface: _interface.initInterface,
  getProject: _project.getProject,
  fetchInterfaceCatList: _interface.fetchInterfaceCatList,
  fetchInterfaceList: _interface.fetchInterfaceList
}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(InterfaceMenu, _Component);

  /**
   * @param {String} key
   */
  function InterfaceMenu(props) {
    var _this4 = this;

    (0, _classCallCheck3.default)(this, InterfaceMenu);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.changeModal = function (key, status) {
      //visible add_cat_modal_visible change_cat_modal_visible del_cat_modal_visible
      var newState = {};
      newState[key] = status;
      _this.setState(newState);
    };

    _this.handleCancel = function () {
      _this.setState({
        visible: false
      });
    };

    _this.onSelect = function (selectedKeys) {
      var _this$props = _this.props,
          history = _this$props.history,
          match = _this$props.match;

      var curkey = selectedKeys[0];

      if (!curkey || !selectedKeys) {
        return false;
      }
      var basepath = '/project/' + match.params.id + '/interface/api';
      if (curkey === 'root') {
        history.push(basepath);
      } else {
        history.push(basepath + '/' + curkey);
      }
      _this.setState({
        expands: null
      });
    };

    _this.changeExpands = function () {
      _this.setState({
        expands: null
      });
    };

    _this.handleAddInterface = function (data, cb) {
      data.project_id = _this.props.projectId;
      _axios2.default.post('/api/interface/add', data).then(function (res) {
        if (res.data.errcode !== 0) {
          return _message3.default.error(res.data.errmsg);
        }
        _message3.default.success('接口添加成功');
        var interfaceId = res.data.data._id;
        _this.props.history.push('/project/' + _this.props.projectId + '/interface/api/' + interfaceId);
        _this.getList();
        _this.setState({
          visible: false
        });
        if (cb) {
          cb();
        }
      });
    };

    _this.handleAddInterfaceCat = function (data) {
      data.project_id = _this.props.projectId;
      _axios2.default.post('/api/interface/add_cat', data).then(function (res) {
        if (res.data.errcode !== 0) {
          return _message3.default.error(res.data.errmsg);
        }
        _message3.default.success('接口分类添加成功');
        _this.getList();
        _this.props.getProject(data.project_id);
        _this.setState({
          add_cat_modal_visible: false
        });
      });
    };

    _this.handleChangeInterfaceCat = function (data) {
      data.project_id = _this.props.projectId;

      var params = {
        catid: _this.state.curCatdata._id,
        name: data.name,
        desc: data.desc
      };

      _axios2.default.post('/api/interface/up_cat', params).then(function (res) {
        if (res.data.errcode !== 0) {
          return _message3.default.error(res.data.errmsg);
        }
        _message3.default.success('接口分类更新成功');
        _this.getList();
        _this.props.getProject(data.project_id);
        _this.setState({
          change_cat_modal_visible: false
        });
      });
    };

    _this.showConfirm = function (data) {
      var that = _this;
      var id = data._id;
      var catid = data.catid;
      var ref = confirm({
        title: '您确认删除此接口????',
        content: '温馨提示：接口删除后，无法恢复',
        okText: '确认',
        cancelText: '取消',
        onOk: function onOk() {
          var _this2 = this;

          return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return that.props.deleteInterfaceData(id, that.props.projectId);

                  case 2:
                    _context.next = 4;
                    return that.getList();

                  case 4:
                    _context.next = 6;
                    return that.props.fetchInterfaceCatList({ catid: catid });

                  case 6:
                    ref.destroy();
                    that.props.history.push('/project/' + that.props.match.params.id + '/interface/api/cat_' + catid);

                  case 8:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this2);
          }))();
        },
        onCancel: function onCancel() {
          ref.destroy();
        }
      });
    };

    _this.showDelCatConfirm = function (catid) {
      var that = _this;
      var ref = confirm({
        title: '确定删除此接口分类吗？',
        content: '温馨提示：该操作会删除该分类下所有接口，接口删除后无法恢复',
        okText: '确认',
        cancelText: '取消',
        onOk: function onOk() {
          var _this3 = this;

          return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            return _regenerator2.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return that.props.deleteInterfaceCatData(catid, that.props.projectId);

                  case 2:
                    _context2.next = 4;
                    return that.getList();

                  case 4:
                    _context2.next = 6;
                    return that.props.fetchInterfaceList({ project_id: that.props.projectId });

                  case 6:
                    that.props.history.push('/project/' + that.props.match.params.id + '/interface/api');
                    ref.destroy();

                  case 8:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, _this3);
          }))();
        },
        onCancel: function onCancel() {}
      });
    };

    _this.copyInterface = function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(id) {
        var interfaceData, data, newData;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _this.props.fetchInterfaceData(id);

              case 2:
                interfaceData = _context4.sent;

                // let data = JSON.parse(JSON.stringify(interfaceData.payload.data.data));
                // data.title = data.title + '_copy';
                // data.path = data.path + '_' + Date.now();
                data = interfaceData.payload.data.data;
                newData = (0, _immer2.default)(data, function (draftData) {
                  draftData.title = draftData.title + '_copy';
                  draftData.path = draftData.path + '_' + Date.now();
                });


                _axios2.default.post('/api/interface/add', newData).then(function () {
                  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(res) {
                    var interfaceId;
                    return _regenerator2.default.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (!(res.data.errcode !== 0)) {
                              _context3.next = 2;
                              break;
                            }

                            return _context3.abrupt('return', _message3.default.error(res.data.errmsg));

                          case 2:
                            _message3.default.success('接口添加成功');
                            interfaceId = res.data.data._id;
                            _context3.next = 6;
                            return _this.getList();

                          case 6:
                            _this.props.history.push('/project/' + _this.props.projectId + '/interface/api/' + interfaceId);
                            _this.setState({
                              visible: false
                            });

                          case 8:
                          case 'end':
                            return _context3.stop();
                        }
                      }
                    }, _callee3, _this4);
                  }));

                  return function (_x2) {
                    return _ref2.apply(this, arguments);
                  };
                }());

              case 6:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, _this4);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.enterItem = function (id) {
      _this.setState({ delIcon: id });
    };

    _this.leaveItem = function () {
      _this.setState({ delIcon: null });
    };

    _this.onFilter = function (e) {
      _this.setState({
        filter: e.target.value,
        list: JSON.parse((0, _stringify2.default)(_this.props.list))
      });
    };

    _this.onExpand = function (e) {
      _this.setState({
        expands: e
      });
    };

    _this.onDrop = function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(e) {
        var dropCatIndex, dragCatIndex, list, dropCatId, id, dragCatId, dropPos, dropIndex, dragPos, dragIndex, colList, changes, _this$props2, projectId, router, catid, _changes;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                dropCatIndex = e.node.props.pos.split('-')[1] - 1;
                dragCatIndex = e.dragNode.props.pos.split('-')[1] - 1;

                if (!(dropCatIndex < 0 || dragCatIndex < 0)) {
                  _context5.next = 4;
                  break;
                }

                return _context5.abrupt('return');

              case 4:
                list = _this.props.list;
                dropCatId = _this.props.list[dropCatIndex]._id;
                id = e.dragNode.props.eventKey;
                dragCatId = _this.props.list[dragCatIndex]._id;
                dropPos = e.node.props.pos.split('-');
                dropIndex = Number(dropPos[dropPos.length - 1]);
                dragPos = e.dragNode.props.pos.split('-');
                dragIndex = Number(dragPos[dragPos.length - 1]);

                if (!(id.indexOf('cat') === -1)) {
                  _context5.next = 27;
                  break;
                }

                if (!(dropCatId === dragCatId)) {
                  _context5.next = 19;
                  break;
                }

                // 同一个分类下的接口交换顺序
                colList = list[dropCatIndex].list;
                changes = (0, _common.arrayChangeIndex)(colList, dragIndex, dropIndex);

                _axios2.default.post('/api/interface/up_index', changes).then();
                _context5.next = 21;
                break;

              case 19:
                _context5.next = 21;
                return _axios2.default.post('/api/interface/up', { id: id, catid: dropCatId });

              case 21:
                _this$props2 = _this.props, projectId = _this$props2.projectId, router = _this$props2.router;

                _this.props.fetchInterfaceListMenu(projectId);
                _this.props.fetchInterfaceList({ project_id: projectId });
                if (router && isNaN(router.params.actionId)) {
                  // 更新分类list下的数据
                  catid = router.params.actionId.substr(4);

                  _this.props.fetchInterfaceCatList({ catid: catid });
                }
                _context5.next = 30;
                break;

              case 27:
                // 分类之间拖动
                _changes = (0, _common.arrayChangeIndex)(list, dragIndex - 1, dropIndex - 1);

                _axios2.default.post('/api/interface/up_cat_index', _changes).then();
                _this.props.fetchInterfaceListMenu(_this.props.projectId);

              case 30:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, _this4);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }();

    _this.filterList = function (list) {
      var that = _this;
      var arr = [];
      var menuList = (0, _immer2.default)(list, function (draftList) {
        draftList.filter(function (item) {
          var interfaceFilter = false;
          // arr = [];
          if (item.name.indexOf(that.state.filter) === -1) {
            item.list = item.list.filter(function (inter) {
              if (inter.title.indexOf(that.state.filter) === -1 && inter.path.indexOf(that.state.filter) === -1) {
                return false;
              }
              //arr.push('cat_' + inter.catid)
              interfaceFilter = true;
              return true;
            });
            arr.push('cat_' + item._id);
            return interfaceFilter === true;
          }
          arr.push('cat_' + item._id);
          return true;
        });
      });

      return { menuList: menuList, arr: arr };
    };

    _this.state = {
      curKey: null,
      visible: false,
      delIcon: null,
      curCatid: null,
      add_cat_modal_visible: false,
      change_cat_modal_visible: false,
      del_cat_modal_visible: false,
      curCatdata: {},
      expands: null,
      list: []
    };
    return _this;
  }

  InterfaceMenu.prototype.handleRequest = function handleRequest() {
    this.props.initInterface();
    this.getList();
  };

  InterfaceMenu.prototype.getList = function () {
    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
      var r;
      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.props.fetchInterfaceListMenu(this.props.projectId);

            case 2:
              r = _context6.sent;

              this.setState({
                list: r.payload.data.data
              });

            case 4:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getList() {
      return _ref4.apply(this, arguments);
    }

    return getList;
  }();

  InterfaceMenu.prototype.componentWillMount = function componentWillMount() {
    this.handleRequest();
  };

  InterfaceMenu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.list !== nextProps.list) {
      // console.log('next', nextProps.list)
      this.setState({
        list: nextProps.list
      });
    }
  };
  // 数据过滤


  InterfaceMenu.prototype.render = function render() {
    var _this5 = this;

    var matchParams = this.props.match.params;
    // let menuList = this.state.list;
    var searchBox = _react2.default.createElement(
      'div',
      { className: 'interface-filter' },
      _react2.default.createElement(_input2.default, { onChange: this.onFilter, value: this.state.filter, placeholder: '\u641C\u7D22\u63A5\u53E3' }),
      _react2.default.createElement(
        _button2.default,
        {
          type: 'primary',
          onClick: function onClick() {
            return _this5.changeModal('add_cat_modal_visible', true);
          },
          className: 'btn-filter'
        },
        '\u6DFB\u52A0\u5206\u7C7B'
      ),
      this.state.visible ? _react2.default.createElement(
        _modal2.default,
        {
          title: '\u6DFB\u52A0\u63A5\u53E3',
          visible: this.state.visible,
          onCancel: function onCancel() {
            return _this5.changeModal('visible', false);
          },
          footer: null,
          className: 'addcatmodal'
        },
        _react2.default.createElement(_AddInterfaceForm2.default, {
          catdata: this.props.curProject.cat,
          catid: this.state.curCatid,
          onCancel: function onCancel() {
            return _this5.changeModal('visible', false);
          },
          onSubmit: this.handleAddInterface
        })
      ) : '',
      this.state.add_cat_modal_visible ? _react2.default.createElement(
        _modal2.default,
        {
          title: '\u6DFB\u52A0\u5206\u7C7B',
          visible: this.state.add_cat_modal_visible,
          onCancel: function onCancel() {
            return _this5.changeModal('add_cat_modal_visible', false);
          },
          footer: null,
          className: 'addcatmodal'
        },
        _react2.default.createElement(_AddInterfaceCatForm2.default, {
          onCancel: function onCancel() {
            return _this5.changeModal('add_cat_modal_visible', false);
          },
          onSubmit: this.handleAddInterfaceCat
        })
      ) : '',
      this.state.change_cat_modal_visible ? _react2.default.createElement(
        _modal2.default,
        {
          title: '\u4FEE\u6539\u5206\u7C7B',
          visible: this.state.change_cat_modal_visible,
          onCancel: function onCancel() {
            return _this5.changeModal('change_cat_modal_visible', false);
          },
          footer: null,
          className: 'addcatmodal'
        },
        _react2.default.createElement(_AddInterfaceCatForm2.default, {
          catdata: this.state.curCatdata,
          onCancel: function onCancel() {
            return _this5.changeModal('change_cat_modal_visible', false);
          },
          onSubmit: this.handleChangeInterfaceCat
        })
      ) : ''
    );
    var defaultExpandedKeys = function defaultExpandedKeys() {
      var _props = _this5.props,
          router = _props.router,
          inter = _props.inter,
          list = _props.list,
          rNull = { expands: [], selects: [] };

      if (list.length === 0) {
        return rNull;
      }
      if (router) {
        if (!isNaN(router.params.actionId)) {
          if (!inter || !inter._id) {
            return rNull;
          }
          return {
            expands: _this5.state.expands ? _this5.state.expands : ['cat_' + inter.catid],
            selects: [inter._id + '']
          };
        } else {
          var catid = router.params.actionId.substr(4);
          return {
            expands: _this5.state.expands ? _this5.state.expands : ['cat_' + catid],
            selects: ['cat_' + catid]
          };
        }
      } else {
        return {
          expands: _this5.state.expands ? _this5.state.expands : ['cat_' + list[0]._id],
          selects: ['root']
        };
      }
    };

    var itemInterfaceCreate = function itemInterfaceCreate(item) {
      return _react2.default.createElement(TreeNode, {
        title: _react2.default.createElement(
          'div',
          {
            className: 'container-title',
            onMouseEnter: function onMouseEnter() {
              return _this5.enterItem(item._id);
            },
            onMouseLeave: _this5.leaveItem
          },
          _react2.default.createElement(
            _reactRouterDom.Link,
            {
              className: 'interface-item',
              onClick: function onClick(e) {
                return e.stopPropagation();
              },
              to: '/project/' + matchParams.id + '/interface/api/' + item._id
            },
            item.title
          ),
          _react2.default.createElement(
            'div',
            { className: 'btns' },
            _react2.default.createElement(
              _tooltip2.default,
              { title: '\u5220\u9664\u63A5\u53E3' },
              _react2.default.createElement(_icon2.default, {
                type: 'delete',
                className: 'interface-delete-icon',
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _this5.showConfirm(item);
                },
                style: { display: _this5.state.delIcon == item._id ? 'block' : 'none' }
              })
            ),
            _react2.default.createElement(
              _tooltip2.default,
              { title: '\u590D\u5236\u63A5\u53E3' },
              _react2.default.createElement(_icon2.default, {
                type: 'copy',
                className: 'interface-delete-icon',
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _this5.copyInterface(item._id);
                },
                style: { display: _this5.state.delIcon == item._id ? 'block' : 'none' }
              })
            )
          )
        ),
        key: '' + item._id
      });
    };

    var currentKes = defaultExpandedKeys();
    var menuList = void 0;
    if (this.state.filter) {
      var res = this.filterList(this.state.list);
      menuList = res.menuList;
      currentKes.expands = res.arr;
    } else {
      menuList = this.state.list;
    }

    return _react2.default.createElement(
      'div',
      null,
      searchBox,
      menuList.length > 0 ? _react2.default.createElement(
        'div',
        {
          className: 'tree-wrappper',
          style: { maxHeight: parseInt(document.body.clientHeight) - headHeight + 'px' }
        },
        _react2.default.createElement(
          _tree2.default,
          {
            className: 'interface-list',
            defaultExpandedKeys: currentKes.expands,
            defaultSelectedKeys: currentKes.selects,
            expandedKeys: currentKes.expands,
            selectedKeys: currentKes.selects,
            onSelect: this.onSelect,
            onExpand: this.onExpand,
            draggable: true,
            onDrop: this.onDrop
          },
          _react2.default.createElement(TreeNode, {
            className: 'item-all-interface',
            title: _react2.default.createElement(
              _reactRouterDom.Link,
              {
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _this5.changeExpands();
                },
                to: '/project/' + matchParams.id + '/interface/api'
              },
              _react2.default.createElement(_icon2.default, { type: 'folder', style: { marginRight: 5 } }),
              '\u5168\u90E8\u63A5\u53E3'
            ),
            key: 'root'
          }),
          menuList.map(function (item) {
            return _react2.default.createElement(
              TreeNode,
              {
                title: _react2.default.createElement(
                  'div',
                  {
                    className: 'container-title',
                    onMouseEnter: function onMouseEnter() {
                      return _this5.enterItem(item._id);
                    },
                    onMouseLeave: _this5.leaveItem
                  },
                  _react2.default.createElement(
                    _reactRouterDom.Link,
                    {
                      className: 'interface-item',
                      onClick: function onClick(e) {
                        e.stopPropagation();
                        _this5.changeExpands();
                      },
                      to: '/project/' + matchParams.id + '/interface/api/cat_' + item._id
                    },
                    _react2.default.createElement(_icon2.default, { type: 'folder-open', style: { marginRight: 5 } }),
                    item.name
                  ),
                  _react2.default.createElement(
                    'div',
                    { className: 'btns' },
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u5220\u9664\u5206\u7C7B' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'delete',
                        className: 'interface-delete-icon',
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.showDelCatConfirm(item._id);
                        },
                        style: { display: _this5.state.delIcon == item._id ? 'block' : 'none' }
                      })
                    ),
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u4FEE\u6539\u5206\u7C7B' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'edit',
                        className: 'interface-delete-icon',
                        style: { display: _this5.state.delIcon == item._id ? 'block' : 'none' },
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.changeModal('change_cat_modal_visible', true);
                          _this5.setState({
                            curCatdata: item
                          });
                        }
                      })
                    ),
                    _react2.default.createElement(
                      _tooltip2.default,
                      { title: '\u6DFB\u52A0\u63A5\u53E3' },
                      _react2.default.createElement(_icon2.default, {
                        type: 'plus',
                        className: 'interface-delete-icon',
                        style: { display: _this5.state.delIcon == item._id ? 'block' : 'none' },
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          _this5.changeModal('visible', true);
                          _this5.setState({
                            curCatid: item._id
                          });
                        }
                      })
                    )
                  )
                ),
                key: 'cat_' + item._id,
                className: 'interface-item-nav ' + (item.list.length ? '' : 'cat_switch_hidden')
              },
              item.list.map(itemInterfaceCreate)
            );
          })
        )
      ) : null
    );
  };

  return InterfaceMenu;
}(_react.PureComponent), _class2.propTypes = {
  match: _propTypes2.default.object,
  inter: _propTypes2.default.object,
  projectId: _propTypes2.default.string,
  list: _propTypes2.default.array,
  fetchInterfaceListMenu: _propTypes2.default.func,
  curProject: _propTypes2.default.object,
  fetchInterfaceData: _propTypes2.default.func,
  addInterfaceData: _propTypes2.default.func,
  deleteInterfaceData: _propTypes2.default.func,
  initInterface: _propTypes2.default.func,
  history: _propTypes2.default.object,
  router: _propTypes2.default.object,
  getProject: _propTypes2.default.func,
  fetchInterfaceCatList: _propTypes2.default.func,
  fetchInterfaceList: _propTypes2.default.func
}, _temp)) || _class);
exports.default = (0, _reactRouterDom.withRouter)(InterfaceMenu);