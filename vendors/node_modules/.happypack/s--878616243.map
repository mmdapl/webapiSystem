{"version":3,"sources":["common\\shema-transformTo-table.js"],"names":["_","require","fieldNum","exports","schemaTransformToTable","schema","checkJsonSchema","result","Schema","isArray","err","console","log","json","newJson","isUndefined","type","isObject","properties","mapping","data","index","SchemaString","SchemaNumber","SchemaArray","SchemaObject","SchemaBoolean","SchemaInt","SchemaOther","key","desc","d","default","children","item","sub","required","map","name","value","copiedState","JSON","parse","optionForm","description","indexOf","push","maxLength","minLength","enum","enumDesc","format","mock","items","minItems","uniqueItems","maxItems","itemType","itemFormat","maximum","minimum"],"mappings":"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","file":"shema-transformTo-table.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["const _ = require('underscore');\nlet fieldNum = 1;\n\nexports.schemaTransformToTable = schema => {\n  try {\n    schema = checkJsonSchema(schema);\n    let result = Schema(schema, 0);\n    result = _.isArray(result) ? result : [result];\n    return result;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n//  自动添加type\n\nfunction checkJsonSchema(json) {\n  let newJson = Object.assign({}, json);\n  if (_.isUndefined(json.type) && _.isObject(json.properties)) {\n    newJson.type = 'object';\n  }\n\n  return newJson;\n}\n\nconst mapping = function(data, index) {\n  switch (data.type) {\n    case 'string':\n      return SchemaString(data);\n\n    case 'number':\n      return SchemaNumber(data);\n\n    case 'array':\n      return SchemaArray(data, index);\n\n    case 'object':\n      return SchemaObject(data, index);\n\n    case 'boolean':\n      return SchemaBoolean(data);\n\n    case 'integer':\n      return SchemaInt(data);\n    default:\n      return SchemaOther(data);\n  }\n};\n\nconst Schema = (data, key) => {\n  let result = mapping(data, key);\n  if (data.type !== 'object') {\n    let desc = result.desc;\n    let d = result.default;\n    let children = result.children;\n\n    delete result.desc;\n    delete result.default;\n    delete result.children;\n    let item = {\n      type: data.type,\n      key,\n      desc,\n      default: d,\n      sub: result\n    };\n\n    if (_.isArray(children)) {\n      item = Object.assign({}, item, { children });\n    }\n\n    return item;\n  }\n\n  return result;\n};\n\nconst SchemaObject = (data, key) => {\n  let { properties, required } = data;\n  properties = properties || {};\n  required = required || [];\n  let result = [];\n  Object.keys(properties).map((name, index) => {\n    let value = properties[name];\n    let copiedState = checkJsonSchema(JSON.parse(JSON.stringify(value)));\n\n    let optionForm = Schema(copiedState, key + '-' + index);\n    let item = {\n      name,\n      key: key + '-' + index,\n      desc: copiedState.description,\n      required: required.indexOf(name) != -1\n    };\n\n    if (value.type === 'object' || (_.isUndefined(value.type) && _.isArray(optionForm))) {\n      item = Object.assign({}, item, { type: 'object', children: optionForm });\n      delete item.sub;\n    } else {\n      item = Object.assign({}, item, optionForm);\n    }\n\n    result.push(item);\n  });\n\n  return result;\n};\n\nconst SchemaString = data => {\n  let item = {\n    desc: data.description,\n    default: data.default,\n    maxLength: data.maxLength,\n    minLength: data.minLength,\n    enum: data.enum,\n    enumDesc: data.enumDesc,\n    format: data.format,\n    mock: data.mock && data.mock.mock\n  };\n  return item;\n};\n\nconst SchemaArray = (data, index) => {\n  data.items = data.items || { type: 'string' };\n  let items = checkJsonSchema(data.items);\n  let optionForm = mapping(items, index);\n  //  处理array嵌套array的问题\n  let children =optionForm ;\n  if (!_.isArray(optionForm) && !_.isUndefined(optionForm)) {\n    optionForm.key = 'array-' + fieldNum++;\n    children = [optionForm];\n  }\n\n  let item = {\n    desc: data.description,\n    default: data.default,\n    minItems: data.minItems,\n    uniqueItems: data.uniqueItems,\n    maxItems: data.maxItems,\n    itemType: items.type,\n    children\n  };\n  if (items.type === 'string') {\n    item = Object.assign({}, item, { itemFormat: items.format });\n  }\n  return item;\n};\n\nconst SchemaNumber = data => {\n  let item = {\n    desc: data.description,\n    maximum: data.maximum,\n    minimum: data.minimum,\n    default: data.default,\n    format: data.format,\n    enum: data.enum,\n    enumDesc: data.enumDesc,\n    mock: data.mock && data.mock.mock\n  };\n  return item;\n};\n\nconst SchemaInt = data => {\n  let item = {\n    desc: data.description,\n    maximum: data.maximum,\n    minimum: data.minimum,\n    default: data.default,\n    format: data.format,\n    enum: data.enum,\n    enumDesc: data.enumDesc,\n    mock: data.mock && data.mock.mock\n  };\n  return item;\n};\n\nconst SchemaBoolean = data => {\n  let item = {\n    desc: data.description,\n    default: data.default,\n    enum: data.enum,\n    mock: data.mock && data.mock.mock\n  };\n  return item;\n};\n\nconst SchemaOther = data => {\n  let item = {\n    desc: data.description,\n    default: data.default,\n    mock: data.mock && data.mock.mock\n  };\n  return item;\n};\n"]}