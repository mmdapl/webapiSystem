'use strict';

exports.__esModule = true;
exports.default = undefined;

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _autoComplete = require('antd/lib/auto-complete');

var _autoComplete2 = _interopRequireDefault(_autoComplete);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = require('../LocalProvider/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Option = _autoComplete2.default.Option;
var MockSelect = (_temp = _class = function (_React$Component) {
  (0, _inherits3.default)(MockSelect, _React$Component);

  function MockSelect(props, context) {
    (0, _classCallCheck3.default)(this, MockSelect);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this.state = {
      mock: ''
    };
    _this.mock = context.Model.__jsonSchemaMock || [];
    return _this;
  }

  MockSelect.prototype.render = function render() {
    var _this2 = this;

    // const children = [];
    var schema = this.props.schema;

    var children = this.mock.map(function (item) {
      return _react2.default.createElement(
        Option,
        { key: item.mock },
        item.mock
      );
    });

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        _autoComplete2.default,
        {
          className: 'certain-category-search',
          dropdownMatchSelectWidth: false,
          dataSource: children,
          placeholder: (0, _index2.default)('mock'),
          optionLabelProp: 'value',
          filterOption: true,
          value: schema.mock ? schema.mock.mock : '',
          onChange: this.props.onChange,
          disabled: schema.type === 'object' || schema.type === 'array'
        },
        _react2.default.createElement(_input2.default, { addonAfter: _react2.default.createElement(_icon2.default, { type: 'edit', onClick: function onClick(e) {
              e.stopPropagation();_this2.props.showEdit();
            } }) })
      )
    );
  };

  return MockSelect;
}(_react2.default.Component), _class.propTypes = {
  schema: _propTypes2.default.object,
  showEdit: _propTypes2.default.func,
  onChange: _propTypes2.default.func
}, _temp);
exports.default = MockSelect;


MockSelect.contextTypes = {
  Model: _propTypes2.default.object
};