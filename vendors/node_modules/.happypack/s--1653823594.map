{"version":3,"sources":["exts\\yapi-plugin-swagger-auto-sync\\swaggerAutoSync\\swaggerAutoSync.js"],"names":["FormItem","Item","Option","formItemLayout","labelCol","lg","span","xs","sm","wrapperCol","className","tailFormItemLayout","offset","ProjectInterfaceSync","projectMsg","state","project","currProject","handleSwaggerUrlData","create","props","handleSubmit","form","projectId","params","project_id","is_sync_open","sync_data","uid","_id","id","validateFields","err","values","assignValue","axios","post","then","res","data","errcode","success","error","errmsg","validSwaggerUrl","rule","value","callback","onChange","v","setState","componentWillMount","random_corn","Math","round","random","getSyncData","get","result","render","getFieldDecorator","last_sync_time","color","initialValue","sync_mode","rules","required","message","validator","validateTrigger","sync_json_url","sync_cron","Component","propTypes","PropTypes","object","match","number","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AAEA;;AAGA;;;;;;AAFA,IAAMA,WAAW,eAAKC,IAAtB;AACA,IAAMC,SAAS,iBAAOA,MAAtB;;;AAGA;AACA,IAAMC,iBAAiB;AACrBC,YAAU;AACRC,QAAI,EAAEC,MAAM,CAAR,EADI;AAERC,QAAI,EAAED,MAAM,EAAR,EAFI;AAGRE,QAAI,EAAEF,MAAM,EAAR;AAHI,GADW;AAMrBG,cAAY;AACVJ,QAAI,EAAEC,MAAM,EAAR,EADM;AAEVC,QAAI,EAAED,MAAM,EAAR,EAFM;AAGVE,QAAI,EAAEF,MAAM,EAAR;AAHM,GANS;AAWrBI,aAAW;AAXU,CAAvB;AAaA,IAAMC,qBAAqB;AACzBF,cAAY;AACVD,QAAI;AACFF,YAAM,EADJ;AAEFM,cAAQ;AAFN;AADM;AADa,CAA3B;;IAoBqBC,oB,WAXpB,yBACC,iBAAS;AACP,SAAO;AACLC,gBAAYC,MAAMC,OAAN,CAAcC;AADrB,GAAP;AAGD,CALF,EAMC;AACEC;AADF,CAND,C,UAUA,eAAKC,MAAL,E;;;AAUC,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,+DACjB,sBAAMA,KAAN,CADiB;;AAAA,UAOnBC,YAPmB,4EAOJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACe,MAAKD,KADpB,EACLE,IADK,eACLA,IADK,EACCC,SADD,eACCA,SADD;AAETC,oBAFS,GAEA;AACXC,4BAAYF,SADD;AAEXG,8BAAc,MAAKX,KAAL,CAAWY,SAAX,CAAqBD,YAFxB;AAGXE,qBAAK,MAAKR,KAAL,CAAWN,UAAX,CAAsBc;AAHhB,eAFA;;AAOb,kBAAI,MAAKb,KAAL,CAAWY,SAAX,CAAqBE,GAAzB,EAA8B;AAC5BL,uBAAOM,EAAP,GAAY,MAAKf,KAAL,CAAWY,SAAX,CAAqBE,GAAjC;AACD;AACDP,mBAAKS,cAAL;AAAA,qGAAoB,iBAAOC,GAAP,EAAYC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACbD,GADa;AAAA;AAAA;AAAA;;AAEZE,qCAFY,GAEE,sBAAcV,MAAd,EAAsBS,MAAtB,CAFF;AAAA;AAAA,iCAGVE,gBAAMC,IAAN,CAAW,2BAAX,EAAwCF,WAAxC,EAAqDG,IAArD,CAA0D,eAAO;AACrE,gCAAIC,IAAIC,IAAJ,CAASC,OAAT,KAAqB,CAAzB,EAA4B;AAC1B,gDAAQC,OAAR,CAAgB,MAAhB;AACD,6BAFD,MAEO;AACL,gDAAQC,KAAR,CAAcJ,IAAIC,IAAJ,CAASI,MAAvB;AACD;AACF,2BANK,CAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAApB;;AAAA;AAAA;AAAA;AAAA;;AAVa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPI;;AAAA,UAgCnBC,eAhCmB;AAAA,2FAgCD,kBAAOC,IAAP,EAAaC,KAAb,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAER,MAAK3B,KAAL,CAAWF,oBAAX,CAAgC4B,KAAhC,CAFQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIdC,yBAAS,cAAT;;AAJc;AAMhBA;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhCC;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAkEnBC,QAlEmB,GAkER,aAAK;AACd,UAAIrB,YAAY,MAAKZ,KAAL,CAAWY,SAA3B;AACAA,gBAAUD,YAAV,GAAyBuB,CAAzB;AACA,YAAKC,QAAL,CAAc;AACZvB,mBAAWA;AADC,OAAd;AAGD,KAxEkB;;AAEjB,UAAKZ,KAAL,GAAa;AACXY,iBAAW,EAAED,cAAc,KAAhB;AADA,KAAb;AAFiB;AAKlB;;iCAoCDyB,kB,iCAAqB;AACnB;AACA,SAAKD,QAAL,CAAc;AACZvB,iBAAW;AADC,KAAd;AAGA;AACA,SAAKuB,QAAL,CAAc;AACZE,mBAAaC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAc,EAAzB,IAA+B;AADhC,KAAd;AAGA,SAAKC,WAAL;AACD,G;;iCAEKA,W;;;;;;;AACAjC,uB,GAAY,KAAKH,KAAL,CAAWN,UAAX,CAAsBe,G;;qBACnBM,gBAAMsB,GAAN,CAAU,yCAAyClC,SAAnD,C;;;AAAfmC,oB;;AACJ,kBAAIA,OAAOnB,IAAP,CAAYC,OAAZ,KAAwB,CAA5B,EAA+B;AAC7B,oBAAIkB,OAAOnB,IAAP,CAAYA,IAAhB,EAAsB;AACpB,uBAAKW,QAAL,CAAc;AACZvB,+BAAW+B,OAAOnB,IAAP,CAAYA;AADX,mBAAd;AAGD;AACF;;;;;;;;;;;;;;;;;AAGH;;;iCASAoB,M,qBAAS;AAAA,QACCC,iBADD,GACuB,KAAKxC,KAAL,CAAWE,IADlC,CACCsC,iBADD;;AAEP,WACE;AAAA;AAAA,QAAK,WAAU,SAAf;AACE;AAAA;AAAA;AACE;AAAC,kBAAD;AAAA;AACE,mBAAM;AADR,aAEMzD,cAFN;AAIE;AACE,qBAAS,KAAKY,KAAL,CAAWY,SAAX,CAAqBD,YADhC;AAEE,sBAAU,KAAKsB,QAFjB;AAGE,6BAAgB,QAHlB;AAIE,+BAAkB;AAJpB,YAJF;AAUG,eAAKjC,KAAL,CAAWY,SAAX,CAAqBkC,cAArB,IAAuC,IAAvC,GAA+C;AAAA;AAAA;AAAA;AAAY;AAAA;AAAA,gBAAM,WAAU,SAAhB;AAA2B,sCAAW,KAAK9C,KAAL,CAAWY,SAAX,CAAqBkC,cAAhC;AAA3B;AAAZ,WAA/C,GAAuJ;AAV1J,SADF;AAcE;AAAA;AAAA;AACE;AAAC,oBAAD;AAAA,uCAAc1D,cAAd,IAA8B,OAC5B;AAAA;AAAA,kBAAM,WAAU,OAAhB;AAAA;AAEE;AAAA;AAAA;AACE,2BACE;AAAA;AAAA;AACE;AAAA;AAAA,0BAAI,OAAO,EAAE2D,OAAO,OAAT,EAAX;AAAA;AAAA,uBADF;AAEE;AAAA;AAAA;AAAA;AAAA,uBAFF;AAGE,+DAHF;AAIE;AAAA;AAAA,0BAAI,OAAO,EAAEA,OAAO,OAAT,EAAX;AAAA;AAAA,uBAJF;AAKE;AAAA;AAAA;AAAA;AAAA,uBALF;AASE,+DATF;AAUE;AAAA;AAAA,0BAAI,OAAO,EAAEA,OAAO,OAAT,EAAX;AAAA;AAAA,uBAVF;AAWE;AAAA;AAAA;AAAA;AAAA;AAXF;AAFJ;AAiBE,kEAAM,MAAK,mBAAX;AAjBF,iBAFF;AAoBa;AApBb,eADF;AAwBGF,8BAAkB,WAAlB,EAA+B;AAC9BG,4BAAc,KAAKhD,KAAL,CAAWY,SAAX,CAAqBqC,SADL;AAE9BC,qBAAO,CACL;AACEC,0BAAU,IADZ;AAEEC,yBAAS;AAFX,eADK;AAFuB,aAA/B,EAUC;AAAA;AAAA;AACE;AAAC,sBAAD;AAAA,kBAAQ,OAAM,QAAd;AAAA;AAAA,eADF;AAEE;AAAC,sBAAD;AAAA,kBAAQ,OAAM,MAAd;AAAA;AAAA,eAFF;AAGE;AAAC,sBAAD;AAAA,kBAAQ,OAAM,OAAd;AAAA;AAAA;AAHF,aAVD;AAxBH,WADF;AA2CE;AAAC,oBAAD;AAAA,uCAAchE,cAAd,IAA8B,OAAM,4CAApC;AACGyD,8BAAkB,eAAlB,EAAmC;AAClCK,qBAAO,CACL;AACEC,0BAAU,IADZ;AAEEC,yBAAS;AAFX,eADK,EAKL;AACEC,2BAAW,KAAKxB;AADlB,eALK,CAD2B;AAUlCyB,+BAAiB,QAViB;AAWlCN,4BAAc,KAAKhD,KAAL,CAAWY,SAAX,CAAqB2C;AAXD,aAAnC,EAYE,oDAZF;AADH,WA3CF;AA2DE;AAAC,oBAAD;AAAA,uCAAcnE,cAAd,IAA8B,OAAO;AAAA;AAAA;AAAA;AAAiC;AAAA;AAAA,oBAAG,MAAK,oEAAR;AAAA;AAAA;AAAjC,eAArC;AACGyD,8BAAkB,WAAlB,EAA+B;AAC9BK,qBAAO,CACL;AACEC,0BAAU,IADZ;AAEEC,yBAAS;AAFX,eADK,CADuB;AAO9BJ,4BAAc,KAAKhD,KAAL,CAAWY,SAAX,CAAqB4C,SAArB,GAAiC,KAAKxD,KAAL,CAAWY,SAAX,CAAqB4C,SAAtD,GAAkE,KAAKxD,KAAL,CAAWqC;AAP7D,aAA/B,EAQE,oDARF;AADH;AA3DF,SAdF;AAqFE;AAAC,kBAAD;AAAczC,4BAAd;AACE;AAAA;AAAA,cAAQ,MAAK,SAAb,EAAuB,UAAS,QAAhC,EAAyC,MAAK,MAA9C,EAAqD,MAAK,OAA1D,EAAkE,SAAS,KAAKU,YAAhF;AAAA;AAAA;AADF;AArFF;AADF,KADF;AA+FD,G;;;EApL+CmD,gB,WACzCC,S,GAAY;AACjBnD,QAAMoD,oBAAUC,MADC;AAEjBC,SAAOF,oBAAUC,MAFA;AAGjBpD,aAAWmD,oBAAUG,MAHJ;AAIjB/D,cAAY4D,oBAAUC,MAJL;AAKjBzD,wBAAsBwD,oBAAUI;AALf,C;kBADAjE,oB","file":"swaggerAutoSync.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { formatTime } from 'client/common.js';\nimport { Form, Switch, Button, Icon, Tooltip, message, Input, Select } from 'antd';\nimport {handleSwaggerUrlData} from 'client/reducer/modules/project';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nimport axios from 'axios';\n\n// layout\nconst formItemLayout = {\n  labelCol: {\n    lg: { span: 5 },\n    xs: { span: 24 },\n    sm: { span: 10 }\n  },\n  wrapperCol: {\n    lg: { span: 16 },\n    xs: { span: 24 },\n    sm: { span: 12 }\n  },\n  className: 'form-item'\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    sm: {\n      span: 16,\n      offset: 11\n    }\n  }\n};\n\n@connect(\n  state => {\n    return {\n      projectMsg: state.project.currProject\n    };\n  },\n  {\n    handleSwaggerUrlData\n  }\n)\n@Form.create()\nexport default class ProjectInterfaceSync extends Component {\n  static propTypes = {\n    form: PropTypes.object,\n    match: PropTypes.object,\n    projectId: PropTypes.number,\n    projectMsg: PropTypes.object,\n    handleSwaggerUrlData: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sync_data: { is_sync_open: false }\n    };\n  }\n\n  handleSubmit = async () => {\n    const { form, projectId } = this.props;\n    let params = {\n      project_id: projectId,\n      is_sync_open: this.state.sync_data.is_sync_open,\n      uid: this.props.projectMsg.uid\n    };\n    if (this.state.sync_data._id) {\n      params.id = this.state.sync_data._id;\n    }\n    form.validateFields(async (err, values) => {\n      if (!err) {\n        let assignValue = Object.assign(params, values);\n        await axios.post('/api/plugin/autoSync/save', assignValue).then(res => {\n          if (res.data.errcode === 0) {\n            message.success('保存成功');\n          } else {\n            message.error(res.data.errmsg);\n          }\n        });\n      }\n    });\n\n  };\n\n  validSwaggerUrl = async (rule, value, callback) => {\n    try{\n      await this.props.handleSwaggerUrlData(value);\n    } catch(e) {\n      callback('swagger地址不正确');\n    } \n    callback()\n  }\n\n  componentWillMount() {\n    //查询同步任务\n    this.setState({\n      sync_data: {}\n    });\n    //默认每份钟同步一次,取一个随机数\n    this.setState({\n      random_corn: Math.round(Math.random()*60) + ' * * * * *'\n    });\n    this.getSyncData();\n  }\n\n  async getSyncData() {\n    let projectId = this.props.projectMsg._id;\n    let result = await axios.get('/api/plugin/autoSync/get?project_id=' + projectId);\n    if (result.data.errcode === 0) {\n      if (result.data.data) {\n        this.setState({\n          sync_data: result.data.data\n        });\n      }\n    }\n  }\n\n  // 是否开启\n  onChange = v => {\n    let sync_data = this.state.sync_data;\n    sync_data.is_sync_open = v;\n    this.setState({\n      sync_data: sync_data\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div className=\"m-panel\">\n        <Form>\n          <FormItem\n            label=\"是否开启自动同步\"\n            {...formItemLayout}\n          >\n            <Switch\n              checked={this.state.sync_data.is_sync_open}\n              onChange={this.onChange}\n              checkedChildren=\"开\"\n              unCheckedChildren=\"关\"\n            />\n            {this.state.sync_data.last_sync_time != null ? (<div>上次更新时间:<span className=\"logtime\">{formatTime(this.state.sync_data.last_sync_time)}</span></div>) : null}\n          </FormItem>\n\n          <div>\n            <FormItem {...formItemLayout} label={\n              <span className=\"label\">\n                数据同步&nbsp;\n                <Tooltip\n                  title={\n                    <div>\n                      <h3 style={{ color: 'white' }}>普通模式</h3>\n                      <p>不导入已存在的接口</p>\n                      <br />\n                      <h3 style={{ color: 'white' }}>智能合并</h3>\n                      <p>\n                        已存在的接口，将合并返回数据的 response，适用于导入了 swagger\n                        数据，保留对数据结构的改动\n                      </p>\n                      <br />\n                      <h3 style={{ color: 'white' }}>完全覆盖</h3>\n                      <p>不保留旧数据，完全使用新数据，适用于接口定义完全交给后端定义</p>\n                    </div>\n                  }\n                >\n                  <Icon type=\"question-circle-o\" />\n                </Tooltip>{' '}\n              </span>\n            }>\n              {getFieldDecorator('sync_mode', {\n                initialValue: this.state.sync_data.sync_mode,\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择同步方式!'\n                  }\n                ]\n              })(\n\n                <Select>\n                  <Option value=\"normal\">普通模式</Option>\n                  <Option value=\"good\">智能合并</Option>\n                  <Option value=\"merge\">完全覆盖</Option>\n                </Select>\n              )}\n            </FormItem>\n\n            <FormItem {...formItemLayout} label=\"项目的swagger json地址\">\n              {getFieldDecorator('sync_json_url', {\n                rules: [\n                  {\n                    required: true,\n                    message: '输入swagger地址'\n                  },\n                  {\n                    validator: this.validSwaggerUrl\n                  }\n                ],\n                validateTrigger: 'onBlur',\n                initialValue: this.state.sync_data.sync_json_url\n              })(<Input />)}\n            </FormItem>\n\n            <FormItem {...formItemLayout} label={<span>类cron风格表达式(默认每分钟更新一次)&nbsp;<a href=\"https://blog.csdn.net/shouldnotappearcalm/article/details/89469047\">参考</a></span>}>\n              {getFieldDecorator('sync_cron', {\n                rules: [\n                  {\n                    required: true,\n                    message: '输入node-schedule的类cron表达式!'\n                  }\n                ],\n                initialValue: this.state.sync_data.sync_cron ? this.state.sync_data.sync_cron : this.state.random_corn\n              })(<Input />)}\n            </FormItem>\n          </div>\n          <FormItem {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" icon=\"save\" size=\"large\" onClick={this.handleSubmit}>\n              保存\n            </Button>\n          </FormItem>\n        </Form>\n      </div>\n    );\n  }\n}\n"]}