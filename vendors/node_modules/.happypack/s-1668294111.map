{"version":3,"sources":["common\\utils.js"],"names":["Mock","require","filter","stringUtils","utils","json5","Ajv","simpleJsonPathParse","key","json","indexOf","length","keys","substr","split","item","i","l","m","match","e","handleGlobalWord","word","handleMockWord","mock","handleJson","data","handleValueFn","handleValueWithFilter","context","handleFilter","str","trim","a","err","handleParamsValue","val","variableRegexp","replace","exports","joinPath","domain","safeArray","arr","Array","isArray","isJson5","parse","isJson","JSON","unbase64","base64Str","json_parse","json_format","ArrayToObject","obj","forEach","name","value","timeago","timestamp","minutes","hours","days","seconds","mouth","year","timeNow","parseInt","Date","getTime","schemaValidator","schema","params","ajv","format","meta","metaSchema","addMetaSchema","_opts","defaultMeta","id","_refs","localize","type","title","properties","validate","compile","valid","message","zh","errors","errorsText","separator"],"mappings":"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","file":"utils.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["const Mock = require('mockjs');\nconst filter = require('./power-string.js').filter;\nconst stringUtils = require('./power-string.js').utils;\nconst json5 = require('json5');\nconst Ajv = require('ajv');\n/**\n * 作用：解析规则串 key ，然后根据规则串的规则以及路径找到在 json 中对应的数据\n * 规则串：$.{key}.{body||params}.{dataPath} 其中 body 为返回数据，params 为请求数据，datapath 为数据的路径\n * 数组：$.key.body.data.arr[0]._id  (获取 key 所指向请求的返回数据的 arr 数组的第 0 项元素的 _id 属性)\n * 对象：$.key.body.data.obj._id ((获取 key 所指向请求的返回数据的 obj 对象的 _id 属性))\n *\n * @param String key 规则串\n * @param Object json 数据\n * @returns\n */\nfunction simpleJsonPathParse(key, json) {\n  if (!key || typeof key !== 'string' || key.indexOf('$.') !== 0 || key.length <= 2) {\n    return null;\n  }\n  let keys = key.substr(2).split('.');\n  keys = keys.filter(item => {\n    return item;\n  });\n  for (let i = 0, l = keys.length; i < l; i++) {\n    try {\n      let m = keys[i].match(/(.*?)\\[([0-9]+)\\]/);\n      if (m) {\n        json = json[m[1]][m[2]];\n      } else {\n        json = json[keys[i]];\n      }\n    } catch (e) {\n      json = '';\n      break;\n    }\n  }\n\n  return json;\n}\n\n// 全局变量 {{ global.value }}\n// value 是在环境变量中定义的字段\nfunction handleGlobalWord(word, json) {\n  if (!word || typeof word !== 'string' || word.indexOf('global.') !== 0) return word;\n  let keys = word.split('.');\n  keys = keys.filter(item => {\n    return item;\n  });\n  return json[keys[0]][keys[1]] || word;\n}\n\nfunction handleMockWord(word) {\n  if (!word || typeof word !== 'string' || word[0] !== '@') return word;\n  return Mock.mock(word);\n}\n\n/**\n *\n * @param {*} data\n * @param {*} handleValueFn 处理参数值函数\n */\nfunction handleJson(data, handleValueFn) {\n  if (!data) {\n    return data;\n  }\n  if (typeof data === 'string') {\n    return handleValueFn(data);\n  } else if (typeof data === 'object') {\n    for (let i in data) {\n      data[i] = handleJson(data[i], handleValueFn);\n    }\n  } else {\n    return data;\n  }\n  return data;\n}\n\nfunction handleValueWithFilter(context) {\n  return function(match) {\n    if (match[0] === '@') {\n      return handleMockWord(match);\n    } else if (match.indexOf('$.') === 0) {\n      return simpleJsonPathParse(match, context);\n    } else if (match.indexOf('global.') === 0) {\n      return handleGlobalWord(match, context);\n    } else {\n      return match;\n    }\n  };\n}\n\nfunction handleFilter(str, match, context) {\n  match = match.trim();\n  try {\n    let a = filter(match, handleValueWithFilter(context));\n\n    return a;\n  } catch (err) {\n    return str;\n  }\n}\n\nfunction handleParamsValue(val, context = {}) {\n  const variableRegexp = /\\{\\{\\s*([^}]+?)\\}\\}/g;\n  if (!val || typeof val !== 'string') {\n    return val;\n  }\n  val = val.trim();\n\n  let match = val.match(/^\\{\\{([^\\}]+)\\}\\}$/);\n  if (!match) {\n    // val ==> @name 或者 $.body\n    if (val[0] === '@' || val[0] === '$') {\n      return handleFilter(val, val, context);\n    }\n  } else {\n    return handleFilter(val, match[1], context);\n  }\n\n  return val.replace(variableRegexp, (str, match) => {\n    return handleFilter(str, match, context);\n  });\n}\n\nexports.handleJson = handleJson;\nexports.handleParamsValue = handleParamsValue;\n\nexports.simpleJsonPathParse = simpleJsonPathParse;\nexports.handleMockWord = handleMockWord;\n\nexports.joinPath = (domain, joinPath) => {\n  let l = domain.length;\n  if (domain[l - 1] === '/') {\n    domain = domain.substr(0, l - 1);\n  }\n  if (joinPath[0] !== '/') {\n    joinPath = joinPath.substr(1);\n  }\n  return domain + joinPath;\n};\n\n// exports.safeArray = arr => {\n//   return Array.isArray(arr) ? arr : [];\n// };\nfunction safeArray(arr) {\n  return Array.isArray(arr) ? arr : [];\n}\nexports.safeArray = safeArray;\n\nexports.isJson5 = function isJson5(json) {\n  if (!json) return false;\n  try {\n    json = json5.parse(json);\n    return json;\n  } catch (e) {\n    return false;\n  }\n};\n\nfunction isJson(json) {\n  if (!json) return false;\n  try {\n    json = JSON.parse(json);\n    return json;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.isJson = isJson;\n\nexports.unbase64 = function(base64Str) {\n    try {\n      return stringUtils.unbase64(base64Str);\n    } catch (err) {\n      return base64Str;\n    }\n  };\n\nexports.json_parse = function(json) {\n  try {\n    return JSON.parse(json);\n  } catch (err) {\n    return json;\n  }\n};\n\nexports.json_format = function(json) {\n  try {\n    return JSON.stringify(JSON.parse(json), null, '   ');\n  } catch (e) {\n    return json;\n  }\n};\n\nexports.ArrayToObject = function(arr) {\n  let obj = {};\n  safeArray(arr).forEach(item => {\n    obj[item.name] = item.value;\n  });\n\n  return obj;\n};\n\nexports.timeago = function(timestamp) {\n  let minutes, hours, days, seconds, mouth, year;\n  const timeNow = parseInt(new Date().getTime() / 1000);\n  seconds = timeNow - timestamp;\n  if (seconds > 86400 * 30 * 12) {\n    year = parseInt(seconds / (86400 * 30 * 12));\n  } else {\n    year = 0;\n  }\n  if (seconds > 86400 * 30) {\n    mouth = parseInt(seconds / (86400 * 30));\n  } else {\n    mouth = 0;\n  }\n  if (seconds > 86400) {\n    days = parseInt(seconds / 86400);\n  } else {\n    days = 0;\n  }\n  if (seconds > 3600) {\n    hours = parseInt(seconds / 3600);\n  } else {\n    hours = 0;\n  }\n  minutes = parseInt(seconds / 60);\n  if (year > 0) {\n    return year + '年前';\n  } else if (mouth > 0 && year <= 0) {\n    return mouth + '月前';\n  } else if (days > 0 && mouth <= 0) {\n    return days + '天前';\n  } else if (days <= 0 && hours > 0) {\n    return hours + '小时前';\n  } else if (hours <= 0 && minutes > 0) {\n    return minutes + '分钟前';\n  } else if (minutes <= 0 && seconds > 0) {\n    if (seconds < 30) {\n      return '刚刚';\n    } else {\n      return seconds + '秒前';\n    }\n  } else {\n    return '刚刚';\n  }\n};\n\n// json schema 验证器\nexports.schemaValidator = function(schema, params) {\n  try {\n    const ajv = new Ajv({\n      format: false,\n      meta: false\n    });\n    let metaSchema = require('ajv/lib/refs/json-schema-draft-04.json');\n    ajv.addMetaSchema(metaSchema);\n    ajv._opts.defaultMeta = metaSchema.id;\n    ajv._refs['http://json-schema.org/schema'] = 'http://json-schema.org/draft-04/schema';\n    var localize = require('ajv-i18n');\n\n    schema = schema || {\n      type: 'object',\n      title: 'empty object',\n      properties: {}\n    };\n    const validate = ajv.compile(schema);\n    let valid = validate(params);\n\n    let message = '';\n    if (!valid) {\n      localize.zh(validate.errors);\n      message += ajv.errorsText(validate.errors, { separator: '\\n' });\n    }\n\n    return {\n      valid: valid,\n      message: message\n    };\n  } catch (e) {\n    return {\n      valid: false,\n      message: e.message\n    };\n  }\n};\n"]}