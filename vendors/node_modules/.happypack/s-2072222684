'use strict';

exports.__esModule = true;
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _reactRouterDom = require('react-router-dom');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _project = require('../../../../reducer/modules/project');

var _interfaceCol = require('../../../../reducer/modules/interfaceCol');

var _components = require('../../../../components');

require('./InterfaceCaseContent.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InterfaceCaseContent = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    interfaceColList: state.interfaceCol.interfaceColList,
    currColId: state.interfaceCol.currColId,
    currCaseId: state.interfaceCol.currCaseId,
    currCase: state.interfaceCol.currCase,
    isShowCol: state.interfaceCol.isShowCol,
    currProject: state.project.currProject,
    projectEnv: state.project.projectEnv,
    curUid: state.user.uid
  };
}, {
  fetchInterfaceColList: _interfaceCol.fetchInterfaceColList,
  fetchCaseData: _interfaceCol.fetchCaseData,
  setColData: _interfaceCol.setColData,
  fetchCaseList: _interfaceCol.fetchCaseList,
  getEnv: _project.getEnv
}), _dec(_class = (0, _reactRouter.withRouter)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(InterfaceCaseContent, _Component);

  function InterfaceCaseContent(props) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, InterfaceCaseContent);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.state = {
      isEditingCasename: true,
      editCasename: ''
    };

    _this.savePostmanRef = function (postman) {
      _this.postman = postman;
    };

    _this.updateCase = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _this$postman$state, case_env, req_params, req_query, req_headers, req_body_type, req_body_form, req_body_other, test_script, enable_script, test_res_body, test_res_header, casename, id, params, res;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$postman$state = _this.postman.state, case_env = _this$postman$state.case_env, req_params = _this$postman$state.req_params, req_query = _this$postman$state.req_query, req_headers = _this$postman$state.req_headers, req_body_type = _this$postman$state.req_body_type, req_body_form = _this$postman$state.req_body_form, req_body_other = _this$postman$state.req_body_other, test_script = _this$postman$state.test_script, enable_script = _this$postman$state.enable_script, test_res_body = _this$postman$state.test_res_body, test_res_header = _this$postman$state.test_res_header;
              casename = _this.state.editCasename;
              id = _this.props.currCase._id;
              params = {
                id: id,
                casename: casename,
                case_env: case_env,
                req_params: req_params,
                req_query: req_query,
                req_headers: req_headers,
                req_body_type: req_body_type,
                req_body_form: req_body_form,
                req_body_other: req_body_other,
                test_script: test_script,
                enable_script: enable_script,
                test_res_body: test_res_body,
                test_res_header: test_res_header
              };
              _context.next = 6;
              return _axios2.default.post('/api/col/up_case', params);

            case 6:
              res = _context.sent;

              if (_this.props.currCase.casename !== casename) {
                _this.props.fetchInterfaceColList(_this.props.match.params.id);
              }
              if (res.data.errcode) {
                _message3.default.error(res.data.errmsg);
              } else {
                _message3.default.success('更新成功');
                _this.props.fetchCaseData(id);
              }

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    }));

    _this.triggerEditCasename = function () {
      _this.setState({
        isEditingCasename: true,
        editCasename: _this.props.currCase.casename
      });
    };

    _this.cancelEditCasename = function () {
      _this.setState({
        isEditingCasename: false,
        editCasename: _this.props.currCase.casename
      });
    };

    return _this;
  }

  InterfaceCaseContent.prototype.getColId = function getColId(colList, currCaseId) {
    var currColId = 0;
    colList.forEach(function (col) {
      col.caseList.forEach(function (caseItem) {
        if (+caseItem._id === +currCaseId) {
          currColId = col._id;
        }
      });
    });
    return currColId;
  };

  InterfaceCaseContent.prototype.componentWillMount = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var result, currCaseId, params, actionId, currColId;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.props.fetchInterfaceColList(this.props.match.params.id);

            case 2:
              result = _context2.sent;
              currCaseId = this.props.currCaseId;
              params = this.props.match.params;
              actionId = params.actionId;

              currCaseId = +actionId || +currCaseId || result.payload.data.data[0].caseList[0]._id;
              currColId = this.getColId(result.payload.data.data, currCaseId);

              this.props.history.push('/project/' + params.id + '/interface/case/' + currCaseId);
              _context2.next = 11;
              return this.props.fetchCaseData(currCaseId);

            case 11:
              this.props.setColData({ currCaseId: +currCaseId, currColId: currColId, isShowCol: false });
              // 获取当前case 下的环境变量
              _context2.next = 14;
              return this.props.getEnv(this.props.currCase.project_id);

            case 14:
              // await this.getCurrEnv()

              this.setState({ editCasename: this.props.currCase.casename });

            case 15:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function componentWillMount() {
      return _ref2.apply(this, arguments);
    }

    return componentWillMount;
  }();

  InterfaceCaseContent.prototype.componentWillReceiveProps = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(nextProps) {
      var oldCaseId, newCaseId, interfaceColList, currColId;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              oldCaseId = this.props.match.params.actionId;
              newCaseId = nextProps.match.params.actionId;
              interfaceColList = nextProps.interfaceColList;
              currColId = this.getColId(interfaceColList, newCaseId);

              if (!(oldCaseId !== newCaseId)) {
                _context3.next = 11;
                break;
              }

              _context3.next = 7;
              return this.props.fetchCaseData(newCaseId);

            case 7:
              this.props.setColData({ currCaseId: +newCaseId, currColId: currColId, isShowCol: false });
              _context3.next = 10;
              return this.props.getEnv(this.props.currCase.project_id);

            case 10:
              // await this.getCurrEnv()
              this.setState({ editCasename: this.props.currCase.casename });

            case 11:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function componentWillReceiveProps(_x) {
      return _ref3.apply(this, arguments);
    }

    return componentWillReceiveProps;
  }();

  InterfaceCaseContent.prototype.render = function render() {
    var _this3 = this;

    var _props = this.props,
        currCase = _props.currCase,
        currProject = _props.currProject,
        projectEnv = _props.projectEnv;
    var _state = this.state,
        isEditingCasename = _state.isEditingCasename,
        editCasename = _state.editCasename;


    var data = (0, _assign2.default)({}, currCase, {
      env: projectEnv.env,
      pre_script: currProject.pre_script,
      after_script: currProject.after_script
    }, { _id: currCase._id });

    return _react2.default.createElement(
      'div',
      { style: { padding: '6px 0' }, className: 'case-content' },
      _react2.default.createElement(
        'div',
        { className: 'case-title' },
        !isEditingCasename && _react2.default.createElement(
          _tooltip2.default,
          { title: '\u70B9\u51FB\u7F16\u8F91', placement: 'bottom' },
          _react2.default.createElement(
            'div',
            { className: 'case-name', onClick: this.triggerEditCasename },
            currCase.casename
          )
        ),
        isEditingCasename && _react2.default.createElement(
          'div',
          { className: 'edit-case-name' },
          _react2.default.createElement(_input2.default, {
            value: editCasename,
            onChange: function onChange(e) {
              return _this3.setState({ editCasename: e.target.value });
            },
            style: { fontSize: 18 }
          })
        ),
        _react2.default.createElement(
          'span',
          { className: 'inter-link', style: { margin: '0px 8px 0px 6px', fontSize: 12 } },
          _react2.default.createElement(
            _reactRouterDom.Link,
            {
              className: 'text',
              to: '/project/' + currCase.project_id + '/interface/api/' + currCase.interface_id
            },
            '\u5BF9\u5E94\u63A5\u53E3'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        (0, _keys2.default)(currCase).length > 0 && _react2.default.createElement(_components.Postman, {
          data: data,
          type: 'case',
          saveTip: '\u66F4\u65B0\u4FDD\u5B58\u4FEE\u6539',
          save: this.updateCase,
          ref: this.savePostmanRef,
          interfaceId: currCase.interface_id,
          projectId: currCase.project_id,
          curUid: this.props.curUid
        })
      )
    );
  };

  return InterfaceCaseContent;
}(_react.PureComponent), _class2.propTypes = {
  match: _propTypes2.default.object,
  interfaceColList: _propTypes2.default.array,
  fetchInterfaceColList: _propTypes2.default.func,
  fetchCaseData: _propTypes2.default.func,
  setColData: _propTypes2.default.func,
  fetchCaseList: _propTypes2.default.func,
  history: _propTypes2.default.object,
  currColId: _propTypes2.default.number,
  currCaseId: _propTypes2.default.number,
  currCase: _propTypes2.default.object,
  isShowCol: _propTypes2.default.bool,
  currProject: _propTypes2.default.object,
  getEnv: _propTypes2.default.func,
  projectEnv: _propTypes2.default.object,
  curUid: _propTypes2.default.number
}, _temp)) || _class) || _class);
exports.default = InterfaceCaseContent;