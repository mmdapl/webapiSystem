'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./index.scss');

var _utils = require('../../../common/utils');

var _reactRouterDom = require('react-router-dom');

var _View = require('./View.js');

var _View2 = _interopRequireDefault(_View);

var _Editor = require('./Editor.js');

var _Editor2 = _interopRequireDefault(_Editor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WikiPage = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    projectMsg: state.project.currProject
  };
}, {}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(WikiPage, _Component);

  function WikiPage(props) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, WikiPage);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.endWebSocket = function () {
      try {
        if (_this.state.status === 'CLOSE') {
          var sendEnd = function sendEnd() {
            _this.WebSocket.send('end');
          };
          _this.handleWebsocketAccidentClose(sendEnd);
        }
      } catch (e) {
        return null;
      }
    };

    _this.handleConflict = function () {
      // console.log(location)
      var domain = location.hostname + (location.port !== '' ? ':' + location.port : '');
      var s = void 0;
      //因后端 node 仅支持 ws， 暂不支持 wss
      var wsProtocol = location.protocol === 'https:' ? 'wss' : 'ws';
      s = new WebSocket(wsProtocol + '://' + domain + '/api/ws_plugin/wiki_desc/solve_conflict?id=' + _this.props.match.params.id);
      s.onopen = function () {
        _this.WebSocket = s;
        s.send('start');
      };

      s.onmessage = function (e) {
        var result = JSON.parse(e.data);
        if (result.errno === 0) {
          // 更新
          if (result.data) {
            _this.setState({
              // curdata: result.data,
              desc: result.data.desc,
              username: result.data.username,
              uid: result.data.uid,
              editorTime: (0, _utils.timeago)(result.data.up_time)
            });
          }
          // 新建
          _this.setState({
            isEditor: !_this.state.isEditor,
            status: 'CLOSE'
          });
        } else {
          _this.setState({
            editUid: result.data.uid,
            editName: result.data.username,
            status: 'EDITOR'
          });
        }
      };

      s.onerror = function () {
        _this.setState({
          status: 'CLOSE'
        });
        console.warn('websocket 连接失败，将导致多人编辑同一个接口冲突。');
      };
    };

    _this.onEditor = function () {
      // this.WebSocket.send('editor');
      var sendEditor = function sendEditor() {
        _this.WebSocket.send('editor');
      };
      _this.handleWebsocketAccidentClose(sendEditor, function (status) {
        // 如果websocket 启动不成功用户依旧可以对wiki 进行编辑
        if (!status) {
          _this.setState({
            isEditor: !_this.state.isEditor
          });
        }
      });
    };

    _this.handleWebsocketAccidentClose = function (fn, callback) {
      // websocket 是否启动
      if (_this.WebSocket) {
        // websocket 断开
        if (_this.WebSocket.readyState !== 1) {
          _message3.default.error('websocket 链接失败，请重新刷新页面');
        } else {
          fn();
        }
        callback(true);
      } else {
        callback(false);
      }
    };

    _this.handleData = function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(params) {
        var result, data;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _axios2.default.get('/api/plugin/wiki_desc/get', { params: params });

              case 2:
                result = _context.sent;

                if (result.data.errcode === 0) {
                  data = result.data.data;

                  if (data) {
                    _this.setState({
                      desc: data.desc,
                      markdown: data.markdown,
                      username: data.username,
                      uid: data.uid,
                      editorTime: (0, _utils.timeago)(data.up_time)
                    });
                  }
                } else {
                  _message3.default.error('\u8BF7\u6C42\u6570\u636E\u5931\u8D25\uFF1A ' + result.data.errmsg);
                }

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.onUpload = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(desc, markdown) {
        var currProjectId, option, result;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                currProjectId = _this.props.match.params.id;
                option = {
                  project_id: currProjectId,
                  desc: desc,
                  markdown: markdown,
                  email_notice: _this.state.notice
                };
                _context2.next = 4;
                return _axios2.default.post('/api/plugin/wiki_desc/up', option);

              case 4:
                result = _context2.sent;

                if (!(result.data.errcode === 0)) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 8;
                return _this.handleData({ project_id: currProjectId });

              case 8:
                _this.setState({ isEditor: false });
                _context2.next = 12;
                break;

              case 11:
                _message3.default.error('\u66F4\u65B0\u5931\u8D25\uFF1A ' + result.data.errmsg);

              case 12:
                _this.endWebSocket();
                // this.WebSocket.send('end');

              case 13:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this2);
      }));

      return function (_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.onCancel = function () {
      _this.setState({ isEditor: false });
      _this.endWebSocket();
    };

    _this.onEmailNotice = function (e) {
      _this.setState({
        notice: e.target.checked
      });
    };

    _this.state = {
      isEditor: false,
      isUpload: true,
      desc: '',
      markdown: '',
      notice: props.projectMsg.switch_notice,
      status: 'INIT',
      editUid: '',
      editName: '',
      curdata: null
    };
    return _this;
  }

  WikiPage.prototype.componentDidMount = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
      var currProjectId;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              currProjectId = this.props.match.params.id;
              _context3.next = 3;
              return this.handleData({ project_id: currProjectId });

            case 3:
              this.handleConflict();

            case 4:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function componentDidMount() {
      return _ref3.apply(this, arguments);
    }

    return componentDidMount;
  }();

  WikiPage.prototype.componentWillUnmount = function componentWillUnmount() {
    // willUnmount
    try {
      if (this.state.status === 'CLOSE') {
        this.WebSocket.send('end');
        this.WebSocket.close();
      }
    } catch (e) {
      return null;
    }
  };
  // 结束编辑websocket


  // 处理多人编辑冲突问题


  // 点击编辑按钮 发送 websocket 获取数据


  // 处理websocket  意外断开问题


  //  获取数据


  // 数据上传

  // 取消编辑


  // 邮件通知


  WikiPage.prototype.render = function render() {
    var _state = this.state,
        isEditor = _state.isEditor,
        username = _state.username,
        editorTime = _state.editorTime,
        notice = _state.notice,
        uid = _state.uid,
        status = _state.status,
        editUid = _state.editUid,
        editName = _state.editName;

    var editorEable = this.props.projectMsg.role === 'admin' || this.props.projectMsg.role === 'owner' || this.props.projectMsg.role === 'dev';
    var isConflict = status === 'EDITOR';

    return _react2.default.createElement(
      'div',
      { className: 'g-row' },
      _react2.default.createElement(
        'div',
        { className: 'm-panel wiki-content' },
        _react2.default.createElement(
          'div',
          { className: 'wiki-content' },
          isConflict && _react2.default.createElement(
            'div',
            { className: 'wiki-conflict' },
            _react2.default.createElement(
              _reactRouterDom.Link,
              { to: '/user/profile/' + (editUid || uid) },
              _react2.default.createElement(
                'b',
                null,
                editName || username
              )
            ),
            _react2.default.createElement(
              'span',
              null,
              '\u6B63\u5728\u7F16\u8F91\u8BE5wiki\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5...'
            )
          )
        ),
        !isEditor ? _react2.default.createElement(_View2.default, {
          editorEable: editorEable,
          onEditor: this.onEditor,
          uid: uid,
          username: username,
          editorTime: editorTime,
          desc: this.state.desc
        }) : _react2.default.createElement(_Editor2.default, {
          isConflict: isConflict,
          onUpload: this.onUpload,
          onCancel: this.onCancel,
          notice: notice,
          onEmailNotice: this.onEmailNotice,
          desc: this.state.desc
        })
      )
    );
  };

  return WikiPage;
}(_react.Component), _class2.propTypes = {
  match: _propTypes2.default.object,
  projectMsg: _propTypes2.default.object
}, _temp)) || _class);
exports.default = WikiPage;