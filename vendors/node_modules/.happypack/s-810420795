'use strict';

exports.__esModule = true;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _tree = require('antd/lib/tree');

var _tree2 = _interopRequireDefault(_tree);

var _dec, _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _interfaceCol = require('../../reducer/modules/interfaceCol.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TreeNode = _tree2.default.TreeNode;
var CanSelectPathPrefix = 'CanSelectPath-';

function deleteLastObject(str) {
  return str.split('.').slice(0, -1).join('.');
}

function deleteLastArr(str) {
  return str.replace(/\[.*?\]/g, '');
}

var VariablesSelect = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    currColId: state.interfaceCol.currColId
  };
}, {
  fetchVariableParamsList: _interfaceCol.fetchVariableParamsList
}), _dec(_class = (_temp2 = _class2 = function (_Component) {
  (0, _inherits3.default)(VariablesSelect, _Component);

  function VariablesSelect() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, VariablesSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      records: [],
      expandedKeys: [],
      selectedKeys: []
    }, _this.handleSelect = function (key) {
      _this.setState({
        selectedKeys: [key]
      });
      if (key && key.indexOf(CanSelectPathPrefix) === 0) {
        key = key.substr(CanSelectPathPrefix.length);
        _this.props.click(key);
      } else {
        _this.setState({
          expandedKeys: [key]
        });
      }
    }, _this.onExpand = function (keys) {
      _this.setState({ expandedKeys: keys });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  VariablesSelect.prototype.handleRecordsData = function handleRecordsData(id) {
    var newRecords = [];
    this.id = id;
    for (var i = 0; i < this.records.length; i++) {
      if (this.records[i]._id === id) {
        break;
      }
      newRecords.push(this.records[i]);
    }
    this.setState({
      records: newRecords
    });
  };

  VariablesSelect.prototype.componentDidMount = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _props, currColId, fetchVariableParamsList, clickValue, result, records, isArrayParams, key;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _props = this.props, currColId = _props.currColId, fetchVariableParamsList = _props.fetchVariableParamsList, clickValue = _props.clickValue;
              _context.next = 3;
              return fetchVariableParamsList(currColId);

            case 3:
              result = _context.sent;
              records = result.payload.data.data;

              this.records = records.sort(function (a, b) {
                return a.index - b.index;
              });
              this.handleRecordsData(this.props.id);

              if (clickValue) {
                isArrayParams = clickValue.lastIndexOf(']') === clickValue.length - 1;
                key = isArrayParams ? deleteLastArr(clickValue) : deleteLastObject(clickValue);

                this.setState({
                  expandedKeys: [key],
                  selectedKeys: [CanSelectPathPrefix + clickValue]
                });
                // this.props.click(clickValue);
              }

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function componentDidMount() {
      return _ref.apply(this, arguments);
    }

    return componentDidMount;
  }();

  VariablesSelect.prototype.componentWillReceiveProps = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(nextProps) {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.records && nextProps.id && this.id !== nextProps.id) {
                this.handleRecordsData(nextProps.id);
              }

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function componentWillReceiveProps(_x) {
      return _ref2.apply(this, arguments);
    }

    return componentWillReceiveProps;
  }();

  VariablesSelect.prototype.render = function render() {
    var _this2 = this;

    var pathSelctByTree = function pathSelctByTree(data) {
      var elementKeyPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '$';
      var deepLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var keys = (0, _keys2.default)(data);
      var TreeComponents = keys.map(function (key, index) {
        var item = data[key],
            casename = void 0;
        if (deepLevel === 0) {
          elementKeyPrefix = '$';
          elementKeyPrefix = elementKeyPrefix + '.' + item._id;
          casename = item.casename;
          item = {
            params: item.params,
            body: item.body
          };
        } else if (Array.isArray(data)) {
          elementKeyPrefix = index === 0 ? elementKeyPrefix + '[' + key + ']' : deleteLastArr(elementKeyPrefix) + '[' + key + ']';
        } else {
          elementKeyPrefix = index === 0 ? elementKeyPrefix + '.' + key : deleteLastObject(elementKeyPrefix) + '.' + key;
        }
        if (item && (typeof item === 'undefined' ? 'undefined' : (0, _typeof3.default)(item)) === 'object') {
          var isDisable = Array.isArray(item) && item.length === 0;
          return _react2.default.createElement(
            TreeNode,
            { key: elementKeyPrefix, disabled: isDisable, title: casename || key },
            pathSelctByTree(item, elementKeyPrefix, deepLevel + 1)
          );
        }
        return _react2.default.createElement(TreeNode, { key: CanSelectPathPrefix + elementKeyPrefix, title: key });
      });

      return TreeComponents;
    };

    return _react2.default.createElement(
      'div',
      { className: 'modal-postman-form-variable' },
      _react2.default.createElement(
        _tree2.default,
        {
          expandedKeys: this.state.expandedKeys,
          selectedKeys: this.state.selectedKeys,
          onSelect: function onSelect(_ref3) {
            var key = _ref3[0];
            return _this2.handleSelect(key);
          },
          onExpand: this.onExpand
        },
        pathSelctByTree(this.state.records)
      )
    );
  };

  return VariablesSelect;
}(_react.Component), _class2.propTypes = {
  click: _propTypes2.default.func,
  currColId: _propTypes2.default.number,
  fetchVariableParamsList: _propTypes2.default.func,
  clickValue: _propTypes2.default.string,
  id: _propTypes2.default.number
}, _temp2)) || _class);
exports.default = VariablesSelect;