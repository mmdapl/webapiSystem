'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require('underscore');
var fieldNum = 1;

exports.schemaTransformToTable = function (schema) {
  try {
    schema = checkJsonSchema(schema);
    var result = Schema(schema, 0);
    result = _.isArray(result) ? result : [result];
    return result;
  } catch (err) {
    console.log(err);
  }
};

//  自动添加type

function checkJsonSchema(json) {
  var newJson = (0, _assign2.default)({}, json);
  if (_.isUndefined(json.type) && _.isObject(json.properties)) {
    newJson.type = 'object';
  }

  return newJson;
}

var mapping = function mapping(data, index) {
  switch (data.type) {
    case 'string':
      return SchemaString(data);

    case 'number':
      return SchemaNumber(data);

    case 'array':
      return SchemaArray(data, index);

    case 'object':
      return SchemaObject(data, index);

    case 'boolean':
      return SchemaBoolean(data);

    case 'integer':
      return SchemaInt(data);
    default:
      return SchemaOther(data);
  }
};

var Schema = function Schema(data, key) {
  var result = mapping(data, key);
  if (data.type !== 'object') {
    var desc = result.desc;
    var d = result.default;
    var children = result.children;

    delete result.desc;
    delete result.default;
    delete result.children;
    var item = {
      type: data.type,
      key: key,
      desc: desc,
      default: d,
      sub: result
    };

    if (_.isArray(children)) {
      item = (0, _assign2.default)({}, item, { children: children });
    }

    return item;
  }

  return result;
};

var SchemaObject = function SchemaObject(data, key) {
  var properties = data.properties,
      required = data.required;

  properties = properties || {};
  required = required || [];
  var result = [];
  (0, _keys2.default)(properties).map(function (name, index) {
    var value = properties[name];
    var copiedState = checkJsonSchema(JSON.parse((0, _stringify2.default)(value)));

    var optionForm = Schema(copiedState, key + '-' + index);
    var item = {
      name: name,
      key: key + '-' + index,
      desc: copiedState.description,
      required: required.indexOf(name) != -1
    };

    if (value.type === 'object' || _.isUndefined(value.type) && _.isArray(optionForm)) {
      item = (0, _assign2.default)({}, item, { type: 'object', children: optionForm });
      delete item.sub;
    } else {
      item = (0, _assign2.default)({}, item, optionForm);
    }

    result.push(item);
  });

  return result;
};

var SchemaString = function SchemaString(data) {
  var item = {
    desc: data.description,
    default: data.default,
    maxLength: data.maxLength,
    minLength: data.minLength,
    enum: data.enum,
    enumDesc: data.enumDesc,
    format: data.format,
    mock: data.mock && data.mock.mock
  };
  return item;
};

var SchemaArray = function SchemaArray(data, index) {
  data.items = data.items || { type: 'string' };
  var items = checkJsonSchema(data.items);
  var optionForm = mapping(items, index);
  //  处理array嵌套array的问题
  var children = optionForm;
  if (!_.isArray(optionForm) && !_.isUndefined(optionForm)) {
    optionForm.key = 'array-' + fieldNum++;
    children = [optionForm];
  }

  var item = {
    desc: data.description,
    default: data.default,
    minItems: data.minItems,
    uniqueItems: data.uniqueItems,
    maxItems: data.maxItems,
    itemType: items.type,
    children: children
  };
  if (items.type === 'string') {
    item = (0, _assign2.default)({}, item, { itemFormat: items.format });
  }
  return item;
};

var SchemaNumber = function SchemaNumber(data) {
  var item = {
    desc: data.description,
    maximum: data.maximum,
    minimum: data.minimum,
    default: data.default,
    format: data.format,
    enum: data.enum,
    enumDesc: data.enumDesc,
    mock: data.mock && data.mock.mock
  };
  return item;
};

var SchemaInt = function SchemaInt(data) {
  var item = {
    desc: data.description,
    maximum: data.maximum,
    minimum: data.minimum,
    default: data.default,
    format: data.format,
    enum: data.enum,
    enumDesc: data.enumDesc,
    mock: data.mock && data.mock.mock
  };
  return item;
};

var SchemaBoolean = function SchemaBoolean(data) {
  var item = {
    desc: data.description,
    default: data.default,
    enum: data.enum,
    mock: data.mock && data.mock.mock
  };
  return item;
};

var SchemaOther = function SchemaOther(data) {
  var item = {
    desc: data.description,
    default: data.default,
    mock: data.mock && data.mock.mock
  };
  return item;
};