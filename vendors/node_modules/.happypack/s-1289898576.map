{"version":3,"sources":["node_modules\\json-schema-editor-visual\\package\\components\\AceEditor\\mockEditor.js"],"names":["ace","require","run","options","editor","mockEditor","rhymeCompleter","handleJson","json","curData","text","obj","JSON","parse","format","jsonData","e","message","container","data","wordList","name","mock","push","readOnly","fullScreen","edit","$blockScrolling","Infinity","getSession","setMode","setReadOnly","renderer","$cursorLayer","element","style","display","setOptions","useWorker","_fullscreen_yapi","getValue","setValue","handleData","insertCode","code","pos","selection","getCursor","session","insert","stringify","clearSelection","on","onChange","call","module","exports"],"mappings":"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","file":"mockEditor.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["var ace = require('brace');\nrequire('brace/mode/json');\n\n\nfunction run(options) {\n  var editor,\n    mockEditor,\n    rhymeCompleter;\n  function handleJson(json) {\n    var curData = mockEditor.curData;\n    try {\n      curData.text = json;\n      var obj = JSON.parse(json);\n      curData.format = true;\n      curData.jsonData = obj;      \n    } catch (e) {\n      curData.format = e.message;\n    }\n  }\n  options = options || {};\n  var container, data;\n  container = options.container || 'mock-editor';\n  if (options.wordList && typeof options.wordList === 'object' && options.wordList.name && options.wordList.mock) {\n    wordList.push(options.wordList);\n  }\n  data = options.data || '';\n  options.readOnly = options.readOnly || false;\n  options.fullScreen = options.fullScreen || false;\n\n  editor = ace.edit(container)\n  editor.$blockScrolling = Infinity;\n  editor.getSession().setMode('ace/mode/json');\n  if (options.readOnly === true) {\n    editor.setReadOnly(true);\n    editor.renderer.$cursorLayer.element.style.display = \"none\";\n  }\n  editor.setOptions({\n    useWorker: true\n  });\n  editor._fullscreen_yapi = options.fullScreen;\n  mockEditor = {\n    curData: {},\n    getValue: ()=>mockEditor.curData.text,\n    setValue: function (data) {\n        editor.setValue(handleData(data));\n    },\n    editor: editor,\n    options: options,\n    insertCode: (code)=>{\n      let pos = editor.selection.getCursor()\n      editor.session.insert(pos, code)\n    }\n  }\n\n  function handleData(data){\n    data = data || '';\n    if(typeof data === 'string'){\n      return data;\n    }else if (typeof data === 'object') {\n      return JSON.stringify(data, null, \"  \")\n    }\n  }\n\n  mockEditor.setValue(handleData(data));\n  handleJson(editor.getValue())\n\n  editor.clearSelection();\n\n  editor.getSession().on('change', () => {\n    handleJson(editor.getValue())\n    if (typeof options.onChange === 'function') {\n      options.onChange.call(mockEditor, mockEditor.curData);\n    }\n    editor.clearSelection();\n\n  });\n\n  return mockEditor;\n}\n\nmodule.exports = run;\n"]}