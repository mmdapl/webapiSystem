'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _freeze = require('babel-runtime/core-js/object/freeze');

var _freeze2 = _interopRequireDefault(_freeze);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var httpRequestByNode = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(options) {
    var handleRes, handleData, response;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            handleData = function handleData() {
              var contentTypeItem = void 0;
              if (!options) return;
              if ((0, _typeof3.default)(options.headers) === 'object' && options.headers) {
                (0, _keys2.default)(options.headers).forEach(function (key) {
                  if (/content-type/i.test(key)) {
                    if (options.headers[key]) {
                      contentTypeItem = options.headers[key].split(';')[0].trim().toLowerCase();
                    }
                  }
                  if (!options.headers[key]) delete options.headers[key];
                });

                if (contentTypeItem === 'application/x-www-form-urlencoded' && (0, _typeof3.default)(options.data) === 'object' && options.data) {
                  options.data = qs.stringify(options.data);
                }
              }
            };

            handleRes = function handleRes(response) {
              if (!response || (typeof response === 'undefined' ? 'undefined' : (0, _typeof3.default)(response)) !== 'object') {
                return {
                  res: {
                    status: 500,
                    body: isNode ? '请求出错, 内网服务器自动化测试无法访问到，请检查是否为内网服务器！' : '请求出错'
                  }
                };
              }
              return {
                res: {
                  header: response.headers,
                  status: response.status,
                  body: response.data
                }
              };
            };

            _context2.prev = 2;

            handleData(options);
            _context2.next = 6;
            return axios({
              method: options.method,
              url: options.url,
              headers: options.headers,
              timeout: 10000,
              maxRedirects: 0,
              httpsAgent: new https.Agent({
                rejectUnauthorized: false
              }),
              data: options.data
            });

          case 6:
            response = _context2.sent;
            return _context2.abrupt('return', handleRes(response));

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](2);

            if (!(_context2.t0.response === undefined)) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt('return', handleRes({
              headers: {},
              status: null,
              data: _context2.t0.message
            }));

          case 14:
            return _context2.abrupt('return', handleRes(_context2.t0.response));

          case 15:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[2, 10]]);
  }));

  return function httpRequestByNode(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var sandbox = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var script = arguments[1];
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!isNode) {
              _context3.next = 15;
              break;
            }

            _context3.prev = 1;

            context.context = context;
            context.console = console;
            context.Promise = _promise2.default;
            context.setTimeout = setTimeout;
            context = sandboxByNode(context, script);
            _context3.next = 13;
            break;

          case 9:
            _context3.prev = 9;
            _context3.t0 = _context3['catch'](1);

            _context3.t0.message = 'Script: ' + script + '\n      message: ' + _context3.t0.message;
            throw _context3.t0;

          case 13:
            _context3.next = 16;
            break;

          case 15:
            context = sandboxByBrowser(context, script);

          case 16:
            if (!(context.promise && (0, _typeof3.default)(context.promise) === 'object' && context.promise.then)) {
              _context3.next = 26;
              break;
            }

            _context3.prev = 17;
            _context3.next = 20;
            return context.promise;

          case 20:
            _context3.next = 26;
            break;

          case 22:
            _context3.prev = 22;
            _context3.t1 = _context3['catch'](17);

            _context3.t1.message = 'Script: ' + script + '\n      message: ' + _context3.t1.message;
            throw _context3.t1;

          case 26:
            return _context3.abrupt('return', context);

          case 27:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[1, 9], [17, 22]]);
  }));

  return function sandbox() {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * 
 * @param {*} defaultOptions 
 * @param {*} preScript 
 * @param {*} afterScript 
 * @param {*} commonContext  负责传递一些业务信息，crossRequest 不关注具体传什么，只负责当中间人
 */
var crossRequest = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(defaultOptions, preScript, afterScript) {
    var commonContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var options, taskId, urlObj, query, context, data;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = (0, _assign2.default)({}, defaultOptions);
            taskId = options.taskId || Math.random() + '';
            urlObj = URL.parse(options.url, true), query = {};

            query = (0, _assign2.default)(query, urlObj.query);
            _context4.t0 = isNode;
            _context4.t1 = options.method;
            _context4.t2 = urlObj.pathname;
            _context4.t3 = query;
            _context4.t4 = options.headers || {};
            _context4.t5 = options.data;
            _context4.next = 12;
            return getStorage(taskId);

          case 12:
            _context4.t6 = _context4.sent;
            context = {
              isNode: _context4.t0,

              get href() {
                return urlObj.href;
              },
              set href(val) {
                throw new Error('context.href 不能被赋值');
              },
              get hostname() {
                return urlObj.hostname;
              },
              set hostname(val) {
                throw new Error('context.hostname 不能被赋值');
              },

              get caseId() {
                return options.caseId;
              },

              set caseId(val) {
                throw new Error('context.caseId 不能被赋值');
              },

              method: _context4.t1,
              pathname: _context4.t2,
              query: _context4.t3,
              requestHeader: _context4.t4,
              requestBody: _context4.t5,
              promise: false,
              storage: _context4.t6
            };


            (0, _assign2.default)(context, commonContext);

            context.utils = (0, _freeze2.default)({
              _: _,
              CryptoJS: CryptoJS,
              jsrsasign: jsrsasign,
              base64: utils.base64,
              md5: utils.md5,
              sha1: utils.sha1,
              sha224: utils.sha224,
              sha256: utils.sha256,
              sha384: utils.sha384,
              sha512: utils.sha512,
              unbase64: utils.unbase64,
              axios: axios
            });

            if (!preScript) {
              _context4.next = 23;
              break;
            }

            _context4.next = 19;
            return sandbox(context, preScript);

          case 19:
            context = _context4.sent;

            defaultOptions.url = options.url = URL.format({
              protocol: urlObj.protocol,
              host: urlObj.host,
              query: context.query,
              pathname: context.pathname
            });
            defaultOptions.headers = options.headers = context.requestHeader;
            defaultOptions.data = options.data = context.requestBody;

          case 23:
            data = void 0;

            if (!isNode) {
              _context4.next = 31;
              break;
            }

            _context4.next = 27;
            return httpRequestByNode(options);

          case 27:
            data = _context4.sent;

            data.req = options;
            _context4.next = 34;
            break;

          case 31:
            _context4.next = 33;
            return new _promise2.default(function (resolve, reject) {
              options.error = options.success = function (res, header, data) {
                var message = '';
                if (res && typeof res === 'string') {
                  res = json_parse(data.res.body);
                  data.res.body = res;
                }
                if (!isNode) message = '请求异常，请检查 chrome network 错误信息... https://juejin.im/post/5c888a3e5188257dee0322af 通过该链接查看教程"）';
                if (isNaN(data.res.status)) {
                  reject({
                    body: res || message,
                    header: header,
                    message: message
                  });
                }
                resolve(data);
              };

              window.crossRequest(options);
            });

          case 33:
            data = _context4.sent;

          case 34:
            if (!afterScript) {
              _context4.next = 46;
              break;
            }

            context.responseData = data.res.body;
            context.responseHeader = data.res.header;
            context.responseStatus = data.res.status;
            context.runTime = data.runTime;
            _context4.next = 41;
            return sandbox(context, afterScript);

          case 41:
            context = _context4.sent;

            data.res.body = context.responseData;
            data.res.header = context.responseHeader;
            data.res.status = context.responseStatus;
            data.runTime = context.runTime;

          case 46:
            return _context4.abrupt('return', data);

          case 47:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function crossRequest(_x6, _x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('./utils'),
    isJson5 = _require.isJson5,
    json_parse = _require.json_parse,
    handleJson = _require.handleJson,
    joinPath = _require.joinPath,
    safeArray = _require.safeArray;

var constants = require('../client/constants/variable.js');
var _ = require('underscore');
var URL = require('url');
var utils = require('./power-string.js').utils;
var HTTP_METHOD = constants.HTTP_METHOD;
var axios = require('axios');
var qs = require('qs');
var CryptoJS = require('crypto-js');
var jsrsasign = require('jsrsasign');
var https = require('https');

var isNode = (typeof global === 'undefined' ? 'undefined' : (0, _typeof3.default)(global)) == 'object' && global.global === global;
var ContentTypeMap = {
  'application/json': 'json',
  'application/xml': 'xml',
  'text/xml': 'xml',
  'application/html': 'html',
  'text/html': 'html',
  other: 'text'
};

var getStorage = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id) {
    var storage, data;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!isNode) {
              _context.next = 9;
              break;
            }

            storage = global.storageCreator(id);
            _context.next = 5;
            return storage.getItem();

          case 5:
            data = _context.sent;
            return _context.abrupt('return', {
              getItem: function getItem(name) {
                return data[name];
              },
              setItem: function setItem(name, value) {
                data[name] = value;
                storage.setItem(name, value);
              }
            });

          case 9:
            return _context.abrupt('return', {
              getItem: function getItem(name) {
                return window.localStorage.getItem(name);
              },
              setItem: function setItem(name, value) {
                return window.localStorage.setItem(name, value);
              }
            });

          case 10:
            _context.next = 16;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](0);

            console.error(_context.t0);
            return _context.abrupt('return', {
              getItem: function getItem(name) {
                console.error(name, _context.t0);
              },
              setItem: function setItem(name, value) {
                console.error(name, value, _context.t0);
              }
            });

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 12]]);
  }));

  return function getStorage(_x) {
    return _ref.apply(this, arguments);
  };
}();

function handleContentType(headers) {
  if (!headers || (typeof headers === 'undefined' ? 'undefined' : (0, _typeof3.default)(headers)) !== 'object') return ContentTypeMap.other;
  var contentTypeItem = 'other';
  try {
    (0, _keys2.default)(headers).forEach(function (key) {
      if (/content-type/i.test(key)) {
        contentTypeItem = headers[key].split(';')[0].trim().toLowerCase();
      }
    });
    return ContentTypeMap[contentTypeItem] ? ContentTypeMap[contentTypeItem] : ContentTypeMap.other;
  } catch (err) {
    return ContentTypeMap.other;
  }
}

function checkRequestBodyIsRaw(method, reqBodyType) {
  if (reqBodyType && reqBodyType !== 'file' && reqBodyType !== 'form' && HTTP_METHOD[method].request_body) {
    return reqBodyType;
  }
  return false;
}

function checkNameIsExistInArray(name, arr) {
  var isRepeat = false;
  for (var i = 0; i < arr.length; i++) {
    var item = arr[i];
    if (item.name === name) {
      isRepeat = true;
      break;
    }
  }
  return isRepeat;
}

function handleCurrDomain(domains, case_env) {
  var currDomain = _.find(domains, function (item) {
    return item.name === case_env;
  });

  if (!currDomain) {
    currDomain = domains[0];
  }
  return currDomain;
}

function sandboxByNode() {
  var sandbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var script = arguments[1];

  var vm = require('vm');
  script = new vm.Script(script);
  var context = new vm.createContext(sandbox);
  script.runInContext(context, {
    timeout: 10000
  });
  return sandbox;
}

function sandboxByBrowser() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var script = arguments[1];

  if (!script || typeof script !== 'string') {
    return context;
  }
  var beginScript = '';
  for (var i in context) {
    beginScript += 'var ' + i + ' = context.' + i + ';';
  }
  try {
    eval(beginScript + script);
  } catch (err) {
    var message = 'Script:\n                   ----CodeBegin----:\n                   ' + beginScript + '\n                   ' + script + '\n                   ----CodeEnd----\n                  ';
    err.message = 'Script: ' + message + '\n    message: ' + err.message;

    throw err;
  }
  return context;
}

function handleParams(interfaceData, handleValue, requestParams) {
  var interfaceRunData = (0, _assign2.default)({}, interfaceData);
  function paramsToObjectWithEnable(arr) {
    var obj = {};
    safeArray(arr).forEach(function (item) {
      if (item && item.name && (item.enable || item.required === '1')) {
        obj[item.name] = handleValue(item.value, currDomain.global);
        if (requestParams) {
          requestParams[item.name] = obj[item.name];
        }
      }
    });
    return obj;
  }

  function paramsToObjectUnWithEnable(arr) {
    var obj = {};
    safeArray(arr).forEach(function (item) {
      if (item && item.name) {
        obj[item.name] = handleValue(item.value, currDomain.global);
        if (requestParams) {
          requestParams[item.name] = obj[item.name];
        }
      }
    });
    return obj;
  }

  var case_env = interfaceRunData.case_env,
      path = interfaceRunData.path,
      env = interfaceRunData.env,
      _id = interfaceRunData._id;

  var currDomain = void 0,
      requestBody = void 0,
      requestOptions = {};
  currDomain = handleCurrDomain(env, case_env);
  interfaceRunData.req_params = interfaceRunData.req_params || [];
  interfaceRunData.req_params.forEach(function (item) {
    var val = handleValue(item.value, currDomain.global);
    if (requestParams) {
      requestParams[item.name] = val;
    }
    path = path.replace(':' + item.name, val || ':' + item.name);
    path = path.replace('{' + item.name + '}', val || '{' + item.name + '}');
  });

  var urlObj = URL.parse(joinPath(currDomain.domain, path), true);
  var url = URL.format({
    protocol: urlObj.protocol || 'http',
    host: urlObj.host,
    pathname: urlObj.pathname,
    query: (0, _assign2.default)(urlObj.query, paramsToObjectWithEnable(interfaceRunData.req_query))
  });

  var headers = paramsToObjectUnWithEnable(interfaceRunData.req_headers);
  requestOptions = {
    url: url,
    caseId: _id,
    method: interfaceRunData.method,
    headers: headers,
    timeout: 82400000
  };

  // 对 raw 类型的 form 处理
  try {
    if (interfaceRunData.req_body_type === 'raw') {
      if (headers && headers['Content-Type']) {
        if (headers['Content-Type'].indexOf('application/x-www-form-urlencoded') >= 0) {
          interfaceRunData.req_body_type = 'form';
          var reqData = json_parse(interfaceRunData.req_body_other);
          if (reqData && (typeof reqData === 'undefined' ? 'undefined' : (0, _typeof3.default)(reqData)) === 'object') {
            interfaceRunData.req_body_form = [];
            (0, _keys2.default)(reqData).forEach(function (key) {
              interfaceRunData.req_body_form.push({
                name: key,
                type: 'text',
                value: (0, _stringify2.default)(reqData[key]),
                enable: true
              });
            });
          }
        } else if (headers['Content-Type'].indexOf('application/json') >= 0) {
          interfaceRunData.req_body_type = 'json';
        }
      }
    }
  } catch (e) {
    console.error('err', e);
  }

  if (HTTP_METHOD[interfaceRunData.method].request_body) {
    if (interfaceRunData.req_body_type === 'form') {
      requestBody = paramsToObjectWithEnable(safeArray(interfaceRunData.req_body_form).filter(function (item) {
        return item.type == 'text';
      }));
    } else if (interfaceRunData.req_body_type === 'json') {
      var reqBody = isJson5(interfaceRunData.req_body_other);
      if (reqBody === false) {
        requestBody = interfaceRunData.req_body_other;
      } else {
        if (requestParams) {
          requestParams = (0, _assign2.default)(requestParams, reqBody);
        }
        requestBody = handleJson(reqBody, function (val) {
          return handleValue(val, currDomain.global);
        });
      }
    } else {
      requestBody = interfaceRunData.req_body_other;
    }
    requestOptions.data = requestBody;
    if (interfaceRunData.req_body_type === 'form') {
      requestOptions.files = paramsToObjectWithEnable(safeArray(interfaceRunData.req_body_form).filter(function (item) {
        return item.type == 'file';
      }));
    } else if (interfaceRunData.req_body_type === 'file') {
      requestOptions.file = 'single-file';
    }
  }
  return requestOptions;
}

exports.checkRequestBodyIsRaw = checkRequestBodyIsRaw;
exports.handleParams = handleParams;
exports.handleContentType = handleContentType;
exports.crossRequest = crossRequest;
exports.handleCurrDomain = handleCurrDomain;
exports.checkNameIsExistInArray = checkNameIsExistInArray;