{"version":3,"sources":["client\\containers\\AddProject\\AddProject.js"],"names":["TextArea","FormItem","Item","Option","RadioGroup","Group","formItemLayout","labelCol","lg","span","xs","sm","wrapperCol","className","ProjectList","groupList","state","group","currGroup","fetchGroupList","addProject","setBreadcrumb","withRouter","props","handlePath","val","e","target","value","form","setFieldsValue","basepath","currGroupId","handleOk","preventDefault","validateFields","err","values","group_id","icon","constants","PROJECT_ICON","color","PROJECT_COLOR","then","res","payload","data","errcode","resetFields","success","history","push","_id","componentWillMount","name","length","setState","render","getFieldDecorator","rules","initialValue","required","message","map","item","index","role","toString","group_name","max","offset","Component","propTypes","PropTypes","array","object","func","autobind","create"],"mappings":"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","file":"AddProject.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { PureComponent as Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, Input, Icon, Tooltip, Select, message, Row, Col, Radio } from 'antd';\nimport { addProject } from '../../reducer/modules/project.js';\nimport { fetchGroupList } from '../../reducer/modules/group.js';\nimport { autobind } from 'core-decorators';\nimport { setBreadcrumb } from '../../reducer/modules/user';\nconst { TextArea } = Input;\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nimport { pickRandomProperty, handlePath, nameLengthLimit } from '../../common';\nimport constants from '../../constants/variable.js';\nimport { withRouter } from 'react-router';\nimport './Addproject.scss';\n\nconst formItemLayout = {\n  labelCol: {\n    lg: { span: 3 },\n    xs: { span: 24 },\n    sm: { span: 6 }\n  },\n  wrapperCol: {\n    lg: { span: 21 },\n    xs: { span: 24 },\n    sm: { span: 14 }\n  },\n  className: 'form-item'\n};\n\n@connect(\n  state => {\n    return {\n      groupList: state.group.groupList,\n      currGroup: state.group.currGroup\n    };\n  },\n  {\n    fetchGroupList,\n    addProject,\n    setBreadcrumb\n  }\n)\n@withRouter\nclass ProjectList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      groupList: [],\n      currGroupId: null\n    };\n  }\n  static propTypes = {\n    groupList: PropTypes.array,\n    form: PropTypes.object,\n    currGroup: PropTypes.object,\n    addProject: PropTypes.func,\n    history: PropTypes.object,\n    setBreadcrumb: PropTypes.func,\n    fetchGroupList: PropTypes.func\n  };\n\n  handlePath = e => {\n    let val = e.target.value;\n    this.props.form.setFieldsValue({\n      basepath: handlePath(val)\n    });\n  };\n\n  // 确认添加项目\n  @autobind\n  handleOk(e) {\n    const { form, addProject } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        values.group_id = values.group;\n        values.icon = constants.PROJECT_ICON[0];\n        values.color = pickRandomProperty(constants.PROJECT_COLOR);\n        addProject(values).then(res => {\n          if (res.payload.data.errcode == 0) {\n            form.resetFields();\n            message.success('创建成功! ');\n            this.props.history.push('/project/' + res.payload.data.data._id + '/interface/api');\n          }\n        });\n      }\n    });\n  }\n\n  async componentWillMount() {\n    this.props.setBreadcrumb([{ name: '新建项目' }]);\n    if (!this.props.currGroup._id) {\n      await this.props.fetchGroupList();\n    }\n    if (this.props.groupList.length === 0) {\n      return null;\n    }\n    this.setState({\n      currGroupId: this.props.currGroup._id ? this.props.currGroup._id : this.props.groupList[0]._id\n    });\n    this.setState({ groupList: this.props.groupList });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div className=\"g-row\">\n        <div className=\"g-row m-container\">\n          <Form>\n            <FormItem {...formItemLayout} label=\"项目名称\">\n              {getFieldDecorator('name', {\n                rules: nameLengthLimit('项目')\n              })(<Input />)}\n            </FormItem>\n\n            <FormItem {...formItemLayout} label=\"所属分组\">\n              {getFieldDecorator('group', {\n                initialValue: this.state.currGroupId + '',\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择项目所属的分组!'\n                  }\n                ]\n              })(\n                <Select>\n                  {this.state.groupList.map((item, index) => (\n                    <Option\n                      disabled={\n                        !(item.role === 'dev' || item.role === 'owner' || item.role === 'admin')\n                      }\n                      value={item._id.toString()}\n                      key={index}\n                    >\n                      {item.group_name}\n                    </Option>\n                  ))}\n                </Select>\n              )}\n            </FormItem>\n\n            <hr className=\"breakline\" />\n\n            <FormItem\n              {...formItemLayout}\n              label={\n                <span>\n                  基本路径&nbsp;\n                  <Tooltip title=\"接口基本路径，为空是根路径\">\n                    <Icon type=\"question-circle-o\" />\n                  </Tooltip>\n                </span>\n              }\n            >\n              {getFieldDecorator('basepath', {\n                rules: [\n                  {\n                    required: false,\n                    message: '请输入项目基本路径'\n                  }\n                ]\n              })(<Input onBlur={this.handlePath} />)}\n            </FormItem>\n\n            <FormItem {...formItemLayout} label=\"描述\">\n              {getFieldDecorator('desc', {\n                rules: [\n                  {\n                    required: false,\n                    message: '描述不超过144字!',\n                    max: 144\n                  }\n                ]\n              })(<TextArea rows={4} />)}\n            </FormItem>\n\n            <FormItem {...formItemLayout} label=\"权限\">\n              {getFieldDecorator('project_type', {\n                rules: [\n                  {\n                    required: true\n                  }\n                ],\n                initialValue: 'private'\n              })(\n                <RadioGroup>\n                  <Radio value=\"private\" className=\"radio\">\n                    <Icon type=\"lock\" />私有<br />\n                    <span className=\"radio-desc\">只有组长和项目开发者可以索引并查看项目信息</span>\n                  </Radio>\n                  <br />\n                  {/* <Radio value=\"public\" className=\"radio\">\n                    <Icon type=\"unlock\" />公开<br />\n                    <span className=\"radio-desc\">任何人都可以索引并查看项目信息</span>\n                  </Radio> */}\n                </RadioGroup>\n              )}\n            </FormItem>\n          </Form>\n          <Row>\n            <Col sm={{ offset: 6 }} lg={{ offset: 3 }}>\n              <Button className=\"m-btn\" icon=\"plus\" type=\"primary\" onClick={this.handleOk}>\n                创建项目\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(ProjectList);\n"]}