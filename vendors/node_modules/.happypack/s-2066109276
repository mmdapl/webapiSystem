'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.pushInputValue = pushInputValue;
exports.reqTagValue = reqTagValue;
exports.reqHeaderValue = reqHeaderValue;
exports.addReqHeader = addReqHeader;
exports.deleteReqHeader = deleteReqHeader;
exports.getReqParams = getReqParams;
exports.getResParams = getResParams;
exports.pushInterfaceName = pushInterfaceName;
exports.pushInterfaceMethod = pushInterfaceMethod;
exports.fetchInterfaceProject = fetchInterfaceProject;
exports.addInterfaceClipboard = addInterfaceClipboard;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Actions
var FETCH_ADD_INTERFACE_INPUT = 'yapi/addInterface/FETCH_ADD_INTERFACE_INPUT';
var FETCH_ADD_INTERFACE_TAG_VALUE = 'yapi/addInterface/FETCH_ADD_INTERFACE_TAG_VALUE';
var FETCH_ADD_INTERFACE_HEADER_VALUE = 'yapi/addInterface/FETCH_ADD_INTERFACE_HEADER_VALUE';
var ADD_INTERFACE_SEQ_HEADER = 'yapi/addInterface/ADD_INTERFACE_SEQ_HEADER';
var DELETE_INTERFACE_SEQ_HEADER = 'yapi/addInterface/DELETE_INTERFACE_SEQ_HEADER';
var GET_INTERFACE_REQ_PARAMS = 'yapi/addInterface/GET_INTERFACE_REQ_PARAMS';
var GET_INTERFACE_RES_PARAMS = 'yapi/addInterface/GET_INTERFACE_RES_PARAMS';
var PUSH_INTERFACE_NAME = 'yapi/addInterface/PUSH_INTERFACE_NAME';
var PUSH_INTERFACE_METHOD = 'yapi/addInterface/PUSH_INTERFACE_METHOD';
var FETCH_INTERFACE_PROJECT = 'yapi/addInterface/FETCH_INTERFACE_PROJECT';
var ADD_INTERFACE_CLIPBOARD = 'yapi/addInterface/ADD_INTERFACE_CLIPBOARD';

// Reducer
var initialState = {
  interfaceName: '',
  url: '',
  method: 'GET',
  // 默认请求头部有一条数据
  seqGroup: [{
    id: 0,
    name: '',
    value: ''
  }],
  reqParams: '',
  resParams: '',
  project: {},
  clipboard: function clipboard() {}
};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case FETCH_ADD_INTERFACE_INPUT:
      return (0, _extends3.default)({}, state, {
        url: action.payload
      });
    case FETCH_ADD_INTERFACE_TAG_VALUE:
      return (0, _extends3.default)({}, state, {
        tagValue: action.payload
      });
    case FETCH_ADD_INTERFACE_HEADER_VALUE:
      return (0, _extends3.default)({}, state, {
        headerValue: action.payload
      });
    case ADD_INTERFACE_SEQ_HEADER:
      return (0, _extends3.default)({}, state, {
        seqGroup: action.payload
      });
    case DELETE_INTERFACE_SEQ_HEADER:
      return (0, _extends3.default)({}, state, {
        seqGroup: action.payload
      });
    case GET_INTERFACE_REQ_PARAMS:
      return (0, _extends3.default)({}, state, {
        reqParams: action.payload
      });
    case GET_INTERFACE_RES_PARAMS:
      return (0, _extends3.default)({}, state, {
        resParams: action.payload
      });
    case PUSH_INTERFACE_NAME:
      return (0, _extends3.default)({}, state, {
        interfaceName: action.payload
      });
    case PUSH_INTERFACE_METHOD:
      return (0, _extends3.default)({}, state, {
        method: action.payload
      });
    case FETCH_INTERFACE_PROJECT:
      return (0, _extends3.default)({}, state, {
        project: action.payload.data.data
      });
    case ADD_INTERFACE_CLIPBOARD:
      return (0, _extends3.default)({}, state, {
        clipboard: action.payload
      });
    default:
      return state;
  }
};

// Action Creators


function pushInputValue(value) {
  return {
    type: FETCH_ADD_INTERFACE_INPUT,
    payload: value
  };
}

function reqTagValue(value) {
  return {
    type: FETCH_ADD_INTERFACE_TAG_VALUE,
    payload: value
  };
}

function reqHeaderValue(value) {
  return {
    type: FETCH_ADD_INTERFACE_HEADER_VALUE,
    payload: value
  };
}

function addReqHeader(value) {
  return {
    type: ADD_INTERFACE_SEQ_HEADER,
    payload: value
  };
}

function deleteReqHeader(value) {
  return {
    type: DELETE_INTERFACE_SEQ_HEADER,
    payload: value
  };
}

function getReqParams(value) {
  return {
    type: GET_INTERFACE_REQ_PARAMS,
    payload: value
  };
}

function getResParams(value) {
  return {
    type: GET_INTERFACE_RES_PARAMS,
    payload: value
  };
}

function pushInterfaceName(value) {
  return {
    type: PUSH_INTERFACE_NAME,
    payload: value
  };
}

function pushInterfaceMethod(value) {
  return {
    type: PUSH_INTERFACE_METHOD,
    payload: value
  };
}

function fetchInterfaceProject(id) {
  return {
    type: FETCH_INTERFACE_PROJECT,
    payload: _axios2.default.get('/api/project/get', { params: { id: id } })
  };
}

function addInterfaceClipboard(func) {
  return {
    type: ADD_INTERFACE_CLIPBOARD,
    payload: func
  };
}