{"version":3,"sources":["client\\components\\UsernameAutoComplete\\UsernameAutoComplete.js"],"names":["Option","UsernameAutoComplete","props","state","dataSource","fetching","handleSearch","params","q","value","setState","axios","get","then","userList","data","forEach","push","username","v","id","uid","handleChange","callbackState","render","children","map","item","index","width","color","Component","propTypes","PropTypes","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,iBAAOA,MAAtB;;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;IAmBMC,oB;;;AACJ,gCAAYC,KAAZ,EAAmB;AAAA;;AAEjB;AACA;AAHiB,+DACjB,sBAAMA,KAAN,CADiB;;AAAA,UAMnBC,KANmB,GAMX;AACNC,kBAAY,EADN;AAENC,gBAAU;AAFJ,KANW;;AAAA,UAgBnBC,YAhBmB,GAgBJ,iBAAS;AACtB,UAAMC,SAAS,EAAEC,GAAGC,KAAL,EAAf;AACA;AACA;AACA,YAAKC,QAAL,CAAc,EAAEL,UAAU,IAAZ,EAAd;AACAM,sBAAMC,GAAN,CAAU,kBAAV,EAA8B,EAAEL,cAAF,EAA9B,EAA0CM,IAA1C,CAA+C,gBAAQ;AACrD;AACA;AACA;AACA,YAAMC,WAAW,EAAjB;AACAC,eAAOA,KAAKA,IAAL,CAAUA,IAAjB;;AAEA,YAAIA,IAAJ,EAAU;AACRA,eAAKC,OAAL,CAAa;AAAA,mBACXF,SAASG,IAAT,CAAc;AACZC,wBAAUC,EAAED,QADA;AAEZE,kBAAID,EAAEE;AAFM,aAAd,CADW;AAAA,WAAb;AAMA;AACA,gBAAKX,QAAL,CAAc;AACZN,wBAAYU;AADA,WAAd;AAGD;AACF,OAnBD;AAoBD,KAzCkB;;AAAA,UA4CnBQ,YA5CmB,GA4CJ,iBAAS;AACtB,YAAKZ,QAAL,CAAc;AACZN,oBAAY,EADA;AAEZ;AACAC,kBAAU;AAHE,OAAd;AAKA,YAAKH,KAAL,CAAWqB,aAAX,CAAyBd,KAAzB;AACD,KAnDkB;;AAAA;AAIlB;;AAWD;;;AA4BA;;;iCAUAe,M,qBAAS;AAAA,iBACwB,KAAKrB,KAD7B;AAAA,QACDC,UADC,UACDA,UADC;AAAA,QACWC,QADX,UACWA,QADX;;;AAGP,QAAMoB,WAAWrB,WAAWsB,GAAX,CAAe,UAACC,IAAD,EAAOC,KAAP;AAAA,aAC9B;AAAC,cAAD;AAAA,UAAQ,KAAKA,KAAb,EAAoB,OAAO,KAAKD,KAAKP,EAArC;AACGO,aAAKT;AADR,OAD8B;AAAA,KAAf,CAAjB;;AAMA;AACA;AACA;AACA,WACE;AAAA;AAAA;AACE,cAAK,UADP;AAEE,eAAO,EAAEW,OAAO,MAAT,EAFT;AAGE,qBAAY,sCAHd;AAIE,sBAAc,KAJhB;AAKE,yBAAgB,UALlB;AAME,yBAAiBxB,WAAW;AAAA;AAAA,YAAM,OAAO,EAAEyB,OAAO,KAAT,EAAb;AAAA;AAAA,SAAX,GAA4D,IAN/E;AAOE,kBAAU,KAAKxB,YAPjB;AAQE,kBAAU,KAAKgB;AARjB;AAUGG;AAVH,KADF;AAcD,G;;;EAhFgCM,oB,UAY1BC,S,GAAY;AACjBT,iBAAeU,oBAAUC;AADR,C;kBAuENjC,oB","file":"UsernameAutoComplete.js","sourceRoot":"C:/Users/DUOYI/Desktop/api/test/vendors","sourcesContent":["import React, { PureComponent as Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'antd';\nimport axios from 'axios';\n\nconst Option = Select.Option;\n\n/**\n * 用户名输入框自动完成组件\n *\n * @component UsernameAutoComplete\n * @examplelanguage js\n *\n * * 用户名输入框自动完成组件\n * * 用户名输入框自动完成组件\n *\n *s\n */\n\n/**\n * 获取自动输入的用户信息\n *\n * 获取子组件state\n * @property callbackState\n * @type function\n * @description 类型提示：支持数组传值；也支持用函数格式化字符串：函数有两个参数(scale, index)；\n * 受控属性：滑块滑到某一刻度时所展示的刻度文本信息。如果不需要标签，请将该属性设置为 [] 空列表来覆盖默认转换函数。\n * @returns {object} {uid: xxx, username: xxx}\n * @examplelanguage js\n * @example\n * onUserSelect(childState) {\n *   this.setState({\n *     uid: childState.uid,\n *     username: childState.username\n *   })\n * }\n *\n */\nclass UsernameAutoComplete extends Component {\n  constructor(props) {\n    super(props);\n    // this.lastFetchId = 0;\n    // this.fetchUser = debounce(this.fetchUser, 800);\n  }\n\n  state = {\n    dataSource: [],\n    fetching: false\n  };\n\n  static propTypes = {\n    callbackState: PropTypes.func\n  };\n\n  // 搜索回调\n  handleSearch = value => {\n    const params = { q: value };\n    // this.lastFetchId += 1;\n    // const fetchId = this.lastFetchId;\n    this.setState({ fetching: true });\n    axios.get('/api/user/search', { params }).then(data => {\n      // if (fetchId !== this.lastFetchId) { // for fetch callback order\n      //   return;\n      // }\n      const userList = [];\n      data = data.data.data;\n\n      if (data) {\n        data.forEach(v =>\n          userList.push({\n            username: v.username,\n            id: v.uid\n          })\n        );\n        // 取回搜索值后，设置 dataSource\n        this.setState({\n          dataSource: userList\n        });\n      }\n    });\n  };\n\n  // 选中候选词时\n  handleChange = value => {\n    this.setState({\n      dataSource: [],\n      // value,\n      fetching: false\n    });\n    this.props.callbackState(value);\n  };\n\n  render() {\n    let { dataSource, fetching } = this.state;\n\n    const children = dataSource.map((item, index) => (\n      <Option key={index} value={'' + item.id}>\n        {item.username}\n      </Option>\n    ));\n\n    // if (!children.length) {\n    //   fetching = false;\n    // }\n    return (\n      <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"请输入用户名\"\n        filterOption={false}\n        optionLabelProp=\"children\"\n        notFoundContent={fetching ? <span style={{ color: 'red' }}> 当前用户不存在</span> : null}\n        onSearch={this.handleSearch}\n        onChange={this.handleChange}\n      >\n        {children}\n      </Select>\n    );\n  }\n}\n\nexport default UsernameAutoComplete;\n"]}