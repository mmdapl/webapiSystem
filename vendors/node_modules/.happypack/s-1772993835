'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author suxiaoxin
 */

var aUniqueVerticalStringNotFoundInData = '___UNIQUE_VERTICAL___';
var aUniqueCommaStringNotFoundInData = '___UNIQUE_COMMA___';
var segmentSeparateChar = '|';
var methodAndArgsSeparateChar = ':';
var argsSeparateChar = ',';

var _md = require('md5');
var _sha = require('sha.js');
var Base64 = require('js-base64').Base64;

var stringHandles = {
  md5: function md5(str) {
    return _md(str);
  },

  sha: function sha(str, arg) {
    return _sha(arg).update(str).digest('hex');
  },

  /**
   * type: sha1 sha224 sha256 sha384 sha512
   */
  sha1: function sha1(str) {
    return _sha('sha1').update(str).digest('hex');
  },

  sha224: function sha224(str) {
    return _sha('sha224').update(str).digest('hex');
  },

  sha256: function sha256(str) {
    return _sha('sha256').update(str).digest('hex');
  },

  sha384: function sha384(str) {
    return _sha('sha384').update(str).digest('hex');
  },

  sha512: function sha512(str) {
    return _sha('sha512').update(str).digest('hex');
  },

  base64: function base64(str) {
    return Base64.encode(str);
  },

  unbase64: function unbase64(str) {
    return Base64.decode(str);
  },

  substr: function substr(str) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return str.substr.apply(str, args);
  },

  concat: function concat(str) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    args.forEach(function (item) {
      str += item;
    });
    return str;
  },

  lconcat: function lconcat(str) {
    var _this = this;

    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    args.forEach(function (item) {
      str = item + _this._string;
    });
    return str;
  },

  lower: function lower(str) {
    return str.toLowerCase();
  },

  upper: function upper(str) {
    return str.toUpperCase();
  },

  length: function length(str) {
    return str.length;
  },

  number: function number(str) {
    return !isNaN(str) ? +str : str;
  }
};

var handleValue = function handleValue(str) {
  return str;
};

var _handleValue = function _handleValue(str) {
  if (str[0] === str[str.length - 1] && (str[0] === '"' || str[0] === "'")) {
    str = str.substr(1, str.length - 2);
  }
  return handleValue(str.replace(new RegExp(aUniqueVerticalStringNotFoundInData, 'g'), segmentSeparateChar).replace(new RegExp(aUniqueCommaStringNotFoundInData, 'g'), argsSeparateChar));
};

var PowerString = function () {
  function PowerString(str) {
    (0, _classCallCheck3.default)(this, PowerString);

    this._string = str;
  }

  PowerString.prototype.toString = function toString() {
    return this._string;
  };

  return PowerString;
}();

function addMethod(method, fn) {
  PowerString.prototype[method] = function () {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    args.unshift(this._string + '');
    this._string = fn.apply(this, args);
    return this;
  };
}

function importMethods(handles) {
  for (var method in handles) {
    addMethod(method, handles[method]);
  }
}

importMethods(stringHandles);

function handleOriginStr(str, handleValueFn) {
  if (!str) return str;
  if (typeof handleValueFn === 'function') {
    handleValue = handleValueFn;
  }
  str = str.replace('\\' + segmentSeparateChar, aUniqueVerticalStringNotFoundInData).replace('\\' + argsSeparateChar, aUniqueCommaStringNotFoundInData).split(segmentSeparateChar).map(handleSegment).reduce(execute, null).toString();
  return str;
}

function execute(str, curItem, index) {
  if (index === 0) {
    return new PowerString(curItem);
  }
  return str[curItem.method].apply(str, curItem.args);
}

function handleSegment(str, index) {
  str = str.trim();
  if (index === 0) {
    return _handleValue(str);
  }

  var method = void 0,
      args = [];
  if (str.indexOf(methodAndArgsSeparateChar) > 0) {
    str = str.split(methodAndArgsSeparateChar);
    method = str[0].trim();
    args = str[1].split(argsSeparateChar).map(function (item) {
      return _handleValue(item.trim());
    });
  } else {
    method = str;
  }
  if (typeof stringHandles[method] !== 'function') {
    throw new Error('This method name(' + method + ') is not exist.');
  }

  return {
    method: method,
    args: args
  };
}

module.exports = {
  utils: stringHandles,
  PowerString: PowerString,
  /**
   * 类似于 angularJs的 filter 功能
   * @params string
   * @params fn 处理参数值函数，默认是一个返回原有参数值函数
   *
   * @expamle
   * filter('string | substr: 1, 10 | md5 | concat: hello ')
   */
  filter: handleOriginStr
};