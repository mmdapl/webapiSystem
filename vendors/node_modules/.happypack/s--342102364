'use strict';

exports.__esModule = true;
exports.handleSwaggerUrlData = exports.checkProjectName = exports.updateToken = exports.getToken = exports.getProject = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var getProject = exports.getProject = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id) {
    var result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _axios2.default.get('/api/project/get?id=' + id);

          case 2:
            result = _context.sent;
            return _context.abrupt('return', {
              type: GET_CURR_PROJECT,
              payload: result
            });

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getProject(_x2) {
    return _ref.apply(this, arguments);
  };
}();

var getToken = exports.getToken = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(project_id) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', {
              type: GET_TOKEN,
              payload: _axios2.default.get('/api/project/token', {
                params: { project_id: project_id }
              })
            });

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getToken(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var updateToken = exports.updateToken = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(project_id) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', {
              type: UPDATE_TOKEN,
              payload: _axios2.default.get('/api/project/update_token', {
                params: { project_id: project_id }
              })
            });

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function updateToken(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var checkProjectName = exports.checkProjectName = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(name, group_id) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt('return', {
              type: CHECK_PROJECT_NAME,
              payload: _axios2.default.get('/api/project/check_project_name', {
                params: { name: name, group_id: group_id }
              })
            });

          case 1:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function checkProjectName(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

var handleSwaggerUrlData = exports.handleSwaggerUrlData = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(url) {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt('return', {
              type: GET_SWAGGER_URL_DATA,
              payload: _axios2.default.get('/api/project/swagger_url?url=' + url)
            });

          case 1:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function handleSwaggerUrlData(_x7) {
    return _ref5.apply(this, arguments);
  };
}();

exports.fetchProjectList = fetchProjectList;
exports.copyProjectMsg = copyProjectMsg;
exports.addMember = addMember;
exports.delMember = delMember;
exports.changeMemberRole = changeMemberRole;
exports.changeMemberEmailNotice = changeMemberEmailNotice;
exports.getProjectMemberList = getProjectMemberList;
exports.addProject = addProject;
exports.updateProject = updateProject;
exports.updateProjectScript = updateProjectScript;
exports.updateProjectMock = updateProjectMock;
exports.updateEnv = updateEnv;
exports.getEnv = getEnv;
exports.upsetProject = upsetProject;
exports.delProject = delProject;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _variable = require('../../constants/variable');

var _variable2 = _interopRequireDefault(_variable);

var _common = require('../../common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Actions
var FETCH_PROJECT_LIST = 'yapi/project/FETCH_PROJECT_LIST';
var PROJECT_ADD = 'yapi/project/PROJECT_ADD';
var PROJECT_DEL = 'yapi/project/PROJECT_DEL';
// const CHANGE_TABLE_LOADING = 'yapi/project/CHANGE_TABLE_LOADING';
var PROJECT_UPDATE = 'yapi/project/PROJECT_UPDATE';
var PROJECT_UPDATE_ENV = 'yapi/project/PROJECT_UPDATE_ENV';
var PROJECT_UPSET = 'yapi/project/PROJECT_UPSET';
var GET_CURR_PROJECT = 'yapi/project/GET_CURR_PROJECT';
var GET_PEOJECT_MEMBER = 'yapi/project/GET_PEOJECT_MEMBER';
var ADD_PROJECT_MEMBER = 'yapi/project/ADD_PROJECT_MEMBER';
var DEL_PROJECT_MEMBER = 'yapi/project/DEL_PROJECT_MEMBER';
var CHANGE_PROJECT_MEMBER = 'yapi/project/CHANGE_PROJECT_MEMBER';
var GET_TOKEN = 'yapi/project/GET_TOKEN';
var UPDATE_TOKEN = 'yapi/project/UPDATE_TOKEN';
var CHECK_PROJECT_NAME = 'yapi/project/CHECK_PROJECT_NAME';
var COPY_PROJECT_MSG = 'yapi/project/COPY_PROJECT_MSG';
var PROJECT_GET_ENV = 'yapi/project/PROJECT_GET_ENV';
var CHANGE_MEMBER_EMAIL_NOTICE = 'yapi/project/CHANGE_MEMBER_EMAIL_NOTICE';
var GET_SWAGGER_URL_DATA = 'yapi/project/GET_SWAGGER_URL_DATA';
// Reducer
var initialState = {
  isUpdateModalShow: false,
  handleUpdateIndex: -1,
  projectList: [],
  projectMsg: {},
  userInfo: {},
  tableLoading: true,
  total: 0,
  currPage: 1,
  token: '',
  currProject: {},
  projectEnv: {
    env: [{
      header: []
    }]
  },
  swaggerUrlData: ''
};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case GET_CURR_PROJECT:
      {
        return (0, _extends3.default)({}, state, {
          currProject: action.payload.data.data
        });
      }

    case FETCH_PROJECT_LIST:
      {
        return (0, _extends3.default)({}, state, {
          projectList: action.payload.data.data.list,
          total: action.payload.data.data.total,
          userInfo: action.payload.data.data.userinfo
        });
      }

    case PROJECT_ADD:
      {
        return state;
      }
    case PROJECT_DEL:
      {
        return state;
      }

    case GET_TOKEN:
      {
        return (0, _extends3.default)({}, state, {
          token: action.payload.data.data
        });
      }

    case PROJECT_GET_ENV:
      {
        return (0, _extends3.default)({}, state, {
          projectEnv: action.payload.data.data
        });
      }
    case UPDATE_TOKEN:
      {
        return (0, _extends3.default)({}, state, {
          token: action.payload.data.data.token
        });
      }

    case CHECK_PROJECT_NAME:
      {
        return (0, _extends3.default)({}, state);
      }
    case COPY_PROJECT_MSG:
      {
        return (0, _extends3.default)({}, state);
      }

    case GET_SWAGGER_URL_DATA:
      {
        return (0, _extends3.default)({}, state, {
          swaggerUrlData: action.payload.data.data
        });
      }
    default:
      return state;
  }
};

// 获取某分组下的项目列表


function fetchProjectList(id, pageNum) {
  return {
    type: FETCH_PROJECT_LIST,
    payload: _axios2.default.get('/api/project/list', {
      params: {
        group_id: id,
        page: pageNum || 1,
        limit: _variable2.default.PAGE_LIMIT
      }
    })
  };
}

// 复制项目
function copyProjectMsg(params) {
  return {
    type: COPY_PROJECT_MSG,
    payload: _axios2.default.post('/api/project/copy', params)
  };
}

// 添加项目成员
function addMember(param) {
  return {
    type: ADD_PROJECT_MEMBER,
    payload: _axios2.default.post('/api/project/add_member', param)
  };
}

// 删除项目成员
function delMember(param) {
  return {
    type: DEL_PROJECT_MEMBER,
    payload: _axios2.default.post('/api/project/del_member', param)
  };
}

// 修改项目成员权限
function changeMemberRole(param) {
  return {
    type: CHANGE_PROJECT_MEMBER,
    payload: _axios2.default.post('/api/project/change_member_role', param)
  };
}
// 修改项目成员是否收到消息通知
function changeMemberEmailNotice(param) {
  return {
    type: CHANGE_MEMBER_EMAIL_NOTICE,
    payload: _axios2.default.post('/api/project/change_member_email_notice', param)
  };
}

// 获取项目成员列表
function getProjectMemberList(id) {
  return {
    type: GET_PEOJECT_MEMBER,
    payload: _axios2.default.get('/api/project/get_member_list', {
      params: { id: id }
    })
  };
}

// export function changeTableLoading(data) {
//   return {
//     type: CHANGE_TABLE_LOADING,
//     payload: data
//   };
// }

function addProject(data) {
  var name = data.name,
      prd_host = data.prd_host,
      basepath = data.basepath,
      desc = data.desc,
      group_id = data.group_id,
      group_name = data.group_name,
      protocol = data.protocol,
      icon = data.icon,
      color = data.color,
      project_type = data.project_type;

  // 过滤项目名称中有html标签存在的情况

  name = (0, _common.htmlFilter)(name);
  var param = {
    name: name,
    prd_host: prd_host,
    protocol: protocol,
    basepath: basepath,
    desc: desc,
    group_id: group_id,
    group_name: group_name,
    icon: icon,
    color: color,
    project_type: project_type
  };
  return {
    type: PROJECT_ADD,
    payload: _axios2.default.post('/api/project/add', param)
  };
}

// 修改项目
function updateProject(data) {
  var name = data.name,
      project_type = data.project_type,
      basepath = data.basepath,
      desc = data.desc,
      _id = data._id,
      env = data.env,
      group_id = data.group_id,
      switch_notice = data.switch_notice,
      strice = data.strice,
      is_json5 = data.is_json5,
      tag = data.tag;

  // 过滤项目名称中有html标签存在的情况

  name = (0, _common.htmlFilter)(name);
  var param = {
    name: name,
    project_type: project_type,
    basepath: basepath,
    switch_notice: switch_notice,
    desc: desc,
    id: _id,
    env: env,
    group_id: group_id,
    strice: strice,
    is_json5: is_json5,
    tag: tag
  };
  return {
    type: PROJECT_UPDATE,
    payload: _axios2.default.post('/api/project/up', param)
  };
}

// 修改项目脚本
function updateProjectScript(data) {
  return {
    type: PROJECT_UPDATE,
    payload: _axios2.default.post('/api/project/up', data)
  };
}

// 修改全局mock
function updateProjectMock(data) {
  return {
    type: PROJECT_UPDATE,
    payload: _axios2.default.post('/api/project/up', data)
  };
}

// 修改项目环境配置
function updateEnv(data) {
  var env = data.env,
      _id = data._id;

  var param = {
    id: _id,
    env: env
  };
  return {
    type: PROJECT_UPDATE_ENV,
    payload: _axios2.default.post('/api/project/up_env', param)
  };
}

// 获取项目环境配置
function getEnv(project_id) {
  return {
    type: PROJECT_GET_ENV,
    payload: _axios2.default.get('/api/project/get_env', { params: { project_id: project_id } })
  };
}

// 修改项目头像
function upsetProject(param) {
  return {
    type: PROJECT_UPSET,
    payload: _axios2.default.post('/api/project/upset', param)
  };
}

// 删除项目
function delProject(id) {
  var param = { id: id };
  return {
    type: PROJECT_DEL,
    payload: _axios2.default.post('/api/project/del', param)
  };
}