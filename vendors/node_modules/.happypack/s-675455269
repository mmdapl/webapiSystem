'use strict';

exports.__esModule = true;

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _table = require('antd/lib/table');

var _table2 = _interopRequireDefault(_table);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _dec, _class, _class2, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _AddInterfaceForm = require('./AddInterfaceForm');

var _AddInterfaceForm2 = _interopRequireDefault(_AddInterfaceForm);

var _interface = require('../../../../reducer/modules/interface.js');

var _project = require('../../../../reducer/modules/project.js');

var _reactRouterDom = require('react-router-dom');

var _variable = require('../../../../constants/variable');

var _variable2 = _interopRequireDefault(_variable);

require('./Edit.scss');

var _Label = require('../../../../components/Label/Label.js');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Option = _select2.default.Option;
var limit = 20;

var InterfaceList = (_dec = (0, _reactRedux.connect)(function (state) {
  return {
    curData: state.inter.curdata,
    curProject: state.project.currProject,
    catList: state.inter.list,
    totalTableList: state.inter.totalTableList,
    catTableList: state.inter.catTableList,
    totalCount: state.inter.totalCount,
    count: state.inter.count
  };
}, {
  fetchInterfaceListMenu: _interface.fetchInterfaceListMenu,
  fetchInterfaceList: _interface.fetchInterfaceList,
  fetchInterfaceCatList: _interface.fetchInterfaceCatList,
  getProject: _project.getProject
}), _dec(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(InterfaceList, _Component);

  function InterfaceList(props) {
    (0, _classCallCheck3.default)(this, InterfaceList);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      visible: false,
      data: [],
      filteredInfo: {},
      catid: null,
      total: null,
      current: 1
    };
    return _this;
  }

  // 更新分类简介


  InterfaceList.prototype.componentWillMount = function componentWillMount() {
    this.actionId = this.props.match.params.actionId;
    this.handleRequest(this.props);
  };

  InterfaceList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var _actionId = nextProps.match.params.actionId;

    if (this.actionId !== _actionId) {
      this.actionId = _actionId;
      this.setState({
        current: 1
      }, function () {
        return _this2.handleRequest(nextProps);
      });
    }
  };

  //page change will be processed in handleChange by pagination
  // changePage = current => {
  //   if (this.state.current !== current) {
  //     this.setState(
  //       {
  //         current: current
  //       },
  //       () => this.handleRequest(this.props)
  //     );
  //   }
  // };

  InterfaceList.prototype.render = function render() {
    var _this3 = this;

    var tag = this.props.curProject.tag;
    var tagFilter = tag.map(function (item) {
      return { text: item.name, value: item.name };
    });

    var columns = [{
      title: '接口名称',
      dataIndex: 'title',
      key: 'title',
      width: 30,
      render: function render(text, item) {
        return _react2.default.createElement(
          _reactRouterDom.Link,
          { to: '/project/' + item.project_id + '/interface/api/' + item._id },
          _react2.default.createElement(
            'span',
            { className: 'path' },
            text
          )
        );
      }
    }, {
      title: '接口路径',
      dataIndex: 'path',
      key: 'path',
      width: 50,
      render: function render(item, record) {
        var path = _this3.props.curProject.basepath + item;
        var methodColor = _variable2.default.METHOD_COLOR[record.method ? record.method.toLowerCase() : 'get'] || _variable2.default.METHOD_COLOR['get'];
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'span',
            {
              style: { color: methodColor.color, backgroundColor: methodColor.bac },
              className: 'colValue'
            },
            record.method
          ),
          _react2.default.createElement(
            _tooltip2.default,
            { title: '\u5F00\u653E\u63A5\u53E3', placement: 'topLeft' },
            _react2.default.createElement(
              'span',
              null,
              record.api_opened && _react2.default.createElement(_icon2.default, { className: 'opened', type: 'eye-o' })
            )
          ),
          _react2.default.createElement(
            _tooltip2.default,
            { title: path, placement: 'topLeft', overlayClassName: 'toolTip' },
            _react2.default.createElement(
              'span',
              { className: 'path' },
              path
            )
          )
        );
      }
    }, {
      title: '接口分类',
      dataIndex: 'catid',
      key: 'catid',
      width: 28,
      render: function render(item, record) {
        return _react2.default.createElement(
          _select2.default,
          {
            value: item + '',
            className: 'select path',
            onChange: function onChange(catid) {
              return _this3.changeInterfaceCat(record._id, catid);
            }
          },
          _this3.props.catList.map(function (cat) {
            return _react2.default.createElement(
              Option,
              { key: cat.id + '', value: cat._id + '' },
              _react2.default.createElement(
                'span',
                null,
                cat.name
              )
            );
          })
        );
      }
    }, {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      width: 24,
      render: function render(text, record) {
        var key = record.key;
        return _react2.default.createElement(
          _select2.default,
          {
            value: key + '-' + text,
            className: 'select',
            onChange: _this3.changeInterfaceStatus
          },
          _react2.default.createElement(
            Option,
            { value: key + '-done' },
            _react2.default.createElement(
              'span',
              { className: 'tag-status done' },
              '\u5DF2\u5B8C\u6210'
            )
          ),
          _react2.default.createElement(
            Option,
            { value: key + '-undone' },
            _react2.default.createElement(
              'span',
              { className: 'tag-status undone' },
              '\u672A\u5B8C\u6210'
            )
          )
        );
      },
      filters: [{
        text: '已完成',
        value: 'done'
      }, {
        text: '未完成',
        value: 'undone'
      }],
      onFilter: function onFilter(value, record) {
        return record.status.indexOf(value) === 0;
      }
    }, {
      title: 'tag',
      dataIndex: 'tag',
      key: 'tag',
      width: 14,
      render: function render(text) {
        var textMsg = text.length > 0 ? text.join('\n') : '未设置';
        return _react2.default.createElement(
          'div',
          { className: 'table-desc' },
          textMsg
        );
      },
      filters: tagFilter,
      onFilter: function onFilter(value, record) {
        return record.tag.indexOf(value) >= 0;
      }
    }];
    var intername = '',
        desc = '';
    var cat = this.props.curProject ? this.props.curProject.cat : [];

    if (cat) {
      for (var i = 0; i < cat.length; i++) {
        if (cat[i]._id === this.state.catid) {
          intername = cat[i].name;
          desc = cat[i].desc;
          break;
        }
      }
    }
    // const data = this.state.data ? this.state.data.map(item => {
    //   item.key = item._id;
    //   return item;
    // }) : [];
    var data = [];
    var total = 0;
    var params = this.props.match.params;

    if (!params.actionId) {
      data = this.props.totalTableList;
      total = this.props.totalCount;
    } else if (isNaN(params.actionId)) {
      data = this.props.catTableList;
      total = this.props.count;
    }

    data = data.map(function (item) {
      item.key = item._id;
      return item;
    });

    var pageConfig = {
      total: total,
      pageSize: limit,
      current: this.state.current
      // onChange: this.changePage
    };

    var isDisabled = this.props.catList.length === 0;

    // console.log(this.props.curProject.tag)

    return _react2.default.createElement(
      'div',
      { style: { padding: '24px' } },
      _react2.default.createElement(
        'h2',
        { className: 'interface-title', style: { display: 'inline-block', margin: 0 } },
        intername ? intername : '全部接口',
        '\u5171 (',
        total,
        ') \u4E2A'
      ),
      _react2.default.createElement(
        _button2.default,
        {
          style: { float: 'right' },
          disabled: isDisabled,
          type: 'primary',
          onClick: function onClick() {
            return _this3.setState({ visible: true });
          }
        },
        '\u6DFB\u52A0\u63A5\u53E3'
      ),
      _react2.default.createElement(
        'div',
        { style: { marginTop: '10px' } },
        _react2.default.createElement(_Label2.default, { onChange: function onChange(value) {
            return _this3.handleChangeInterfaceCat(value, intername);
          }, desc: desc })
      ),
      _react2.default.createElement(_table2.default, {
        className: 'table-interfacelist',
        pagination: pageConfig,
        columns: columns,
        onChange: this.handleChange,
        dataSource: data
      }),
      this.state.visible && _react2.default.createElement(
        _modal2.default,
        {
          title: '\u6DFB\u52A0\u63A5\u53E3',
          visible: this.state.visible,
          onCancel: function onCancel() {
            return _this3.setState({ visible: false });
          },
          footer: null,
          className: 'addcatmodal'
        },
        _react2.default.createElement(_AddInterfaceForm2.default, {
          catid: this.state.catid,
          catdata: cat,
          onCancel: function onCancel() {
            return _this3.setState({ visible: false });
          },
          onSubmit: this.handleAddInterface
        })
      )
    );
  };

  return InterfaceList;
}(_react.PureComponent), _class2.propTypes = {
  curData: _propTypes2.default.object,
  catList: _propTypes2.default.array,
  match: _propTypes2.default.object,
  curProject: _propTypes2.default.object,
  history: _propTypes2.default.object,
  fetchInterfaceListMenu: _propTypes2.default.func,
  fetchInterfaceList: _propTypes2.default.func,
  fetchInterfaceCatList: _propTypes2.default.func,
  totalTableList: _propTypes2.default.array,
  catTableList: _propTypes2.default.array,
  totalCount: _propTypes2.default.number,
  count: _propTypes2.default.number,
  getProject: _propTypes2.default.func
}, _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.handleRequest = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
      var params, projectId, option, catid, _option;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              params = props.match.params;

              if (params.actionId) {
                _context.next = 9;
                break;
              }

              projectId = params.id;

              _this4.setState({
                catid: null
              });
              option = {
                page: _this4.state.current,
                limit: limit,
                project_id: projectId,
                status: _this4.state.filteredInfo.status,
                tag: _this4.state.filteredInfo.tag
              };
              _context.next = 7;
              return _this4.props.fetchInterfaceList(option);

            case 7:
              _context.next = 15;
              break;

            case 9:
              if (!isNaN(params.actionId)) {
                _context.next = 15;
                break;
              }

              catid = params.actionId.substr(4);

              _this4.setState({ catid: +catid });
              _option = {
                page: _this4.state.current,
                limit: limit,
                catid: catid,
                status: _this4.state.filteredInfo.status,
                tag: _this4.state.filteredInfo.tag
              };
              _context.next = 15;
              return _this4.props.fetchInterfaceCatList(_option);

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this4);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();

  this.handleChangeInterfaceCat = function (desc, name) {
    var params = {
      catid: _this4.state.catid,
      name: name,
      desc: desc
    };

    _axios2.default.post('/api/interface/up_cat', params).then(function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(res) {
        var project_id;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(res.data.errcode !== 0)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt('return', _message3.default.error(res.data.errmsg));

              case 2:
                project_id = _this4.props.match.params.id;
                _context2.next = 5;
                return _this4.props.getProject(project_id);

              case 5:
                _context2.next = 7;
                return _this4.props.fetchInterfaceListMenu(project_id);

              case 7:
                _message3.default.success('接口集合简介更新成功');

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this4);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  };

  this.handleChange = function (pagination, filters, sorter) {
    _this4.setState({
      current: pagination.current || 1,
      sortedInfo: sorter,
      filteredInfo: filters
    }, function () {
      return _this4.handleRequest(_this4.props);
    });
  };

  this.handleAddInterface = function (data) {
    data.project_id = _this4.props.curProject._id;
    _axios2.default.post('/api/interface/add', data).then(function (res) {
      if (res.data.errcode !== 0) {
        return _message3.default.error(res.data.errmsg + ', \u4F60\u53EF\u4EE5\u5728\u5DE6\u4FA7\u7684\u63A5\u53E3\u5217\u8868\u4E2D\u5BF9\u63A5\u53E3\u8FDB\u884C\u5220\u6539');
      }
      _message3.default.success('接口添加成功');
      var interfaceId = res.data.data._id;
      _this4.props.history.push('/project/' + data.project_id + '/interface/api/' + interfaceId);
      _this4.props.fetchInterfaceListMenu(data.project_id);
    });
  };

  this.changeInterfaceCat = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(id, catid) {
      var params, result;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              params = {
                id: id,
                catid: catid
              };
              _context3.next = 3;
              return _axios2.default.post('/api/interface/up', params);

            case 3:
              result = _context3.sent;

              if (result.data.errcode === 0) {
                _message3.default.success('修改成功');
                _this4.handleRequest(_this4.props);
                _this4.props.fetchInterfaceListMenu(_this4.props.curProject._id);
              } else {
                _message3.default.error(result.data.errmsg);
              }

            case 5:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this4);
    }));

    return function (_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();

  this.changeInterfaceStatus = function () {
    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(value) {
      var params, result;
      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              params = {
                id: value.split('-')[0],
                status: value.split('-')[1]
              };
              _context4.next = 3;
              return _axios2.default.post('/api/interface/up', params);

            case 3:
              result = _context4.sent;

              if (result.data.errcode === 0) {
                _message3.default.success('修改成功');
                _this4.handleRequest(_this4.props);
              } else {
                _message3.default.error(result.data.errmsg);
              }

            case 5:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this4);
    }));

    return function (_x5) {
      return _ref4.apply(this, arguments);
    };
  }();
}, _temp)) || _class);
exports.default = InterfaceList;